1:
-   name: '{print}'
    explanation: –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π –¥—É–º–∞ —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `{print}`.
    demo_code: '{print} –ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–µ –¥–æ—à–ª–∏ –ø—Ä–∏ –•–µ–¥–∏!'
-   name: '{ask}'
    explanation: –ó–∞–¥–∞–π –≤—ä–ø—Ä–æ—Å —Å `{ask}`.
    demo_code: '{ask} –ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç?'
-   name: '{echo}'
    explanation: –ü–æ–≤—Ç–æ—Ä–∏ —Ç–æ–≤–∞, –∫–æ–µ—Ç–æ —Å–∏ –Ω–∞–ø–∏—Å–∞–ª(–∞) —Å `{echo}`.
    demo_code: |-
        {ask} –ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç?
        {echo} –∑–Ω–∞—á–∏ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç –µ
-   name: '{print} –µ–º–æ—Ç–∏–∫–æ–Ω–∏'
    explanation: –û—Ç–ø–µ—á–∞—Ç–≤–∞–Ω–µ –Ω–∞ –µ–º–æ—Ç–∏–∫–æ–Ω —Å `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: –ù–∞—á–µ—Ä—Ç–∞–π—Ç–µ –ª–∏–Ω–∏—è —Å `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: –ó–∞–≤—ä—Ä—Ç–µ—Ç–µ —Ä–∏—Å—É–≤–∞—â–∞—Ç–∞ –∫–æ—Å—Ç–µ–Ω—É—Ä–∫–∞ —Å `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: –° –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `{is}` –º–æ–∂–µ—à –¥–∞ –∑–∞–ø–∏—à–µ—à –∏–º–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞. –ò–∑–±–µ—Ä–∏ —Å–∏ –µ–¥–Ω–æ –∏–º–µ, –º–æ–∂–µ –∏ —Ç–≤–æ–µ—Ç–æ.
    demo_code: |-
        –∏–º–µ {is} –ì–∞–ª—è
        {print} –¥–æ–±—Ä–µ –¥–æ—à—ä–ª –∏–º–µ.
-   name: '{ask}'
    explanation: –ó–∞–ø–∏—Ç–∞–π —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `{ask}`. –í–∞–∂–Ω–æ –µ –¥–∞ –∑–∞–ø–æ–º–Ω–∏—à, —á–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –Ω–∞–∑–æ–≤–µ—à –æ—Ç–≥–æ–≤–æ—Ä–∞ —Å–∏ —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `{is}`.
    demo_code: |-
        —Ü–≤—è—Ç {is} {ask} –ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç?
        {print} —Ü–≤—è—Ç –µ —Ç–≤–æ—è—Ç –ª—é–±–∏–º.
-   name: '{sleep}'
    explanation: '`{sleep}` –ø—Ä–∏—Å–ø–∏–≤–∞ –•–µ–¥–∏ –∑–∞ (–Ω—è–∫–æ–ª–∫–æ) —Å–µ–∫—É–Ω–¥–∞ (–∏).'
    demo_code: |-
        {print} –ù–µ–∫–∞ –ø–æ–º–∏—Å–ª—è –∑–∞ —Å–µ–∫—É–Ω–¥–∞...
        {sleep}
        {print} –•–º–º–º.. –ò–º–∞–º –Ω—É–∂–¥–∞ –æ—Ç –æ—â–µ 3 —Å–µ–∫—É–Ω–¥–∏...
        {sleep} 3
        {print} –ï–≤—Ä–∏–∫–∞! –û—Ç–∫—Ä–∏—Ö –≥–æ!
-   name: '{is} —Å –∫–æ—Å—Ç–µ–Ω—É—Ä–∫–∞'
    explanation: Give a number a name using `{is}`. You can choose the name yourself.
    demo_code: |-
        angle {is} 90
        {turn} angle
        {forward} 100
3:
-   name: –∏–∑–±–µ—Ä–∏_–ø—Ä–æ–∏–∑–≤–æ–ª–Ω–æ
    explanation: –ò–∑–±–µ—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–ª–Ω–∞ –¥—É–º–∞ –æ—Ç —Å–ø–∏—Å—ä–∫ —Å –¥—É–º–∏ –∫–∞—Ç–æ –ø–æ–ª–∑–≤–∞—à –∫–æ–º–∞–Ω–¥–∏—Ç–µ `at` –∏ `random`.
    demo_code: |-
        –∂–∏–≤–æ—Ç–Ω–∏ is –∫—É—á–µ, –∫–æ—Ç–∫–∞, –∫–µ–Ω–≥—É—Ä—É
        print –∂–∏–≤–æ—Ç–Ω–∏ at random
-   name: '{add}'
    explanation: add an item to a list
    demo_code: |-
        animals {is} cow, cat
        {add} dog {to_list} animals
-   name: '{remove}'
    explanation: remove an item from a list
    demo_code: |-
        animals {is} cat, dog, cow
        {remove} dog {from} animals
4:
-   name: print
    explanation: –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ç–æ—á–Ω–æ –¥—É–º–∏—Ç–µ –≤ –∫–∞–≤–∏—á–∫–∏
    demo_code: print '–ë–∞–±–∞ –∂–∞–±–∞ –∂–∏–≤–µ–µ –≤ –±–ª–∞—Ç–æ—Ç–æ.'
-   name: is
    explanation: –Ω–∞–∑–æ–≤–∏ —Ü—è–ª —Ç–µ–∫—Å—Ç —Å –µ–¥–Ω–æ –∏–º–µ —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `print` –±–µ–∑ –∫–∞–≤–∏—á–∫–∏—Ç–µ.
    demo_code: |-
        –∏–º–µ is –ò–≤–∞–Ω –î–∏–º–∏—Ç—Ä–æ–≤ –ö–æ–ª–∞—Ä–æ–≤
        print '–ö–∞–∑–≤–∞–º —Å–µ ' –∏–º–µ '.'
-   name: ask
    explanation: –ó–∞–ø–∏—Ç–∞–π —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `is ask`.
    demo_code: |-
        —Ü–≤—è—Ç is ask '–∫–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç?'
        print —Ü–≤—è—Ç ' –µ —Ç–≤–æ—è—Ç –ª—é–±–∏–º —Ü–≤—è—Ç!'
5:
-   name: print
    explanation: –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ç–æ—á–Ω–æ –¥—É–º–∏—Ç–µ –≤ –∫–∞–≤–∏—á–∫–∏
    demo_code: print '–¢–æ–≤–∞ –µ –∏–∑—Ä–µ—á–µ–Ω–∏–µ. –ü–æ–≤–µ—á–µ –∏–∑—Ä–µ—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—É–≤–∞—Ç —Ç–µ–∫—Å—Ç.'
-   name: ask
    explanation: –ó–∞–ø–∏—Ç–∞–π —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `ask`.
    demo_code: |-
        –≤—ä–∑—Ä–∞—Å—Ç is ask '–ù–∞ –∫–æ–ª–∫–æ —Å–∏ –≥–æ–¥–∏–Ω–∏?'
        print '–¢–∏ —Å–∏ –Ω–∞ ' –≤—ä–∑—Ä–∞—Å—Ç ' –≥–æ–¥–∏–Ω–∏!'
-   name: if
    explanation: –ù–∞–ø—Ä–∞–≤–∏ –∏–∑–±–æ—Ä —Å –∫–æ–º–∞–Ω–¥–∏—Ç–µ `if` –∏ `else`.
    demo_code: |-
        —Ü–≤—è—Ç is ask '–∫–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ü–≤—è—Ç?'
        if —Ü–≤—è—Ç is –±—è–ª print '–ö—Ä–∞—Å–∏–≤ –µ!' else print '—Å—Ç–∞–≤–∞'
-   name: if with turtle
    explanation: –ù–∞–ø—Ä–∞–≤–∏ –∏–∑–±–æ—Ä —Å `if`
    demo_code: |-
        –æ—Ç–≥–æ–≤–æ—Ä is ask '–ö–æ–ª–∫–æ –º–µ—Ç—Ä–∞ –¥–∞ –≤—ä—Ä–≤—è –Ω–∞–ø—Ä–µ–¥?'
        if –æ—Ç–≥–æ–≤–æ—Ä is –¥–∞–ª–µ—á–µ forward 100 else forward 5
-   name: '{in}'
    explanation: Check elements with `{in}`
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What {is} your favorite color?'
        {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'
-   name: '{pressed}'
    explanation: –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω –∫–ª–∞–≤–∏—à –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞ –µ `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} "–¢–∏ –Ω–∞—Ç–∏—Å–Ω–∞ A!" {else} {print} "–¢–∏ –Ω–∞—Ç–∏—Å–Ω–∞ –¥—Ä—É–≥ –∫–ª–∞–≤–∏—à!"'
6:
-   name: print
    explanation: –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ç–æ—á–Ω–æ –¥—É–º–∏—Ç–µ –≤ –∫–∞–≤–∏—á–∫–∏
    demo_code: print '5 –ø—ä—Ç–∏ –ø–æ 5 –µ —Ä–∞–≤–Ω–æ –Ω–∞ ' 5 * 5
-   name: ask
    explanation: –ü—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–π –∑–∞–¥–∞—á–∞ —Å –∫–∞–ª–∫—É–ª–∞—Ü–∏—è –∏ –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä.
    demo_code: |-
        —Ä–µ—à–µ–Ω–∏–µ = ask '–ö–æ–ª–∫–æ –ø—Ä–∞–≤–∏ 10 + 10?'
        if —Ä–µ—à–µ–Ω–∏–µ is 20 print '–î–∞!' else print '–ù–µ–≤—è—Ä–Ω–æ'
-   name: '`{ask}` –∏ `{if}` —Å –∫–æ—Å—Ç–µ–Ω—É—Ä–∫–∞'
    explanation: –ó–∞–ø–∏—Ç–∞–π –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –±—Ä–æ–π —ä–≥–ª–∏
    demo_code: |-
        —ä–≥–ª–∏ = ask '–ö–æ–ª–∫–æ —ä–≥–ª–∏?'
        angle = 360 / —ä–≥–ª–∏
        forward 50
7:
-   name: print
    explanation: –ü—Ä–∏–Ω—Ç–∏—Ä–∞–π —Ç–æ—á–Ω–æ –¥—É–º–∏—Ç–µ –≤ –∫–∞–≤–∏—á–∫–∏
    demo_code: print 'Hello welcome to Hedy.'
-   name: ask
    explanation: –ó–∞–ø–∏—Ç–∞–π —Å `ask` –∑–∞ –ª—é–±–∏–º–∏—è —Å–ø–æ—Ä—Ç.
    demo_code: |-
        —Å–ø–æ—Ä—Ç = ask '–ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Å–ø–æ—Ä—Ç?'
        print '–ó–Ω–∞—á–∏ –æ–±–∏—á–∞—à ' —Å–ø–æ—Ä—Ç '.'
-   name: if
    explanation: –ó–∞–ø–∏—Ç–∞–π –ø–∞–∫ –∑–∞ –ª—é–±–∏–º–∏—è —Å–ø–æ—Ä—Ç –∏ –∏–∑–ø–æ–ª–∑–≤–∞–π `if`, –∑–∞ –¥–∞ –¥–∞–¥–µ—à —Å–ø–µ—Ü–∏–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç –∞–∫–æ –≤—ä–≤–µ–¥–µ–Ω–∞—Ç–∞ –¥—É–º–∞ –µ —Ñ—É—Ç–±–æ–ª.
    demo_code: |-
        —Å–ø–æ—Ä—Ç = ask '–ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Å–ø–æ—Ä—Ç?'
        if —Å–ø–æ—Ä—Ç is —Ñ—É—Ç–±–æ–ª repeat 3 times print '–§—É—Ç–±–æ–ª, —Ñ—É—Ç–±–æ–ª –∏ –ø–∞–∫ —Ñ—É—Ç–±–æ–ª!'
        else print '–ó–Ω–∞—á–∏ –æ–±–∏—á–∞—à ' —Å–ø–æ—Ä—Ç '.'
-   name: repeat - turtle
    explanation: –ü—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–π —Ü–∏–∫—ä–ª —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `repeat`.
    demo_code: repeat 3 times forward 20
8:
-   name: '{print}'
    explanation: print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        else
            {print} 'Oops!'
            {print} 'The answer is 10'
-   name: '`{repeat}` with turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω –∫–ª–∞–≤–∏—à –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞ –µ `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} "–¢–∏ –Ω–∞—Ç–∏—Å–Ω–∞ A!"
        {else}
            {print} "–¢–∏ –Ω–∞—Ç–∏—Å–Ω–∞ –¥—Ä—É–≥ –∫–ª–∞–≤–∏—à!"
9:
-   name: '`{if}` with multiple lines'
    explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
    demo_code: |-
        answer = {ask} 'What is 20 plus 20?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        else
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: '`{repeat}` and turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{for} with a list'
    explanation: print all things in a list
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: '{for} loop'
    explanation: We can use `{for}` with a {range}
    demo_code: |-
        {for} counter {in} {range} 1 {to} 5
            {print} counter
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        else
            {print} 'Oops!'
            {print} 'The answer is 10'
12:
-   name: float directly
    explanation: Decimal numbers
    demo_code: |-
        {print} '–°–º—è—Ç–∞–π!'
        {print} '–î–≤–µ –∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–ª—é—Å –¥–≤–µ –∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –µ...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: Text with quotation marks after =
    demo_code: |-
        –∏–º–µ = "–†–æ–±–æ—Ç—ä—Ç –•–µ–¥–∏"
        {print} "–ó–¥—Ä–∞–≤–µ–π, " –∏–º–µ
-   name: –∫–∞–≤–∏—á–∫–∏ —Å–ª–µ–¥ `{if}` —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    explanation: Text with quotation marks after {if}
    demo_code: |-
        –∏–º–µ = {ask} '–ö–æ–π —Å–∏ —Ç–∏?'
        {if} –∏–º–µ = '–•–µ–¥–∏'
            {print} '–ó–¥—Ä–∞–≤–µ–π—Ç–µ!'
-   name: quotes in list
    explanation: A list with quotation marks
    demo_code: |-
        —Å—É–ø–µ—Ä–≥–µ—Ä–æ–∏ = '–ñ–µ–ª–µ–∑–Ω–∏—è—Ç —á–æ–≤–µ–∫', '–ë–∞—Ç–º–∞–Ω', '–°—É–ø–µ—Ä–º–µ–Ω'
        {print} —Å—É–ø–µ—Ä–≥–µ—Ä–æ–∏ {at} {random}
13:
-   name: '{and}'
    explanation: Two parts both need to be correct
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        else
            {print} 'At least one answer is wrong!'
-   name: '{or}'
    explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {or} answer2 {is} 4
            {print} 'At least one answer is correct!'
        else
            {print} 'Both answers are wrong!'
14:
-   name: Smaller
    explanation: We use the `<` to check if the first number is smaller than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age < 13
            {print} 'You are younger than me!'
-   name: Bigger
    explanation: We use the `>` to check if the first number is bigger than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age > 13
            {print} 'You are older than me!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: Not equal
    explanation: We use the `!=` to check if two things are not the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller {or} equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: '{while}'
    explanation: We can use the `{while}` loop with not equal
    demo_code: |-
        answer = 0
        {while} answer != 25
            answer = {ask} 'What is 5 times 5?'
        {print} 'A correct answer has been given'
-   name: Smaller {while}
    explanation: We can also use the `{while}` loop with `<` and `>`.
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: square brackets
    explanation: Lists with square brackets
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: Get an item from a list
    explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: Get a random item from a list
    explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[random]
        {print} random_fruit
17:
-   name: '{elif}'
    explanation: '`{elif}`.'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a is 1'
        {elif} a == 2:
            {print} 'a is 2'
        {else}:
            {print} 'a is not 1 or 2'
-   name: '{print}'
    explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ready or not, here I come!'
-   name: '{if}'
    explanation: We need to do the same with all of our `{if}` statements
    demo_code: |-
        colour = {ask} 'What is your favorite color?'
        {if} colour == 'green':
            {print} 'Your favorite colour is green'
        {else}:
            {print} 'Your favorite colour is not green'
18:
-   name: '{print}'
    explanation: With `{print}` you need to use parentheses
    demo_code: '{print}(''hi!'')'
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
