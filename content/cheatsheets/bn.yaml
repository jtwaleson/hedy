1:
-   name: print
    explanation: ржХрж┐ржЫрзБ `print` ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `print` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    demo_code: print рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд!
-   name: ask
    explanation: ржХрж┐ржЫрзБ `ask` ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    demo_code: ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐ ?
-   name: echo
    explanation: ржХрж┐ржЫрзБ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `echo` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    demo_code: |-
        ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐ ?
        echo рждрзЛ ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ рж╣ржЪрзНржЫрзЗ "
-   name: '{print} emojis'
    explanation: print an emoji with `{print}`
    demo_code: '{print} ЁЯЩЛ ЁЯМН тЭЧ'
-   name: '{forward}'
    explanation: Draw a line with `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: turn the drawing turtle with `{turn}`
    demo_code: |-
        {forward} 25
        {turn} left
        {forward} 25
        {turn} right
2:
-   name: is
    explanation: ржкрзНрж░рзЛржЧрзНрж░рж╛ржорзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпрзЗ ржпрзЗ ржХрзЛржи рж╢ржмрзНржжржХрзЗ ржирж╛ржо ржжрж╛ржУ `is` ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ
    demo_code: "ржирж╛ржо is  рж╣рзЗржбрж┐ \nprint рж╕рзНржмрж╛ржЧржд рж╣рзЗржбрж┐"
-   name: is
    explanation: ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`. рж╕рж╛ржмржзрж╛ржи! ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╣ржмрзЗ ржирж╛ржорзЗрж░ рж╕рж╛ржерзЗ `is` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ.
    demo_code: |-
        рж░ржВ is ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?
        print рж░ржВ is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!
-   name: '{sleep}'
    explanation: Let Hedy pause for a (couple of) second(s).
    demo_code: |-
        {print} Let me think for one second...
        {sleep}
        {print} Hmm.. I need 3 more seconds...
        {sleep} 3
        {print} Eureka! Ive got it!
-   name: is - turtle
    explanation: Give a number a name using `{is}`. You can choose the name yourself.
    demo_code: |-
        angle {is} 90
        {turn} angle
        {forward} 100
3:
-   name: рж▓ржХрзНрж╖рзНржпрж╣рзАржи ржнрж╛ржмрзЗ ржкржЫржирзНржж ржХрж░
    explanation: Choose a random word from a group with `at` and `random`
    demo_code: |-
        ржкрзНрж░рж╛ржгрзА is рж╣рж▓, ржХрзБржХрзБрж░, ржмрж┐ржбрж╝рж╛рж▓, ржХрзНржпрж╛ржЩрзНржЧрж╛рж░рзБ
        print ржкрзНрж░рж╛ржгрзА at random
-   name: '{add}'
    explanation: add an item to a list
    demo_code: |-
        animals {is} cow, cat
        {add} dog {to_list} animals
-   name: '{remove}'
    explanation: remove an item from a list
    demo_code: |-
        animals {is} cat, dog, cow
        {remove} dog {from} animals
4:
-   name: print
    explanation: рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ
    demo_code: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'
-   name: is
    explanation: ржХрж┐ржЫрзБ ржкрж╛ржаржХрзЗ ржирж╛ржо ржжрж┐ржи ржПржмржВ ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржЫрж╛ржбрж╝рж╛ print ржХрж░рзБржи
    demo_code: "ржирж╛ржо is  рж╣рзЗржбрж┐ \nprint 'ржЖржорж╛рж░ ржирж╛ржо is ' ржирж╛ржо"
-   name: ask
    explanation: ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    demo_code: |-
        рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        print рж░ржВ 'is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
5:
-   name: print
    explanation: рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ
    demo_code: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'
-   name: ask
    explanation: ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ ` `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`.
    demo_code: |-
        рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        print рж░ржВ ' is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
-   name: if
    explanation: '`if`ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкржЫржирзНржж ржХрж░рзБржи'
    demo_code: |-
        рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        if рж░ржВ is рж╣ржпрж╝ print 'рж╕рзБржирзНржжрж░!' else print 'ржоржирзНржж'
-   name: '{if} with turtle'
    explanation: Make a choice with `{if}`
    demo_code: |-
        answer {is} {ask} 'How far should I walk?'
        {if} answer {is} far {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Check elements with `{in}`
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What {is} your favorite color?'
        {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: print
    explanation: рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ
    demo_code: print  '5 ржмрж╛рж░ 5 is ' 5 * 5
-   name: ask` ржПржмржВ `if` ржЧржгржирж╛ рж╕рж╣
    explanation: ржПржХржЯрж┐ ржЧржгржирж╛ ask ржХрж░рзБржи ржПржмржВ рждрзНрж░ржЯрж┐ рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи.
    demo_code: |-
        ржЙрждрзНрждрж░ = ask 'ржХрж░рзБржи 10 ржкрзНрж▓рж╛рж╕ 10 ржХрж┐?'
        if ржЙрждрзНрждрж░ is 20 print 'рж╕ржарж┐ржХ!' else print 'ржнрзБрж▓'
-   name: '`ask` and `if` turtle'
    explanation: Ask the user how many angles they want
    demo_code: |-
        angles = ask 'How many angles?'
        angle = 360 / angles
        forward 50
7:
-   name: print
    explanation: рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ
    demo_code: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'
-   name: ask
    explanation: ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ  `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`.
    demo_code: |-
        рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        print рж░ржВ 'is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
-   name: if
    explanation: '`if`ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкржЫржирзНржж ржХрж░рзБржи'
    demo_code: |-
        рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        if рж░ржВ is рж╣ржп print 'рж╕рзБржирзНржжрж░!' else print 'ржоржирзНржж'
-   name: repeat
    explanation: '`repeat` ржПржмржВ `if` рж╕ржорзНржорж┐рж▓рж┐ржд'
    demo_code: |-
        рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
        if рж░ржВ is рж╣ржпрж╝ repeat 3 times print 'рж╕рзБржирзНржжрж░' else repeat 5 times print 'ржоржирзНржж'
8:
-   name: print
    explanation: ржХрж┐ржЫрзБ ржПржХржЯрж╛  print ржХрж░рзЛ . ржоржирзЗ рж░рж╛ржЦржмрзЗржи ржЖрж╣рзНржорж░рж┐ржХ ржорзБржжрзНрж░ржирзЗрж░ ржЬржирзНржп ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ
    demo_code: print '5 ржмрж╛рж░ 5 is ' 5 * 5
-   name: '`if` ржПржХрж╛ржзрж┐ржХ рж▓рж╛ржЗржи рж╕рж╣'
    explanation: ржПржХржЯрж┐ ржЕржЩрзНржХрзЗрж░ ржЙрждрзНрждрж░ ask ржХрж░рзБржг ржПржмржВ ржПржЯрж┐ рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи ржЖржорж░рж╛ ржПржЦржи 2  рж▓рж╛ржЗржи print ржХрж░рждрзЗ ржкрж╛рж░рж┐.
    demo_code: |-
        ржЙрждрзНрждрж░ = ask 'ржХрж░рж╛ рж╣ржпрж╝ 5 ржкрзНрж▓рж╛рж╕ 5 ржХрж┐?'
        if ржЙрждрзНрждрж░ is 10
            print 'рж╕рж╛ржмрж╛рж╢ !'
            print 'ржЖрж╕рж▓рзЗржЗ ржЙрждрзНрждрж░ржЯрж┐'
        else
            print 'ржЙржл!'
            print 'рж╕ржарж┐ржХ ржЙрждрзНрждрж░ 10'
-   name: '`{repeat}` with turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '`{if}` with multiple lines'
    explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
    demo_code: |-
        answer = {ask} 'What is 20 plus 20?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        else
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: '`{repeat}` and turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{for} with a list'
    explanation: print all things in a list
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: '{for} loop'
    explanation: We can use `{for}` with a {range}
    demo_code: |-
        {for} counter {in} {range} 1 {to} 5
            {print} counter
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        else
            {print} 'Oops!'
            {print} 'The answer is 10'
12:
-   name: float directly
    explanation: Decimal numbers
    demo_code: |-
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: Text with quotation marks after =
    demo_code: |-
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: quotes after {if} comparison
    explanation: Text with quotation marks after {if}
    demo_code: |-
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: quotes in list
    explanation: A list with quotation marks
    demo_code: |-
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: '{and}'
    explanation: Two parts both need to be correct
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        else
            {print} 'At least one answer is wrong!'
-   name: '{or}'
    explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {or} answer2 {is} 4
            {print} 'At least one answer is correct!'
        else
            {print} 'Both answers are wrong!'
14:
-   name: Smaller
    explanation: We use the `<` to check if the first number is smaller than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age < 13
            {print} 'You are younger than me!'
-   name: Bigger
    explanation: We use the `>` to check if the first number is bigger than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age > 13
            {print} 'You are older than me!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: Not equal
    explanation: We use the `!=` to check if two things are not the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller {or} equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: '{while}'
    explanation: We can use the `{while}` loop with not equal
    demo_code: |-
        answer = 0
        {while} answer != 25
            answer = {ask} 'What is 5 times 5?'
        {print} 'A correct answer has been given'
-   name: Smaller {while}
    explanation: We can also use the `{while}` loop with `<` and `>`.
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: square brackets
    explanation: Lists with square brackets
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: Get an item from a list
    explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: Get a random item from a list
    explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[random]
        {print} random_fruit
17:
-   name: '{elif}'
    explanation: '`{elif}`.'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a is 1'
        {elif} a == 2:
            {print} 'a is 2'
        {else}:
            {print} 'a is not 1 or 2'
-   name: '{print}'
    explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ready or not, here I come!'
-   name: '{if}'
    explanation: We need to do the same with all of our `{if}` statements
    demo_code: |-
        colour = {ask} 'What is your favorite color?'
        {if} colour == 'green':
            {print} 'Your favorite colour is green'
        {else}:
            {print} 'Your favorite colour is not green'
18:
-   name: '{print}'
    explanation: With `{print}` you need to use parentheses
    demo_code: '{print}(''hi!'')'
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
