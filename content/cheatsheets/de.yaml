1:
-   name: '{print}'
    explanation: Gib etwas mit `{print}` aus.
    demo_code: '{print} Hallo willkommen bei Hedy!'
-   name: '{ask}'
    explanation: Frage etwas mit `{ask}`.
    demo_code: '{ask} Was ist deine Lieblingsfarbe?'
-   name: '{echo}'
    explanation: Wiederhole etwas mit `{echo}`.
    demo_code: "{ask} Was ist deine Lieblingsfarbe? \n{echo} Also deine Lieblingsfarbe ist"
-   name: '{print} emojis'
    explanation: Gebe ein emoji mit `{print}`aus.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Zeichne eine Linie mit `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Drehe die Schildkr√∂te mit `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Gib einem Wort einen Namen mit `{is}`, den du in deinem Programm wiederverwenden kannst. Du kannst Namen selber w√§hlen.
    demo_code: "name {is} Hedy \n{print} Willkommen name"
-   name: '{ask}'
    explanation: Frage etwas mit `{ask}`. Aber pass auf! Du musst der Antwort einen Namen mit `{is}` geben.
    demo_code: "Farbe {is} {ask} Was ist deine Lieblingsfarbe? \n{print} Du magst am liebsten Farbe !"
-   name: '{sleep}'
    explanation: '`{sleep}` l√§sst Hedy f√ºr ein paar Sekunden pausieren.'
    demo_code: |-
        {print} Lass mich einen Moment nachdenken...
        {sleep}
        {print} Hmm.. Ich brauche noch 3 Sekunden mehr...
        {sleep} 3
        {print} Eureka! Jetzt hab ich's!
-   name: '{is} - Schildkr√∂te'
    explanation: Vergib einen Namen an eine Zahl mit `{is}`. Du kannst den Namen selbst w√§hlen.
    demo_code: |-
        winkel {is} 90
        {turn} winkel
        {forward} 100
3:
-   name: W√§hle Zuf√§llig
    explanation: W√§hle mit `{at}` und `{random}` zuf√§llig ein Wort aus einer Gruppe aus.
    demo_code: "tiere {is} Hund, Katze, K√§nguru \n{print} tiere {at} {random}"
-   name: '{add}'
    explanation: '`{add}` f√ºgt ein Ding zu einer `{to_list}`-Liste hinzu.'
    demo_code: "tiere {is} Kuh, Katze \n{add} Hund {to_list} tiere"
-   name: '{remove}'
    explanation: '`{remove}` ein Element `{from}` einer Liste.'
    demo_code: |-
        tiere {is} Katze, Hund, Kuh
        {remove} Hund {from} tiere
4:
-   name: '{print}'
    explanation: Wortw√∂rtliche Ausgabe durch Anf√ºhrungszeichen.
    demo_code: '{print} ''Hallo. Willkommen bei Hedy.'''
-   name: '{is}'
    explanation: Gib einem Text einen Namen und `{print}` ihn ohne Anf√ºhrungszeichen.
    demo_code: |-
        name {is} Hedy
        {print} 'mein Name ist ' name
-   name: '{ask}'
    explanation: Frage etwas mit `{ask}`.
    demo_code: |-
        farbe {is} {ask} 'Was ist deine Lieblingsfarbe?'
        {print} farbe ' ist dein Favorit!'
5:
-   name: '{print}'
    explanation: Benutze Anf√ºhrungszeichen, um einen Text genau so auszugeben.
    demo_code: '{print} ''Hallo. Willkommen bei Hedy.'''
-   name: '{ask}'
    explanation: Frage etwas mit `{ask}`.
    demo_code: |-
        farbe {is} {ask} 'Was ist deine Lieblingsfarbe?'
        {print} farbe ' hast du am liebsten!'
-   name: '{if}'
    explanation: Treffe eine Auswahl mit `{if}`.
    demo_code: |-
        farbe {is} {ask} 'Was ist deine Lieblingsfarbe?'
        {if} farbe {is} gr√ºn {print} 'h√ºbsch!' {else} {print} 'b√§h'
-   name: '{if} mit Schildkr√∂te'
    explanation: Triff eine Auswahl mit `{if}`.
    demo_code: |-
        Antwort {is} {ask} 'Wie weit soll ich gehen?'
        {if} Antwort {is} weit {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Pr√ºfe, ob ein Ding in einer Liste enthalten ist mit `{in}`.
    demo_code: |-
        sch√∂ne_farben {is} Gr√ºn, Gelb
        farbe {is} {ask} 'Was {is} deine Lieblingsfarbe?'
        {if} farbe {in} sch√∂ne_farben {print} 'h√ºbsch!' {else} {print} 'b√§h'
-   name: '{pressed}'
    explanation: Pr√ºfe, ob eine gegebene Taste auf der Tastatur `{pressed}` ist.
    demo_code: '{if} a {is} {pressed} {print} ''Du hast A gedr√ºckt!'' {else} {print} ''Du hast eine andere Taste gedr√ºckt!'''
6:
-   name: '{print}'
    explanation: Benutze Anf√ºhrungszeichen, um einen Text genau so auszugeben.
    demo_code: '{print} ''5 mal 5 ist '' 5 * 5'
-   name: '{ask}'
    explanation: Frage nach einer Rechenaufgabe und pr√ºfe, ob sie richtig ist.
    demo_code: |-
        antwort = {ask} 'Was ist 10 plus 10?'
        {if} antwort {is} 20 {print} 'Ja!' {else} {print} 'Huch'
-   name: '`{ask}` und `{if}` mit Schildkr√∂te'
    explanation: Frage Nutzer wie viele Winkel sie m√∂chten.
    demo_code: |-
        anzahl_winkel = {ask} 'Wie viele Winkel?'
        winkel = 360 / anzahl_winkel
        {forward} 50
7:
-   name: '{print}'
    explanation: Benutze Anf√ºhrungszeichen, um einen Text genau so auszugeben.
    demo_code: '{print} ''Hallo. Willkommen bei Hedy.'''
-   name: '{ask}'
    explanation: Frage etwas mit `{ask}`.
    demo_code: |-
        farbe = {ask} 'Was ist deine Lieblingsfarbe?'
        {print} farbe ' ist dein Favorit!'
-   name: '{if}'
    explanation: Treffe eine Auswahl mit `{if}`.
    demo_code: |-
        farbe = {ask} 'Was ist deine Lieblingsfarbe?'
        {if} farbe {is} gr√ºn {print} 'h√ºbsch!' {else} {print} 'b√§h'
-   name: '{repeat} mit Schildkr√∂te'
    explanation: Wiederhole eine Zeile Code mit `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Gib etwas aus. Denke an Anf√ºhrungszeichen f√ºr eine wortw√∂rtliche Ausgabe.
    demo_code: '{print} ''5 mal 5 ist '' 5 * 5'
-   name: '{ask}'
    explanation: Frage nach einer Summe und pr√ºfe, ob die Antwort richtig ist. Wir k√∂nnen jetzt zwei Zeilen ausgeben.
    demo_code: |-
        antwort = {ask} 'Was ist 5 plus 5?'
        {if} antwort {is} 10
            {print} 'Gut gemacht!'
            {print} 'Tats√§chlich, die Antwort war ' antwort
        {else}
            {print} 'Huch!'
            {print} 'Die Antwort ist 10'
-   name: '{repeat} mit Schildkr√∂te'
    explanation: Wiederhole mehrere Befehlszeilen.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Pr√ºfe, ob eine gegebene Taste auf der Tastatur `{pressed}` ist.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'Du hast A gedr√ºckt!'
        {else}
            {print} 'Du hast eine andere Taste gedr√ºckt!'
9:
-   name: '{if} mit mehreren Befehlszeilen'
    explanation: Frage nach einer Summe mit `{ask}` und pr√ºfe, ob die Antwort korrekt ist. Jetzt geben wir zwei Zeilen aus.
    demo_code: |-
        antwort = {ask} 'Was ist 10 plus 10?'
        {if} antwort {is} 20
            {print} 'Gut gemacht!!'
            {print} 'Tats√§chlich, die Antwort ist' antwort
        {else}
            {print} 'Falsch'
            {print} 'Die Antwort ist 20'
-   name: '{repeat} mit Schildkr√∂te'
    explanation: Wiederhole mehrere Zeilen.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Gib etwas aus. Denke an Anf√ºhrungszeichen f√ºr eine wortw√∂rtliche Ausgabe.
    demo_code: '{print} ''5 mal 5 ist '' 5 * 5'
-   name: '{for} with a list'
    explanation: Gib alle Dinge in einer Liste aus.
    demo_code: |-
        tiere {is} Hund, Katze, Blobfisch
        {for} tier {in} tiere
          {print} 'Ich liebe ' tier
11:
-   name: '{for}-Schleife'
    explanation: Wir k√∂nnen `{for}` mit `{range}` benutzen.
    demo_code: |-
        {for} Z√§hler {in} {range} 1 {to} 5
            {print} Z√§hler
-   name: '{ask}'
    explanation: Frage nach der Antwort zu einer Summe und √ºberpr√ºfe, ob sie stimmt. Wir k√∂nnen jetzt zwei Zeilen ausgeben.
    demo_code: |-
        antwort = {ask} 'Was ist 5 plus 5?'
        {if} antwort {is} 10
            {print} 'Gut gemacht!'
            {print} 'Tats√§chlich, die Antwort war ' antwort
        {else}
            {print} 'Huch!'
            {print} 'Die Antwort war 10'
12:
-   name: float direkt
    explanation: Dezimalzahlen.
    demo_code: |-
        {print} 'Berechne los!'
        {print} 'Zweieinhalb plus zweieinhalb ist...'
        {print} 2.5 + 2.5
-   name: float in var
    explanation: Text mit Anf√ºhrungszeichen nach `=`
    demo_code: |-
        Name = 'Hedy der Roboter'
        {print} 'Hallo ' Name
-   name: Anf√ºhrungszeichen nach einem `{if}` Vergleich
    explanation: Text mit Anf√ºhrungszeichen nach `{if}`.
    demo_code: |-
        Name = {ask} 'Wer bist du?'
        {if} Name = 'Hedy'
            {print} 'Hallo!'
-   name: Anf√ºhrungszeichen in Listen
    explanation: Eine Liste mit Anf√ºhrungszeichen.
    demo_code: |-
        Superhelden = 'Iron Man', 'Batman', 'Superman'
        {print} Superhelden {at} {random}
13:
-   name: '{and}'
    explanation: Beide Teile m√ºssen korrekt sein.
    demo_code: |-
        antwort1 = {ask} 'Was ergibt 3+2?'
        antwort2 = {ask} 'Was ergibt 2+2?'
        {if} antwort1 {is} 5 {and} antwort2 {is} 4
            {print} 'Beide Antworten sind richtig!'
        {else}
            {print} 'Mindestens eine Antwort ist falsch!'
-   name: '{or}'
    explanation: Mindestens einer der beiden Teile muss korrekt sein. Wenn beide korrekt sind, ist es auch in Ordnung.
    demo_code: |-
        antwort1 = {ask} 'Was ergibt 3+2?'
        antwort2 = {ask} 'Was ergibt 2+2?'
        {if} antwort1 {is} 5 {or} antwort2 {is} 4
            {print} 'Mindestens eine Antwort ist richtig!'
        {else}
            {print} 'Beide Antworten sind falsch!'
14:
-   name: Kleiner
    explanation: Wir verwenden das `<`, um zu pr√ºfen, ob die erste Zahl kleiner als die zweite Zahl ist.
    demo_code: |-
        alter = {ask} 'Wie alt bist du?'
        {if} alter < 13
            {print} 'Du bist j√ºnger als ich!'
-   name: Gr√∂√üer
    explanation: Wir verwenden das `>`, um zu pr√ºfen, ob die erste Zahl gr√∂√üer als die zweite Zahl ist.
    demo_code: |-
        alter = {ask} 'Wie alt bist du?'
        {if} alter > 13
            {print} 'Du bist √§lter als ich!'
-   name: Gleich
    explanation: Wir verwenden `==` um zu √ºberpr√ºfen ob zwei Dinge gleich sind.
    demo_code: |-
        Antwort = {ask} 'Was ergibt 5 * 5?'
        {if} Antwort == 25
            {print} 'Das stimmt!'
-   name: Ungleich
    explanation: Wir verwenden das `!=` um zu √ºberpr√ºfen ob zwei Dinge ungleich, also nicht gleich sind.
    demo_code: |-
        Antwort = {ask} 'Was macht 5 * 5?'
        {if} Antwort != 25
            {print} 'Das stimmt nicht!'
-   name: Kleiner gleich
    explanation: Wir verwenden `<=` um zu √ºberpr√ºfen ob die erste Zahl kleiner oder gleich der zweiten Zahl ist.
    demo_code: |-
        Alter = {ask} 'Wie alt bist du?'
        {if} Alter <= 12
            {print} 'Du bist j√ºnger als ich!'
-   name: Gr√∂√üer gleich
    explanation: Wir verwenden `>=` um zu √ºberpr√ºfen ob die erste Zahl gr√∂√üer oder gleich der zweiten Zahl ist.
    demo_code: |-
        Alter = {ask} 'Wie alt bist du?'
        {if} Alter >= 14
            {print} 'Du bist √§lter als ich!'
15:
-   name: '{while}'
    explanation: Wir k√∂nnen die `{while}`-Schleife mit ungleich verwenden.
    demo_code: |-
        antwort = 0
        {while} antwort != 25
            antwort = {ask} 'Wieviel ist 5 mal 5?'
        {print} 'Eine richtige Antwort wurde eingegeben!'
-   name: '{while} mit Ungleichungen'
    explanation: Wir k√∂nnen die `{while}`-Schleife auch mit `<` und `>` verwenden.
    demo_code: |-
        z√§hler = 1
        {while} z√§hler < 3
            {print} 'Wir machen dies noch ' 3 - z√§hler ' mal'
            z√§hler = z√§hler + 1
        {print} 'Wir sind fertig'
16:
-   name: Eckige Klammern
    explanation: Listen mit eckigen Klammern.
    demo_code: |-
        obst = ['Apfel', 'Banane', 'Kirsche']
        {print} obst
-   name: Nimm ein Element aus einer Liste
    explanation: Um ein Element aus einer Liste zu erhalten, verwenden wir [zahl]. Mit obst[1] erhalten wir also das erste Obst aus der Liste!
    demo_code: |-
        obst = ['Apfel', 'Banane', 'Kirsche']
        erstesobst = obst[1]
        {print} erstesobst
-   name: Nimm ein zuf√§lliges Element aus einer Liste
    explanation: Um ein zuf√§lliges Element aus einer Liste zu erhalten, verwenden wir [random]. Mit obst[random] erhalten wir also ein zuf√§lliges Obst aus der Liste!
    demo_code: |-
        obst = ['Banane', 'Apfel', 'Kirsche']
        zuf√§lliges_obst = obst[{random}]
        {print} zuf√§lliges_obst
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a ist gleich 1'
        {elif} a == 2:
            {print} 'a ist gleich 2'
        {else}:
            {print} 'a ist nicht gleich 1 oder 2'
-   name: '{print}'
    explanation: Wenn wir ein `{for}` verwenden, m√ºssen wir ein `:` hinter die `{for}` Anweisung schreiben!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ob ihr bereit seid oder nicht, ich komme!'
-   name: '{if}'
    explanation: Wir m√ºssen dasselbe mit all unseren `{if}`-Anweisungen tun.
    demo_code: |-
        Farbe = {ask} 'Was ist deine Lieblingsfarbe?'
        {if} Farbe == 'gr√ºn':
            {print} 'Deine Lieblingsfarbe ist gr√ºn'
        {else}:
            {print} 'Deine Lieblingsfarbe ist nicht gr√ºn'
18:
-   name: '{print}'
    explanation: Nach `{print}` musst du runde Klammern verwenden.
    demo_code: '{print}(''Hi!'')'
-   name: '{range}'
    explanation: Nach `{range}` musst du runde Klammern verwenden.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Hallo, mal ', i)
-   name: '{print} mit Variable'
    explanation: Mit `{print}` musst du Klammern und Kommas benutzen, wenn du mehrere Elemente ausgeben m√∂chtest.
    demo_code: |-
        name = 'Hedy'
        {print}('Ich hei√üe ', name)
-   name: Benutze {input} um nach etwas zu fragen
    explanation: Benutze `{input}` anstatt von `{ask}` um etwas zu fragen.
    demo_code: |-
        name = {input}('Wie hei√üt du?')
        {print}('Du hei√üt also ', name)
