1:
-   name: '{print}'
    explanation: Presu ion per `{print}`.
    demo_code: '{print} Saluton bonvenon al Hedy!'
-   name: '{ask}'
    explanation: Demandu ion per `{ask}`.
    demo_code: '{ask} Kio estas via plej ≈ùatata koloro?'
-   name: '{echo}'
    explanation: Ripetu ion per `{echo}`.
    demo_code: |-
        {ask} Kio estas via plej ≈ùatata koloro?
        {echo} do via plej ≈ùatata koloro estas
-   name: '{print} piktogramojn'
    explanation: Presu piktogramon per `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Desegnu linion per `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Turnu la desegnantan testudon per `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Donu per `{is}` al vorto nomon uzeblan en la programo. Vi povas mem elekti la nomon.
    demo_code: |-
        nomo {is} Hedy
        {print} bonvenon nomo
-   name: '{ask}'
    explanation: 'Demandi pri io per `{ask}`. Averto: vi donu nomon al la respondo per `{is}`.'
    demo_code: |-
        koloro {is} {ask} Kio estas via plej ≈ùatata koloro?
        {print} koloro estas via plej ≈ùatata!
-   name: '{sleep}'
    explanation: Pa≈≠zigi Hedy dum kelkaj sekundoj.
    demo_code: |-
        {print} Lasu min pensi dum unu sekundo...
        {sleep}
        {print} Hm... mi bezonas 3 pliajn sekundojn...
        {sleep} 3
        {print} Bonege! Mi komprenas!
-   name: '`{is}` kun testudo'
    explanation: Donu al nombro nomon uzante `{is}`. Vi povas mem elekti la nomon.
    demo_code: |-
        angulo {is} 90
        {turn} angulo
        {forward} 100
3:
-   name: Elekti la≈≠ hazardo
    explanation: Elektu hazardan vorton el grupo per `{at}` kaj `{random}`.
    demo_code: |-
        bestoj {is} hundo, kato, kanguruo
        {print} bestoj {at} {random}
-   name: '{add}'
    explanation: Aldoni eron al listo.
    demo_code: |-
        bestoj {is} bovo, kato
        {add} hundo {to_list} bestoj
-   name: '{remove}'
    explanation: Forigi eron el listo.
    demo_code: |-
        bestoj {is} kato, hundo, bovo
        {remove} hundo {from} bestoj
4:
-   name: '{print}'
    explanation: Presi ekzakte per citiloj.
    demo_code: '{print} ''Saluton, bonvenon al Hedy.'''
-   name: '{is}'
    explanation: Donu nomon al teksto kaj `{print}` sen citiloj.
    demo_code: |-
        nomo {is} Hedy
        {print} 'mia nomo estas ' nomo
-   name: '{ask}'
    explanation: Demandu ion per `{ask}`.
    demo_code: |-
        koloro {is} {ask} 'Kio estas via plej ≈ùatata koloro?'
        {print} koloro ' estas via plej ≈ùatata!'
5:
-   name: '{print}'
    explanation: Presi ekzakte per citiloj.
    demo_code: '{print} ''Saluton, bonvenon al Hedy.'''
-   name: '{ask}'
    explanation: Demandu ion per `{ask}`.
    demo_code: |-
        koloro {is} {ask} 'Kio estas via plej ≈ùatata koloro?'
        {print} koloro ' estas via plej ≈ùatata!'
-   name: '{if}'
    explanation: Fari ion kondiƒâe per `{if}`.
    demo_code: |-
        koloro {is} {ask} 'Kio estas via plej ≈ùatata koloro?'
        {if} koloro {is} verda {print} 'bela!' {else} {print} 'ba!'
-   name: '{if} kun testudo'
    explanation: Fari ion kondiƒâe per `{if}`.
    demo_code: |-
        respondo {is} {ask} 'Kiel longe mi iru?'
        {if} respondo {is} malproksimen {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Kontrolu elementojn per `{in}`.
    demo_code: |-
        belaj_koloroj {is} verda, flava
        koloro {is} {ask} 'Kio {is} via plej ≈ùatata koloro?'
        {if} koloro {in} belaj_koloroj {print} 'bela!' {else} {print} 'ba!'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: '{print}'
    explanation: Presi ekzakte per citiloj.
    demo_code: '{print} ''5 multiplikite per 5 estas '' 5 * 5'
-   name: '{ask}'
    explanation: Demandi pri kalkulo kaj kontroli, ƒâu la respondo estas ƒùusta.
    demo_code: |-
        respondo = {ask} 'Kio estas 10 plus 10?'
        {if} respondo {is} 20 {print} 'Jes!' {else} {print} 'Vi malpravas'
-   name: '`{ask}` kaj `{if}` kun testudo'
    explanation: Demandu la uzanton pri kiom da anguloj ≈ùi/li volas.
    demo_code: |-
        anguloj = {ask} 'Kiom da anguloj?'
        angulo = 360 / anguloj
        {forward} 50
7:
-   name: '{print}'
    explanation: Presi ekzakte per citiloj.
    demo_code: '{print} ''Saluton, bonvenon al Hedy.'''
-   name: '{ask}'
    explanation: Demandu ion per `{ask}`.
    demo_code: |-
        koloro = {ask} 'Kio estas via plej ≈ùatata koloro?'
        {print} koloro ' estas via plej ≈ùatata!'
-   name: '{if}'
    explanation: Fari ion kondiƒâe per `{if}`.
    demo_code: |-
        koloro = {ask} 'Kio estas via plej ≈ùatata koloro?'
        {if} koloro {is} verda {print} 'bela!' {else} {print} 'ba!'
-   name: '`{repeat}` kun testudo'
    explanation: Ripetu kodan linion per `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Presi ion. Ne forgesu uzi citilojn por la≈≠vorta presado.
    demo_code: '{print} ''5 multiplikite per 5 estas '' 5 * 5'
-   name: '{ask}'
    explanation: Demandi pri sumo kaj kontroli, ƒâu la respondo estas ƒùusta. Ni povas nun presi du liniojn.
    demo_code: |-
        respondo = {ask} 'Kio estas 5 plus 5?'
        {if} respondo {is} 10
            {print} 'Bonege!'
            {print} 'Ja la prava respondo estas ' respondo
        {else}
            {print} 'Ho!'
            {print} 'La prava respondo estas 10'
-   name: '{repeat} kun testudo'
    explanation: Ripeti plurajn liniojn.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '{if} kun pluraj linioj'
    explanation: La respondo al demando pri sumo per `{ask}`; kontrolu, ƒâu ƒùi estas ƒùusta. Nun ni presu du liniojn.
    demo_code: |-
        respondo = {ask} 'Kio estas 10 plus 10?'
        {if} respondo {is} 20
            {print} 'Bonege!'
            {print} 'La ƒùusta respondo estas ja ' respondo
        {else}
            {print} 'Vi malpravas.'
            {print} 'La ƒùusta respondo estas 20'
-   name: '`{repeat}` kun testudo'
    explanation: Ripeti plurajn liniojn.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Presi ion. Ne forgesu uzi citilojn por la≈≠vorta presado.
    demo_code: '{print} ''5 multiplikite per 5 estas '' 5 * 5'
-   name: '`{for}` kun listo'
    explanation: Presi ƒâiujn erojn en listo.
    demo_code: |-
        bestoj {is} hundo, kato, fi≈ùo
        {for} besto {in} bestoj
          {print} 'Mi amas ' besto 'n'
11:
-   name: '`{for}`-iteracio'
    explanation: Oni povas uzi `{for}` kun `{range}`.
    demo_code: |-
        {for} nombro {in} {range} 1 {to} 5
            {print} nombro
-   name: '{ask}'
    explanation: Demandi pri sumo kaj kontroli, ƒâu la respondo estas ƒùusta. Ni povas nun presi du liniojn.
    demo_code: |-
        respondo = {ask} 'Kio estas 5 plus 5?'
        {if} respondo {is} 10
            {print} 'Bonege!'
            {print} 'Ja la prava respondo estas ' respondo
        {else}
            {print} 'Ho!'
            {print} 'La prava respondo estas 10'
12:
-   name: decimala nombro rekte
    explanation: Decimalaj nombroj.
    demo_code: |-
        {print} 'Ni ekkalkulu!'
        {print} 'Du kaj duono plus du kaj duono estas...'
        {print} 2.5 + 2.5
-   name: asigni tekston
    explanation: Teksto kun citiloj post `=`
    demo_code: |-
        nomo = 'Hedy la Roboto'
        {print} 'Saluton ' nomo
-   name: citiloj post komparo en `{if}`
    explanation: Teksto kun citiloj post `{if}`.
    demo_code: |-
        nomo = {ask} 'Kiu vi estas?'
        {if} nomo = 'Hedy'
            {print} 'Saluton!'
-   name: citiloj en listo
    explanation: Listo per citiloj.
    demo_code: |-
        superherooj = 'Ferviro', 'Vespertviro', 'Superviro'
        {print} superherooj {at} {random}
13:
-   name: '{and}'
    explanation: Amba≈≠ partoj devas esti ƒùustaj.
    demo_code: |-
        respondo1 = {ask} 'Kio estas 3+2?'
        respondo2 = {ask} 'Kio estas 2+2?'
        {if} respondo1 {is} 5 {and} respondo2 {is} 4
            {print} 'Amba≈≠ respondoj pravas!'
        {else}
            {print} 'Almena≈≠ unu respondo malpravas!'
-   name: '{or}'
    explanation: Almena≈≠ unu el la du partoj devas esti ƒùusta. Se amba≈≠ estas ƒùustaj, tio anka≈≠ sufiƒâas.
    demo_code: |-
        respondo1 = {ask} 'Kio estas 3+2?'
        respondo2 = {ask} 'Kio estas 2+2?'
        {if} respondo1 {is} 5 {or} respondo2 {is} 4
            {print} 'Almena≈≠ unu respondo pravas!'
        {else}
            {print} 'Amba≈≠ respondoj malpravas!'
14:
-   name: Pli malgranda
    explanation: Oni uzas la signon `<` por kontroli, ƒâu la unua nombro estas pli malgranda ol la dua nombro.
    demo_code: |-
        aƒùo = {ask} 'Kian aƒùon vi havas?'
        {if} aƒùo < 13
            {print} 'Vi estas pli juna ol mi!'
-   name: Pli granda
    explanation: Oni uzas la signon `>` por kontroli, ƒâu la unua nombro estas pli granda ol la dua nombro.
    demo_code: |-
        aƒùo = {ask} 'Kian aƒùon vi havas?'
        {if} aƒùo > 13
            {print} 'Vi estas pli aƒùa ol mi!'
-   name: Egala
    explanation: Oni uzas la signon `==` por kontroli, ƒâu la unua egalas la duan.
    demo_code: |-
        respondo = {ask} 'Kio estas 5 * 5?'
        {if} respondo == 25
            {print} 'Vi pravas!'
-   name: Ne egala
    explanation: Oni uzas la signon `!=` por kontroli, ƒâu la unua diferencas de la duan.
    demo_code: |-
        respondo = {ask} 'Kio estas 5 * 5?'
        {if} respondo != 25
            {print} 'Tio ne pravas!'
-   name: Pli malgranda a≈≠ egala
    explanation: Oni uzas la signon `<=` por kontroli, ƒâu la unua nombro estas pli malgranda ol a≈≠ egala al la dua nombro.
    demo_code: |-
        aƒùo = {ask} 'Kian aƒùon vi havas?'
        {if} aƒùo <= 12
            {print} 'Vi estas pli juna ol mi!'
-   name: Pli granda a≈≠ egala
    explanation: Oni uzas la signon `>=` por kontroli, ƒâu la unua nombro estas pli granda ol a≈≠ egala al la dua nombro.
    demo_code: |-
        aƒùo = {ask} 'Kian aƒùon vi havas?'
        {if} aƒùo >= 14
            {print} 'Vi estas pli aƒùa ol mi!'
15:
-   name: '{while}'
    explanation: Oni povas uzi `{while}`-iteracion kun `!=`.
    demo_code: |-
        respondo = 0
        {while} respondo != 25
            respondo = {ask} 'Kio estas 5 * 5?'
        {print} 'Vi respondis prave'
-   name: '`{while}` kun plimalgrandeco'
    explanation: Oni povas anka≈≠ uzi `{while}`-iteracion kune kun `<` a≈≠ `>`.
    demo_code: |-
        nombro = 1
        {while} nombro < 3
            {print} 'Ni faros tion ' 3 - nombro ' fojojn plu'
            nombro = nombro + 1
        {print} 'Ni finiƒùis'
16:
-   name: rektaj krampoj
    explanation: Listoj per rektaj krampoj.
    demo_code: |-
        fruktoj = ['pomo', 'banano', 'ƒâerizo']
        {print} fruktoj
-   name: Akiri eron el listo
    explanation: Por elekti eron el listo, oni uzas `[numero]`. Tiel, `fruktoj[1]` signifas la unuan eron el la listo `fruktoj`!
    demo_code: |-
        fruktoj = ['banano', 'pomo', 'ƒâerizo']
        unuafrukto = fruktoj[1]
        {print} unuafrukto
-   name: Hazarde elekti eron el listo
    explanation: Por hazarde elekti eron el listo, oni uzas `[{random}]`. Tiel, `fruktoj[{random}]` signifas hazarde elektitan eron el la listo `fruktoj`!
    demo_code: |-
        fruktoj = ['banano', 'pomo', 'ƒâerizo']
        hazarda_frukto = fruktoj[{random}]
        {print} hazarda_frukto
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a estas 1'
        {elif} a == 2:
            {print} 'a estas 2'
        {else}:
            {print} 'a ne estas 1 nek 2'
-   name: '{print}'
    explanation: Kiam oni uzas la ≈ùlosilvorton `{for}`, oni devas meti `:` post la `{for}`-deklaro!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Jen mi venas!'
-   name: '{if}'
    explanation: Oni faru la saman pri la ≈ùlosilvorto `{if}`.
    demo_code: |-
        koloro = {ask} 'Kio estas via plej ≈ùatata koloro?'
        {if} koloro == 'verda':
            {print} 'Via plej ≈ùatata koloro estas verda'
        {else}:
            {print} 'Via plej ≈ùatata koloro ne estas verda'
18:
-   name: '{print}'
    explanation: Post `{print}` vi devas uzu rondajn krampojn.
    demo_code: '{print}(''saluton!'')'
-   name: '{range}'
    explanation: Post `{range}` vi devas uzi rondajn krampojn.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Saluton, numero ', i)
-   name: '`{print}` kun variablo'
    explanation: Pri `{print}`, oni devas uzi rondajn krampojn kaj komojn, se oni volas presi plurajn aƒµojn.
    demo_code: |-
        nomo = 'Hedy'
        {print}('mia nomo estas ', nomo)
-   name: demandi pri io per `{input}`
    explanation: Uzi `{input}` anstata≈≠ `{ask}` por demandi pri io.
    demo_code: |-
        nomo = {input}('Kio estas via nomo?')
        {print}('Do via nomo estas ', nomo)
