1:
-   name: '{print}'
    explanation: Kirjuta midagi ekraanile kasutades `{print}` k√§sku.
    demo_code: '{print} Tere tulemast Hedy juurde!'
-   name: '{ask}'
    explanation: K√ºsi midagi kasutades `{ask}` k√§sku.
    demo_code: '{ask} Mis on sinu lemmikv√§rv?'
-   name: '{echo}'
    explanation: Korda midagi kasutades `{echo}` k√§sku.
    demo_code: |-
        {ask} Mis on su lemmikv√§rv?
        {echo} nii et su lemmikv√§rv on
-   name: '{print} emotikonid'
    explanation: Prindi emotikon `{print}` k√§suga.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: T√µmba joon kasutades `{forward}` k√§sku.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: P√∂√∂ra joonistuskilpkonna `{turn}` abil.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Anna √ºhele s√µnale nimi kasutades `{is}` k√§sku. Sa v√µid nime ise valida.
    demo_code: |-
        nimi {is} Hedy
        {print} tere nimi
-   name: '{ask}'
    explanation: K√ºsi midagi kasutades `{ask}` k√§sku. Pea meeles! Sa pead vastuse andma kasutades `{is}` k√§sku.
    demo_code: |-
        v√§rv {is} {ask} Mis on su lemmikv√§rv?
        {print} v√§rv on su lemmik!
-   name: '{sleep}'
    explanation: '`{sleep}` Lase Hedy''l m√µni sekund oodata.'
    demo_code: |-
        {print} Lase mul √ºks sekund m√µelda...
        {sleep}
        {print} Hmm.. Mul l√§heb veel 3 sekundit aega...
        {sleep} 3
        {print} Eureka! Sain hakkama!
-   name: '{is} kilpkonnaga'
    explanation: Anna arvule nimi v√µtmes√µnaga `{is}`. Nime v√µid ise valida.
    demo_code: |-
        nurk {is} 90
        {turn} nurk
        {forward} 100
3:
-   name: Vali juhuslikult
    explanation: Vali juhuslik s√µna r√ºhmast `{at}` ja `{random}` k√§ske kasutades.
    demo_code: |-
        loomad {is} koer, kass, k√§nguru
        {print} loomad {at} {random}
-   name: '{add}'
    explanation: '`{add}` midagi `{to_list}`.'
    demo_code: |-
        loomad {is} lehm, kass
        {add} koer {to_list} loomad
-   name: '{remove}'
    explanation: '`{remove}` `{from}`.'
    demo_code: |-
        loomad {is} kass, koer, lehm
        {remove} koer {from} loomad
4:
-   name: '{print}'
    explanation: T√§pselt printimiseks kasuta jutum√§rke.
    demo_code: '{print} ''Teretulemast Hedy juurde.'''
-   name: '{is}'
    explanation: Anna tekstile nimi ja `{print}` ilma jutum√§rkideta.
    demo_code: |-
        nimi {is} Hedy
        {print} 'minu nimi on ' nimi
-   name: '{ask}'
    explanation: K√ºsi midagi kasutades `{ask}` k√§sku.
    demo_code: |-
        v√§rv {is} {ask} 'Mis on su lemmikv√§rv?'
        {print} v√§rv ' on su lemmik!'
5:
-   name: '{print}'
    explanation: Prindi t√§pselt, kasutades jutum√§rke.
    demo_code: '{print} ''Teretulemast Hedy juurde.'''
-   name: '{ask}'
    explanation: K√ºsi midagi kasutades `{ask}` k√§sku.
    demo_code: |-
        v√§rv {is} {ask} 'Mis on su lemmikv√§rv?'
        {print} v√§rv ' on su lemmik!'
-   name: '{if}'
    explanation: Vali midagi kasutades `{if}` k√§sku.
    demo_code: |-
        v√§rv {is} {ask} 'Mis on su lemmikv√§rv?'
        {if} v√§rv {is} roheline {print} 'ilus!' {else} {print} 'mhh'
-   name: '{if} kilpkonnaga'
    explanation: Tee valik kasutades `{if}` k√§sku.
    demo_code: |-
        vastus {is} {ask} 'Kui kaugele peaksin jalutama?'
        {if} vastus {is} kaugele {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Kontrolli elemente, kasutades v√µtmes√µna `{in}`.
    demo_code: |-
        ilusad_v√§rvid {is} roheline, kollane
        v√§rv {is} {ask} 'Mis on su lemmikv√§rv?'
        {if} v√§rv {in} ilusad_v√§rvid {print} 'ilus!' {else} {print} 'p√§hh'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: '{print}'
    explanation: Prindi t√§pselt, kasutades jutum√§rke.
    demo_code: '{print} ''5 korda 5 on '' 5 * 5'
-   name: '{ask}'
    explanation: K√ºsi tehte vastus ja kontrolli, kas see on √µige.
    demo_code: |-
        vastus = {ask} 'Kui palju on 10 pluss 10?'
        {if} vastus {is} 20 {print} '√ïige!' {else} {print} 'Oih'
-   name: '{ask} ja {if} kilpkonnaga'
    explanation: K√ºsi kasutajalt mitut nurka ta tahab.
    demo_code: |-
        nurki = {ask} 'Mitu nurka?'
        nurk = 360 / nurki
        {forward} 50
7:
-   name: '{print}'
    explanation: prindi t√§pselt, kasutades jutum√§rke.
    demo_code: '{print} ''Teretulemast Hedy juurde.'''
-   name: '{ask}'
    explanation: K√ºsi midagi kasutades `{ask}` k√§sku.
    demo_code: |-
        v√§rv = {ask} 'Mis on su lemmikv√§rv?'
        {print} v√§rv ' on su lemmik!'
-   name: '{if}'
    explanation: Make a choice with `{if}`.
    demo_code: |-
        v√§rv = {ask} 'Mis on su lemmikv√§rv?'
        {if} v√§rv {is} roheline {print} 'ilus!' {else} {print} 'p√§hh'
-   name: '{repeat} kilpkonnaga'
    explanation: Korda koodirida kasutades s√µna `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Prindi midagi. Pea meeles, et s√µna-s√µnalt t√§pseks printimiseks on vaja jutum√§rke.
    demo_code: '{print} ''5 korda 5 on '' 5 * 5'
-   name: '{ask}'
    explanation: Palu sisestada tehte vastus ja kontrolli, kas sisestatud vastus on √µige. N√º√ºd on v√µimalik printida 2 rida.
    demo_code: |-
        vastus = {ask} 'Mis on 5 pluss 5?'
        {if} vastus {is} 10
            {print} 'Tubli!'
            {print} 'Vastus on t√µepoolest ' vastus
        {else}
            {print} 'Oi!'
            {print} '√ïige vastus on 10'
-   name: '{repeat} kilpkonnaga'
    explanation: Korda mitut rida.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '{if} mitme reaga'
    explanation: The answer of a sum of questions with `{ask}` and see if it is correct. Now we print out two lines.
    demo_code: |-
        vastus = {ask} 'Mis on 20 pluss 20?'
        {if} vastus {is} 20
            {print} 'Tubli!!'
            {print} 'Vastus on t√µepoolest' vastus
        {else}
            {print} 'Vale'
            {print} '√ïige vastus on 20'
-   name: '{repeat} kilpkonnaga'
    explanation: Korda mitut rida.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Prindi midagi. Pea meeles, et s√µna-s√µnalt t√§pseks printimiseks on vaja jutum√§rke.
    demo_code: '{print} ''5 korda 5 on '' 5 * 5'
-   name: '{for} koos nimistuga'
    explanation: Prindi k√µik nimistus sisalduv.
    demo_code: |-
        loomad {is} koer, kass, kala
        {for} loom {in} loomad
          {print} 'Mulle meeldib ' loom
11:
-   name: '{for} ts√ºkkel'
    explanation: '`{for}` saab kasutada koos `{range}`-ga.'
    demo_code: |-
        {for} loendur {in} {range} 1 {to} 5
            {print} loendur
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        else
            {print} 'Oops!'
            {print} 'The answer is 10'
12:
-   name: float directly
    explanation: K√ºmnendarvud.
    demo_code: |-
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: '`=`-le j√§rgnev jutum√§rkidega tekst'
    demo_code: |-
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: quotes after {if} comparison
    explanation: '`{if}`-le j√§rgnev jutum√§rkidega tekst .'
    demo_code: |-
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: quotes in list
    explanation: Jutum√§rkidega nimistu.
    demo_code: |-
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: '{and}'
    explanation: Two parts both need to be correct
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        else
            {print} 'At least one answer is wrong!'
-   name: '{or}'
    explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {or} answer2 {is} 4
            {print} 'At least one answer is correct!'
        else
            {print} 'Both answers are wrong!'
14:
-   name: Smaller
    explanation: We use the `<` to check if the first number is smaller than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age < 13
            {print} 'You are younger than me!'
-   name: Bigger
    explanation: We use the `>` to check if the first number is bigger than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age > 13
            {print} 'You are older than me!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: Not equal
    explanation: Kontrollimaks, et kaks asja on erinevad, kasuta `!=`.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller {or} equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: '{while}'
    explanation: We can use the `{while}` loop with not equal
    demo_code: |-
        answer = 0
        {while} answer != 25
            answer = {ask} 'What is 5 times 5?'
        {print} 'A correct answer has been given'
-   name: Smaller {while}
    explanation: '`{while}` ts√ºklit saab kasutada ka v√µrdlustehetega `<` ja `>`.'
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: square brackets
    explanation: Kantsulgudega nimistud.
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: Get an item from a list
    explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: Get a random item from a list
    explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[random]
        {print} random_fruit
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a is 1'
        {elif} a == 2:
            {print} 'a is 2'
        {else}:
            {print} 'a is not 1 or 2'
-   name: '{print}'
    explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ready or not, here I come!'
-   name: '{if}'
    explanation: We need to do the same with all of our `{if}` statements
    demo_code: |-
        colour = {ask} 'What is your favorite color?'
        {if} colour == 'green':
            {print} 'Your favorite colour is green'
        {else}:
            {print} 'Your favorite colour is not green'
18:
-   name: '{print}'
    explanation: '`{print}` j√§rel on vaja kasutade sulge.'
    demo_code: '{print}(''hi!'')'
-   name: '{range}'
    explanation: '`{range}` j√§rel on vaja kasutada sulge.'
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Hello, times ', i)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
