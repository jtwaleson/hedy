1:
-   name: '{print}'
    explanation: Tulosta jotain komennolla `{print}`.
    demo_code: '{print} Hei! Tervetuloa Hedyn pariin!'
-   name: '{ask}'
    explanation: Kysy jotain komennolla `{ask}`.
    demo_code: '{ask} Mik√§ on lempiv√§risi?'
-   name: '{echo}'
    explanation: Toista jotain komennolla `{echo}`.
    demo_code: |-
        {ask} Mik√§ on lempiv√§risi?
        {echo} lempiv√§risi on siis
-   name: '{print} emojit'
    explanation: Tulosta emoji komennolla `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Piirr√§ viiva komennolla `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: K√§√§nn√§ piirt√§v√§ kilpikonna komennolla `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Anna sanalle nimi jota voit k√§ytt√§√§ my√∂hemmin ohjelmassa komennolla `{is}`. Voit valita nimen itse.
    demo_code: |-
        nimi {is} Hedy
        {print} Tervetuloa nimi
-   name: '{ask}'
    explanation: Kysy jotain komennolla `{ask}`. Huomaa ett√§ sinun on annettava vastaukselle nimi k√§ytt√§m√§ll√§ komentoa `{is}`.
    demo_code: |-
        v√§ri {is} {ask} Mik√§ on lempiv√§risi?
        {print} v√§ri on lempiv√§risi!
-   name: '{sleep}'
    explanation: '`{sleep}` anna Hedyn pit√§√§ (muutama) sekunti taukoa.'
    demo_code: |-
        {print} Annas kun ajattelen sekunnin...
        {sleep}
        {print} Hmm.. Tarvitsen viel√§ 3 sekuntia...
        {sleep} 3
        {print} Heureka! Keksin sen!
-   name: '{is} kilpikonnan kanssa'
    explanation: Anna numerolle nimi k√§ytt√§en komentoa `{is}`. Voit valita nimen itse.
    demo_code: |-
        kulma {is} 90
        {turn} kulma
        {forward} 100
3:
-   name: Valitse satunnainen
    explanation: Valitse satunnainen sana listasta komennoilla `{at}` ja `{random}`.
    demo_code: |-
        el√§imet {is} koira, kissa, kenguru
        {print} el√§imet {at} {random}
-   name: '{add}'
    explanation: '`{add}` asia `{to_list}`.'
    demo_code: |-
        el√§imet {is} lehm√§, kissa
        {add} koira {to_list} el√§imet
-   name: '{remove}'
    explanation: '`{remove}` asia `{from}`.'
    demo_code: |-
        el√§imet {is} kissa, koira, lehm√§
        {remove} koira {from} el√§imet
4:
-   name: '{print}'
    explanation: Tulosta tarkasti k√§ytt√§en lainausmerkkej√§.
    demo_code: '{print} ''Hei! Tervetuloa Hedyn pariin.'''
-   name: '{is}'
    explanation: Anna tekstinp√§tk√§lle nimi ja k√§yt√§ komentoa `{print}` ilman lainausmerkkej√§.
    demo_code: |-
        nimi {is} Hedy
        {print} 'minun nimeni on' nimi
-   name: '{ask}'
    explanation: Kysy jotain komennolla `{ask}`.
    demo_code: |-
        v√§ri {is} {ask} 'Mik√§ on lempiv√§risi?'
        {print} v√§ri ' on lempiv√§risi!'
5:
-   name: '{print}'
    explanation: Tulosta tarkasti k√§ytt√§en heittomerkkej√§.
    demo_code: '{print} ''Tervetuloa Hedyn pariin.'''
-   name: '{ask}'
    explanation: Kysy jotain komennolla `{ask}`.
    demo_code: |-
        v√§ri {is} {ask} 'Mik√§ on lempiv√§risi?'
        {print} v√§ri ' on lempiv√§risi!'
-   name: '{if}'
    explanation: Tee valinta komennolla `{if}`.
    demo_code: |-
        v√§ri {is} {ask} 'Mik√§ on lempiv√§risi?'
        {if} v√§ri {is} vihre√§ {print} 'hieno!' {else} {print} 'pl√§√§h'
-   name: '{if} kilpikonnan kanssa'
    explanation: Tee valinta komennolla `{if}`.
    demo_code: |-
        vastaus {is} {ask} 'Kuinka pitk√§lle minun pit√§isi k√§vell√§?'
        {if} vastaus {is} kauas {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Tarkista onko asia listassa komennolla `{in}`.
    demo_code: |-
        hienot_v√§rit {is} vihre√§, keltainen
        v√§ri {is} {ask} 'Mik√§ on lempiv√§risi?'
        {if} v√§ri {in} hienot_v√§rit {print} 'hieno!' {else} {print} 'pl√§√§h'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: '{print}'
    explanation: Tulosta tarkasti k√§ytt√§en heittomerkkej√§.
    demo_code: '{print} ''5 kertaa 5 on '' 5 * 5'
-   name: '{ask}'
    explanation: Kysy laskun tulos ja tarkista onko se oikein.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 10 plus 10?'
        {if} vastaus {is} 20 {print} 'Kyll√§!' {else} {print} 'Oho'
-   name: '{ask} ja {if} kilpikonnan kanssa'
    explanation: Ask the user how many angles they want.
    demo_code: |-
        angles = {ask} 'How many angles?'
        angle = 360 / angles
        {forward} 50
7:
-   name: '{print}'
    explanation: Tulosta tarkasti k√§ytt√§en heittomerkkej√§.
    demo_code: '{print} ''Tervetuloa Hedyn pariin.'''
-   name: '{ask}'
    explanation: Kysy jotain komennolla `{ask}`.
    demo_code: |-
        v√§ri = {ask} 'Mik√§ on lempiv√§risi?'
        {print} v√§ri ' on lempiv√§risi!'
-   name: '{if}'
    explanation: Tee valinta komennolla `{if}`.
    demo_code: |-
        v√§ri = {ask} 'Mik√§ on lempiv√§risi?'
        {if} v√§ri {is} vihre√§ {print} 'hieno!' {else} {print} 'pl√§√§h'
-   name: '{repeat} kilpikonnan kanssa'
    explanation: Toista koodirivi komennolla `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Tulosta jotain. Muista k√§ytt√§√§ lainausmerkkej√§.
    demo_code: '{print} ''5 kertaa 5 on '' 5 * 5'
-   name: '{ask}'
    explanation: Kysy vastausta ja tarkista, onko se oikein. Voimme nyt tulostaa 2 rivi√§.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 5 + 5?'
        {if} vastaus {is} 10
            {print} 'Hienoa!'
            {print} 'Vastaus on tosiaan ' vastaus
        {else}
            {print} 'Oho!'
            {print} 'Vastaus on 10'
-   name: '{repeat} kilpikonnan kanssa'
    explanation: Toista monta rivi√§.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '{if} monelle riville'
    explanation: The answer of a sum of questions with `{ask}` and see if it is correct. Now we print out two lines.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 10 plus 10?'
        {if} vastaus {is} 20
            {print} 'Hienoa!!'
            {print} 'Vastaus on tosiaan' vastaus
        {else}
            {print} 'V√§√§rin'
            {print} 'Vastaus on 10'
-   name: '{repeat} kilpikonnan kanssa'
    explanation: Toista monta rivi√§.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 kertaa 5 on '' 5 * 5'
-   name: '{for} listojen kanssa'
    explanation: Tulosta kaikki asiat listasta.
    demo_code: |-
        el√§imet {is} koira, kissa, kala
        {for} el√§in {in} el√§imet
          {print} el√§in 'on ihana'
11:
-   name: '{for} silmukka'
    explanation: Voimme k√§ytt√§√§ komentoa `{for}` komennon `{range}` kanssa.
    demo_code: |-
        {for} laskuri {in} {range} 1 {to} 5
            {print} laskuri
-   name: '{ask}'
    explanation: Kysy vastausta ja tarkista, onko se oikein. Voimme nyt tulostaa 2 rivi√§.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 5 + 5?'
        {if} vastaus {is} 10
            {print} 'Hienoa!'
            {print} 'Vastaus on tosiaan ' vastaus
        {else}
            {print} 'Oho!'
            {print} 'Vastaus on 10'
12:
-   name: float directly
    explanation: Desimaaliluvut.
    demo_code: |-
        {print} 'Laskehan!'
        {print} 'Kaksi ja puoli plus kaksi ja puoli on yhteens√§...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: Teksti lainausmerkeiss√§ merkin `=` j√§lkeen
    demo_code: |-
        nimi = 'Hedy robotti'
        {print} 'Hei ' nimi
-   name: heittomerkit {if} vertailun j√§lkeen
    explanation: Teksti lainausmerkeiss√§ komennon `{if}` j√§lkeen.
    demo_code: |-
        nimi = {ask} 'Kuka olet?'
        {if} nimi = 'Hedy'
            {print} 'Moikka!'
-   name: lainausmerkit listassa
    explanation: Lista k√§ytt√§en lainausmerkkej√§.
    demo_code: |-
        supersankarit = 'Iron Man', 'Batman', 'Superman'
        {print} supersankarit {at} {random}
13:
-   name: '{and}'
    explanation: Kaksi osaa joiden molempien on oltava oikein.
    demo_code: |-
        vastaus1 = {ask} 'Paljonko on 3+2'
        vastaus2 = {ask} 'Paljonko on 2+2?'
        {if} vastaus1 {is} 5 {and} vastaus2 {is} 4
            {print} 'Molemmat vastaukset ovat oikein!'
        {else}
            {print} 'Ainakin toinen vastauksista on v√§√§rin!'
-   name: '{or}'
    explanation: Ainakin toisen vastauksista on oltava oikein. Jos molemmat vastaukset ovat oikein, sekin on ok.
    demo_code: |-
        vastaus1 = {ask} 'Paljonko on 3+2'
        vastaus2 = {ask} 'Paljonko on 2+2?'
        {if} vastaus1 {is} 5 {or} vastaus2 {is} 4
            {print} 'Ainakin toinen vastauksista on oikein!'
        {else}
            {print} 'Molemmat vastaukset ovat v√§√§rin!'
14:
-   name: Pienempi
    explanation: K√§yt√§mme merkki√§ `<` tarkistaaksemme onko ensimm√§inen numero toista numeroa pienempi.
    demo_code: |-
        ik√§ = {ask} 'Kuinka vanha olet?'
        {if} ik√§ < 13
            {print} 'Olet minua nuorempi!'
-   name: Suurempi
    explanation: K√§yt√§mme merkki√§ `>` tarkistaaksemme onko ensimm√§inen numero toista numeroa suurempi.
    demo_code: |-
        ik√§ = {ask} 'Kuinka vanha olet?'
        {if} ik√§ > 13
            {print} 'Olet minua vanhempi!'
-   name: Yht√§ suuri
    explanation: K√§yt√§mme merkkej√§ `==` tarkistaaksemme ovatko kaksi asiaa samoja.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 5 * 5?'
        {if} vastaus == 25
            {print} 'Oikein!'
-   name: Eiv√§t yht√§ suuret
    explanation: K√§yt√§mme merkkej√§ `!=` tarkistaaksemme ettei kaksi asiaa ole samoja.
    demo_code: |-
        vastaus = {ask} 'Paljonko on 5 * 5?'
        {if} vastaus != 25
            {print} 'V√§√§rin!'
-   name: Pienempi tai yht√§suuri
    explanation: K√§yt√§mme merkkej√§ `<=` tarkistaaksemme onko ensimm√§inen numero pienempi tai yht√§suuri kuin j√§lkimm√§inen numero.
    demo_code: |-
        ik√§ = {ask} 'Kuinka vanha olet?'
        {if} ik√§ <= 12
            {print} 'Olet minua nuorempi!'
-   name: Suurempi tai yht√§suuri
    explanation: K√§yt√§mme merkkej√§ `>=` tarkistaaksemme onko ensimm√§inen numero suurempi tai yht√§suuri kuin j√§lkimm√§inen numero.
    demo_code: |-
        ik√§ = {ask} 'Kuinka vanha olet?'
        {if} ik√§ >= 14
            {print} 'Olet minua vanhempi!'
15:
-   name: '{while}'
    explanation: Voimme k√§ytt√§√§ `{while}` silmukkaa erisuuruuden kanssa.
    demo_code: |-
        vastaus = 0
        {while} vastaus != 25
            vastaus = {ask} 'Paljonko on 5 kertaa 5?'
        {print} 'Oikea vastaus on annettu'
-   name: Pienempi {while}
    explanation: We can also use the `{while}` loop with `<` and `>`.
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: square brackets
    explanation: Lists with square brackets.
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: Get an item from a list
    explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: Get a random item from a list
    explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[{random}]
        {print} random_fruit
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a is 1'
        {elif} a == 2:
            {print} 'a is 2'
        {else}:
            {print} 'a is not 1 or 2'
-   name: '{print}'
    explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ready or not, here I come!'
-   name: '{if}'
    explanation: We need to do the same with all of our `{if}` statements.
    demo_code: |-
        color = {ask} 'What is your favorite color?'
        {if} color == 'green':
            {print} 'Your favorite color is green'
        {else}:
            {print} 'Your favorite color is not green'
18:
-   name: '{print}'
    explanation: After `{print}` you need to use parentheses.
    demo_code: '{print}(''hi!'')'
-   name: '{range}'
    explanation: After `{range}` you need to use parentheses.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Hello, times ', i)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you print more items.
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something.
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
