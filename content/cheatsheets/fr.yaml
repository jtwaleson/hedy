1:
-   name: '{print}'
    explanation: Affiche quelque chose avec `{print}`.
    demo_code: '{print} Bonjour et bienvenue dans Hedy !'
-   name: '{ask}'
    explanation: Demande quelque chose avec `{ask}`.
    demo_code: '{ask} Quelle est ta couleur pr√©f√©r√©e ?'
-   name: '{echo}'
    explanation: R√©p√®te quelque chose avec `{echo}`.
    demo_code: |-
        {ask} Quelle est ta couleur pr√©f√©r√©e ?
        {echo} donc ta couleur pr√©f√©r√©e est
-   name: '{print} emojis'
    explanation: Afficher un emoji avec `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Dessiner une ligne avec `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Tourner la tortue qui dessine avec `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Donne un nom √† un mot que tu peux utiliser dans le programme avec `{is}`.
    demo_code: |-
        nom {is} Hedy
        {print} bienvenue nom
-   name: '{ask}'
    explanation: Demande quelque chose avec `{ask}`. Attention ! Tu dois donner √† la r√©ponse un nom avec `{is}`.
    demo_code: |-
        couleur {is} {ask} Quelle est ta couleur pr√©f√©r√©e ?
        {print} couleur est ton pr√©f√©r√© !
-   name: '{sleep}'
    explanation: '`{sleep}` Laissez Hedy faire une pause d''une (ou deux) seconde(s).'
    demo_code: |-
        {print} Laissez-moi r√©fl√©chir une seconde...
        {sleep}
        {print} Hmm... Il me faut encore 3 secondes...
        {sleep} 3
        {print} Eureka ! Je l'ai eu !
-   name: '{is}  avec tortue'
    explanation: Donnez un nom √† un num√©ro en utilisant `{is}`. Tu peux choisir le nom toi-m√™me.
    demo_code: |-
        angle {is} 90
        {turn} angle
        {forward} 100
3:
-   name: Choisi au hasard
    explanation: Choisi un mot au hasard dans un groupe avec `{at}` et `{random}`.
    demo_code: |-
        animaux {is} chien, chat, kangourou
        {print} animaux {at} {random}
-   name: '{add}'
    explanation: '`{add}` un √©l√©ment `{to_list}` une liste.'
    demo_code: |-
        animaux {is} vache, chat
        {add} chien {to_list} animaux
-   name: '{remove}'
    explanation: '`{remove}` un √©l√©ment `{from}` une liste.'
    demo_code: |-
        animaux {is} chat, chien, vache
        {remove} chien {from} animaux
4:
-   name: '{print}'
    explanation: Afficher exactement ce qui est entre les guillemets.
    demo_code: '{print} ''Bonjour et bienvenue √† Hedy.'''
-   name: '{is}'
    explanation: Donne un nom √† un texte et  `{print}` le sans guillemets.
    demo_code: |-
        nom {is} Hedy
        {print} 'mon nom est ' nom
-   name: '{ask}'
    explanation: Demande quelque chose avec `{ask}`.
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
5:
-   name: '{print}'
    explanation: Affiche exactement ce qui est entre les guillemets.
    demo_code: '{print} ''Bonjour et bienvenue √† Hedy.'''
-   name: '{ask}'
    explanation: Demande quelque chose avec `{ask}`.
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
-   name: '{if}'
    explanation: Fait un choix avec `{if}`.
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {if} couleur {is} vert {print} 'joli!' {else} {print} 'bof'
-   name: '{if} avec la tortue'
    explanation: Fait un choix avec `{if}`.
    demo_code: |-
        r√©ponse {is} {ask} "Jusqu'o√π dois-je marcher?"
        {if} r√©ponse {is} loin {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Check elements with `{in}`.
    demo_code: |-
        jolies_couleurs {is} vert, jaune
        couleur {is} {ask} 'Quelle {is} ta couleur favorite?'
        {if} couleur {in} jolies_couleurs {print} 'joli!' {else} {print} 'moche'
-   name: '{pressed}'
    explanation: V√©rifiez si une touche donn√©e du clavier est `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''Vous avez appuy√© sur A!'' {else} {print} ''Vous avez appuy√© sur une autre touche!'''
6:
-   name: '{print}'
    explanation: Affiche exactement ce qui est entre les guillemets.
    demo_code: '{print} ''5 fois 5 font '' 5 * 5'
-   name: '{ask}'
    explanation: Demandes un calcul et v√©rifies si elle est correcte.
    demo_code: |-
        reponse = {ask} 'Combien font 10 plus 10?'
        {if} reponse {is} 20 {print} 'Oui!' {else} {print} 'Oups'
-   name: '`{ask}` et `{if}` avec la tortue'
    explanation: Ask the user how many angles they want.
    demo_code: |-
        angles = {ask} 'Nombres angles?'
        angle = 360 / angles
        {forward} 50
7:
-   name: '{print}'
    explanation: Affiche exactement ce qui est entre les guillemets.
    demo_code: '{print} ''Bonjour et bienvenue √† Hedy.'''
-   name: '{ask}'
    explanation: Demande quelque chose avec `{ask}`.
    demo_code: |-
        couleur = {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
-   name: '{if}'
    explanation: Fait un choix avec `{if}`.
    demo_code: |-
        couleur = {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {if} couleur {is} vert {print} 'joli!' {else} {print} 'bof'
-   name: '{repeat} avec la tortue'
    explanation: R√©p√®tes une ligne de code avec `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Affiche quelque chose. N‚Äôoublies pas les guillemets pour afficher exactement ce qui est saisi.
    demo_code: '{print} ''5 fois 5 font '' 5 * 5'
-   name: '{ask}'
    explanation: Demandes le r√©sultat d‚Äôune addition et v√©rifies si elle est correcte. Tu peux d√©sormais imprimer sur 2 lignes.
    demo_code: |-
        reponse = {ask} 'Combien font 5 plus 5?'
        {if} reponse {is} 10
            {print} 'Bien jou√©!'
            {print} 'En effet, la r√©ponse est ' reponse
        {else}
            {print} 'Oups!'
            {print} 'La r√©ponse est 10.'
-   name: '{repeat} avec la tortue'
    explanation: R√©p√®te plusieurs lignes.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: V√©rifiez si une touche donn√©e du clavier est `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'Vous avez appuy√© sur A!'
        {else}
            {print} 'Vous avez appuy√© sur une autre touche!'
9:
-   name: '{if} avec plusieurs lignes'
    explanation: V√©rifies la r√©ponse d'une addition de nombres avec `{ask}`. On affiche maintenant sur 2 lignes.
    demo_code: |-
        reponse = {ask} 'Que font 10 plus 10 ?'
        {if} reponse {is} 20
            {print} 'Bien jou√© !!'
            {print} 'La r√©ponse est bien ' reponse
        {else}
            {print} 'Oups'
            {print} 'La r√©ponse est 20'
-   name: '{repeat} avec la tortue'
    explanation: R√©p√®te des lignes multiples.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Affiche quelque chose. N‚Äôoublies pas les guillemets pour afficher exactement ce qui est saisi.
    demo_code: '{print} ''5 fois 5 font '' 5 * 5'
-   name: '{for} with a list'
    explanation: Affiche tout les √©l√©ments d'un liste.
    demo_code: |-
        animaux {is} chiens, chats, poissons
        {for} animal {in} animaux
          {print} 'j aime les ' animal
11:
-   name: la boucle {for}
    explanation: On peut utiliser `{for}` avec un `{range}`.
    demo_code: |-
        {for} counter {in} {range} 1 {to} 5
            {print} counter
-   name: '{ask}'
    explanation: Demandes le r√©sultat d‚Äôune addition et v√©rifies si elle est correcte. Tu peux d√©sormais imprimer sur 2 lignes.
    demo_code: |-
        reponse = {ask} 'Combien font 5 plus 5?'
        {if} reponse {is} 10
            {print} 'Bien jou√©!'
            {print} 'En effet, la r√©ponse est ' reponse
        {else}
            {print} 'Oups!'
            {print} 'La r√©ponse est 10.'
12:
-   name: Directement flottante
    explanation: Nombres d√©cimaux.
    demo_code: |-
        {print} 'Calcules !'
        {print} 'deux et demi plus deux et demi font...'
        {print} 2.5 + 2.5
-   name: Assigner du texte
    explanation: Texte avec des guillemets apr√®s `=`
    demo_code: |-
        nom = 'Hedy le robot'
        {print} 'Bonjour ' nom
-   name: comparaison avec guillemets apr√®s `{if}`
    explanation: Texte avec guillemets suivant un `{if}`.
    demo_code: |-
        nom = {ask} 'Qui es-tu ?'
        {if} nom = 'Hedy'
             {print} 'Salut !'
-   name: guillemets dans une liste
    explanation: Une liste avec des guillemets.
    demo_code: |-
        superheros = 'Iron Man', 'Batman', 'Superman'
        {print} superheros {at} {random}
13:
-   name: '{and}'
    explanation: Les deux parties doivent √™tre correctes.
    demo_code: |-
        reponse1 = {ask} 'Que font 3 + 2 ?'
        reponse2 = {ask} 'Que font 2 + 2 ?'
        {if} reponse1 {is} 5 {and} reponse2 {is} 4
            {print} 'Les deux r√©ponses sont correctes !'
        {else}
            {print} 'Au moins une des deux r√©ponses est fausse !'
-   name: '{or}'
    explanation: Au moins une des deux parties doit √™tre correcte. Si les deux sont correctes, √ßa marche aussi.
    demo_code: |-
        reponse1 = {ask} 'Que font 3 + 2 ?'
        reponse2 = {ask} 'Que font 2 + 2 ?'
        {if} reponse1 {is} 5 {or} reponse2 {is} 4
            {print} 'Au moins une des deux r√©ponses est correcte !'
        {else}
            {print} 'Les deux r√©ponses sont fausses !'
14:
-   name: Plus petit
    explanation: On utilise `<` pour v√©rifier si le premier nombre est plus petit que le second.
    demo_code: |-
        age = {ask} 'Quel √¢ge as-tu ?'
        {if} age < 13
            {print} 'Tu es plus jeune que moi !'
-   name: Plus grand
    explanation: On utilise `>` pour v√©rifier si le premier nombre est plus grand que le second.
    demo_code: |-
        age = {ask} 'Quel √¢ge as-tu ?'
        {if} age > 13
            {print} 'Tu es plus vieux que moi !'
-   name: √âgal √†
    explanation: On utilise `==` pour v√©rifier si deux choses sont identiques.
    demo_code: |-
        reponse = {ask} 'Que font 5 * 5 ?'
        {if} reponse == 25
            {print} 'Correct !'
-   name: Diff√©rent de
    explanation: On utilise `!=` pour verifier que deux choses sont diff√©rentes.
    demo_code: |-
        reponse = {ask} 'Que font 5 * 5 ?'
        {if} reponse != 25
            {print} 'Pas correct !'
-   name: Plus petit ou √©gal
    explanation: On utilise le `<=` pour v√©rifier si le premier nombre est plus petit ou √©gal au second.
    demo_code: |-
        age = {ask} 'Quel √¢ge as-tu ?'
        {if} age <= 12
            {print} 'Tu es plus jeune que moi !'
-   name: Plus grand ou √©gal
    explanation: On utilise le `>=` pour v√©rifier si le premier nombre est plus grand ou √©gal au second.
    demo_code: |-
        age = {ask} 'Quel √¢ge as-tu ?'
        {if} age >= 14
            {print} 'Tu es plus vieux que moi !'
15:
-   name: '{while}'
    explanation: On peut utiliser la boucle `{while}` avec l'op√©rateur diff√©rent de.
    demo_code: |-
        reponse = 0
        {while} reponse != 25
            reponse = {ask} 'Que fait 5 multipli√© par 5 ?'
        {print} 'Une bonne r√©ponse a √©t√© donn√©e'
-   name: Plus petit {while}
    explanation: On peut aussi utiliser `{while}` avec `<` et `>`.
    demo_code: |-
        compteur = 1
        {while} compteur < 3
            {print} 'On doit compter encore ' 3 - compteur ' fois'
            compteur = compteur + 1
        {print} 'On a fini'
16:
-   name: crochets
    explanation: Liste avec des crochets.
    demo_code: |-
        fruits = ['pomme', 'banane', 'cerise']
        {print} fruits
-   name: Obtenir un √©l√©ment d'une liste
    explanation: 'Pour obtenir un √©l√©ment d''une liste, on utilise [nombre] donc fruits[1] signifie : obtenir le premier fruit de la liste !'
    demo_code: |-
        fruits = ['banane', 'pomme', 'cerise']
        premierfruit = fruits[1]
        {print} premierfruit
-   name: Obtenir un √©l√©ment al√©atoire dans une liste
    explanation: 'Pour obtenir un √©l√©ment al√©atoire d''une liste, on utilise [al√©atoire] donc fruits[al√©atoire] signifie : obtenir un fruit al√©atoire de la liste !'
    demo_code: |-
        fruits = ['banane', 'pomme', 'cerise']
        fruit_aleatoire = fruits[{random}]
        {print} fruit_aleatoire
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1 :
            {print} 'a est 1'
        {elif} a == 2 :
            {print} 'a est 2'
        {else} :
            {print} "a n'est pas 1 ou 2"
-   name: '{print}'
    explanation: Quand nous utilisons un  `{for}`, nous devons mettre un  `:` derri√®re l'affirmation du  `{for}` !
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} "Cache toi, j'arrive!"
-   name: '{if}'
    explanation: Nous devons faire de m√™me avec toutes nos d√©clarations `{if}`.
    demo_code: |-
        couleur = {ask} 'Quel est ta couleur pr√©f√©r√©e?'
        {if} couleur == 'vert' :
            {print} "Ta couleur pr√©f√©r√©e est le vert"
        {else} :
            {print} "Ta couleur pr√©f√©r√©e n'est pas le vert"
18:
-   name: '{print}'
    explanation: Avec `{print}` on doit utiliser des parenth√®ses.
    demo_code: '{print}(''hi!'')'
-   name: '{range}'
    explanation: Avec `{range}` on doit utiliser des parenth√®ses.
    demo_code: |-
        {for} i {in} {range} (1,10) :
            {print}('Salut, ', i, ' fois')
-   name: '{print} avec var'
    explanation: Avec `{print}` on doit utiliser des parenth√®ses et des virgules si l'on affiche plusieurs √©l√©ments.
    demo_code: |-
        nom = 'Hedy'
        {print}('mon nom est ', nom)
-   name: demande quelque chose avec {input}
    explanation: Utilisez `{input}` au lieu de `{ask}` pour demander quelque chose.
    demo_code: |-
        nom = {input}('Quel est ton nom ?')
        {print}('Donc, ton nom est ', nom)
