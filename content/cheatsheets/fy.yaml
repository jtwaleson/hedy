1:
-   name: '{print}'
    explanation: Eat printe mei `{print}`.
    demo_code: '{print} Hoi wolkom by Hedy!'
-   name: freegje
    explanation: Eat freegje mei `{ask}`.
    demo_code: '{ask} Wat is dyn favorite kleur?'
-   name: echo
    explanation: Eat werhelje mei `{echo}`.
    demo_code: |-
        {ask} Wat is dyn favorite kleur?
        {echo} Dus dyn favorite kleur is...
-   name: foarút
    explanation: Een line tekenje mei `{forward}`.
    demo_code: '{forward} 100'
-   name: draaie
    explanation: De teken-skyldpod draaie mei `{turn}`
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
-   name: '{turn}'
    explanation: turn the drawing turtle with `{turn}`
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: is
    explanation: In wurd in namme jaan mei `is`. Meist de namme sels kieze.
    demo_code: |-
        foarnamme is Hedy
        print ik bin foarnamme
-   name: is - teken-skyldpod
    explanation: In getal in namme jaan mei `is`. Meist de namme sels kieze.
    demo_code: |-
        hoeke is 90
        turn hoeke
        forward 100
-   name: ask
    explanation: Eat freegje mei `ask`. Mar tink derom! Moatst dyn antwurd in namme jaan mei `is`.
    demo_code: |-
        kleur is ask Wat is dyn favorite kleur?
        print Dyn favorite is dus kleur
-   name: is - turtle
    explanation: Give a number a name using `{is}`. You can choose the name yourself.
    demo_code: |-
        angle {is} 90
        {turn} angle
        {forward} 100
3:
-   name: kies_random
    explanation: Eat willekeurichs út in groepke wurden kieze mei `at` en `random`.
    demo_code: |-
        bisten is hûn, kat, kangeroe
        print bisten at random
-   name: '{add}'
    explanation: add an item to a list
    demo_code: |-
        animals {is} cow, cat
        {add} dog {to_list} animals
-   name: '{remove}'
    explanation: remove an item from a list
    demo_code: |-
        animals {is} cat, dog, cow
        {remove} dog {from} animals
4:
-   name: print
    explanation: Eat letterlik printe mei `print`.
    demo_code: print 'Hoi wolkom by Hedy'
-   name: is
    explanation: In stikje tekst in namme jaan mei `is` en printe sûnder oanhellingstekens
    demo_code: |-
        namme is Hedy
        print 'ik bin ' namme
-   name: ask
    explanation: Eat freegje mei `ask`
    demo_code: |-
        kleur is ask 'Wat is dyn favorite kleur?'
        print 'Dyn favorite is dus ' kleur
5:
-   name: print
    explanation: Eat letterlik printe mei `print`.
    demo_code: print 'Hoi wolkom by Hedy.'
-   name: ask
    explanation: Eat freegje mei `ask`.
    demo_code: |-
        kleur is ask 'Wat is dyn favorite kleur?'
        print 'Dyn favorite is dus ' kleur
-   name: if
    explanation: In kar meitsje mei `if`
    demo_code: |-
        kleur is ask 'Wat is dyn favorite kleur?'
        if kleur is grien print 'kreas!' else print 'minder kreas'
-   name: if mei teken-skyldpod
    explanation: In kar meitsje mei `if`
    demo_code: |-
        antwurd is ask 'Hoe fier moat ik rinne?'
        if antwurd is fier forward 100 else forward 5
-   name: '{in}'
    explanation: Check elements with `{in}`
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What {is} your favorite color?'
        {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: print
    explanation: Eat letterlik printe mei `print`.
    demo_code: print '5 keer 5 is ' 5 * 5
-   name: '`ask` en `if` - rekkenje'
    explanation: It antwurd fan in som freegje mei `ask` en sjen of't it goed is.
    demo_code: |-
        antwurd = ask 'Hoefolle is 10 plus 10?'
        if antwurd is 20 print 'Bêst genôch!' else print 'Flaterke'
-   name: '`ask` en `if` turtle'
    explanation: De brûker freegje hoefolle hoeken hy wol
    demo_code: |-
        hoeken = ask 'Hoefolle hoeken kriget dit figuur?'
        hoek = 360 / hoeken
        forward 50
7:
-   name: print
    explanation: Eat letterlik printe mei `print`.
    demo_code: print 'Hoi wolkom by Hedy'
-   name: ask
    explanation: Eat freegje mei `ask`.
    demo_code: |-
        kleur = ask 'Wat is dyn favorite kleur?'
        print 'Dyn favorite is dus ' kleur
-   name: if
    explanation: In kar meitsje mei `if`
    demo_code: |-
        kleur = ask 'Wat is dyn favorite kleur?'
        if kleur is grien print 'kreas!' else print 'minder kreas'
-   name: repeat
    explanation: Eat herhelje met `repeat`.
    demo_code: repeat 3 times print 'Hedy is leuk!'
8:
-   name: print
    explanation: Eat letterlik printe mei `print`.
    demo_code: print '5 keer 5 is ' 5 * 5
-   name: '`if` mei mear rigels'
    explanation: It antwurd fan in som freegje mei `ask` en sjen oft it goed is. No printe wy twa rigels!
    demo_code: |-
        antwurd = ask 'Hoefolle is 10 plus 10?'
        if antwurd is 20
            print 'Kreas!'
            print 'It antwurd wie yndie ' antwurd
        else
            print 'Flaterke'
            print 'It antwurd moast 20 wêze'
-   name: '`repeat` mei de teken-skyldpod'
    explanation: Mear rigels tegearre werhelje
    demo_code: |-
        repeat 4 times
            turn 90
            forward 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '`{if}` met meerdere regels'
    explanation: Het antwoord van een som vragen met `{ask}` en kijken of het goed is. Nu printen we twee regels uit.
    demo_code: |-
        antwoord = {ask} 'Hoeveel is 10 plus 10?'
        {if} antwoord {is} 20
            {print} 'Goedzo!'
            {print} 'Het antwoord was inderdaad ' antwoord
        {else}
            {print} 'Foutje'
            {print} 'Het antwoord moest zijn 20'
-   name: '`{repeat}` met de turtle'
    explanation: Meerdere regels samen herhalen
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{for} met een lijst'
    explanation: Alle dingen in een lijstje printen
    demo_code: |-
        dieren {is} hond, kat, papegaai
        {for} dier {in} dieren
          {print} dier
-   name: '{for} with a list'
    explanation: print all things in a list
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: repeat ferfange troch for
    explanation: '`repeat` ferfange'
    demo_code: |-
        for i in range 1 to 10
            print i
        print 'Wie niet weg is is gezien'
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        else
            {print} 'Oops!'
            {print} 'The answer is 10'
12:
-   name: assign text
    explanation: Tekst met aanhalingstekens na =
    demo_code: |-
        naam = 'Hedy de Robot'
        {print} 'Hallo ' naam
-   name: quotes {in} list
    explanation: Een lijstje maken met aanhalingstekens
    demo_code: |-
        superhelden = 'Iron Man', 'Batman', 'Superman'
        {print} superhelden {at} {random}
-   name: quotes after {if} comparison
    explanation: Tekst met aanhalingstekens na {if}
    demo_code: |-
        naam = {ask} 'Wie ben jij?'
        {if} naam = 'Hedy'
            {print} 'Hoi!'
-   name: float directly
    explanation: Kommagetallen
    demo_code: |-
        {print} 'Rekenen maar!'
        {print} 'Tweeënhalf plus tweeënhalf is...'
        {print} 2.5 + 2.5
13:
-   name: And
    explanation: '`And` is dus en. Beide dingen links en rechts fan de `and` moeten waar zijn.'
    demo_code: |-
        antwurd1 = ask 'Hoefolle is 3+2?'
        antwurd2 = ask 'Hoefolle is 2+2?'
        if antwurd1 is 5 and antwurd2 is 4
            print 'Beide antwurden binne goed!'
        else
            print 'Minimaal 1 antwurd is fout!'
-   name: Or
    explanation: '`Or` is dus of. Minimaal 1 fan de 2 tusken de `or` moat goed wêze. beide goed mei ek.'
    demo_code: |-
        antwurd1 = ask 'Hoefolle is 3+2?'
        antwurd2 = ask 'Hoefolle is 2+2?'
        if antwurd1 is 5 or antwurd2 is 4
            print 'Je hebt minimaal 1 antwurd goed!'
        else
            print 'Beide antwurden binne fout!'
14:
-   name: Lytser
    explanation: De `<` sjocht dus oft it earste getal lytser is as it twadde getal. Ast witte wolst of in fariabele lytser is as 15, dan brûkst dus `fariabele < 15`
    demo_code: |-
        leeftyd = ask 'Hoe âld bisto?'
        if leeftyd < 13
            print 'Dan bist jonger as ik!'
-   name: Grutter
    explanation: De `>` sjocht dus oft it earste getal grutter is as it twadde getal. Ast witte wolst of in fariabele lytser is as 15, dan brûkst dus `fariabele < 15`
    demo_code: |-
        leeftyd = ask 'Hoe âld bisto?'
        if leeftyd < 13
            print 'Dan bist âlder as ik!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: Not equal
    explanation: We use the `!=` to check if two things are not the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller {or} equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: while
    explanation: We kinne dus in `while`-lus brûke mei de `True` en `False`
    demo_code: |-
        antwoord = 0
        while antwoord != 25
            antwurd = ask 'Wat is 5 kear 5?'
        print 'Dat wie it goede antwurd!'
-   name: Smaller while
    explanation: We kinne in `while`-lus ek brûke mei `<` en `>`. Tink der om datst it getal wol grutter makkest. Oars komst de lus net út.
    demo_code: |-
        tel = 1
        while tel < 3
            print 'Dit is de ' tel 'e kear'
            tel = tel + 1
        print 'We zijn klaar'
16:
-   name: Heakjes om listen
    explanation: We sette no heakjes om listen. Tink ek om de inkelde oanhellingstekens om dingen yn 'e liste!
    demo_code: |-
        fruit = ['apel', 'banaan', 'kjers']
        print fruit
-   name: Pak eat út in list
    explanation: Om in ding út in list te krijen, brûke we `[nûmer]`. Dus mei fruit[1] krigest it earste fruit út 'e list!
    demo_code: |-
        fruit = ['apel', 'banaan', 'kjers']
        earstefruit = fruit[1]
        print earstefruit
-   name: Nim in willekeurich ding út 'e list
    explanation: Om in willekeurich ding út 'e list te nimmen, brûke we [random]. Dus fruit[random] pakt in willekeurich fruit út 'e list!
    demo_code: |-
        fruit = ['apel', 'banaan', 'kjers']
        random_fruit = fruit[random]
        print random_fruit
17:
-   name: 'for met :'
    explanation: By `for` moatst no in `:` efteroan sette!
    demo_code: |-
        for i in range 1 to 10:
            print i
        print 'Wie niet weg is is gezien'
-   name: 'if met :'
    explanation: We moatte itselde dwaan mei al ús `if`
    demo_code: |-
        kleur = ask 'Wat is dyn favorite kleur?'
        if kleur is 'grien':
            print 'De kleur is grien'
        else:
            print 'De kleur is net grien'
-   name: (Optioneel) elif
    explanation: |-
        Meist ek in nij kommando brûke: `elif`.
        `elif` is eins 'else if'. Sjochst dus earst nei `if` en as dy net wier is, dan besikest `elif`,
        en als dy net wier is dan giest nei de `else`.
    demo_code: |-
        a = 2
        if a is 1:
            print 'a is 1'
        elif a is 2:
            print 'a is 2'
        else:
            print 'a is net 1 of 2'
18:
-   name: '{print}'
    explanation: Bij `{print}` moet je haakjes gebruiken
    demo_code: '{print}(''hallo!'')'
-   name: '{print} met var'
    explanation: Bij `{print}` moet je haakjes gebruiken en komma's als je meerdere dingen {print}
    demo_code: |-
        naam = 'Hedy'
        {print}('ik heet', naam)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
