1:
-   name: '{print}'
    explanation: '√çrass ki valamit: `{print}`.'
    demo_code: '{print} Szia, √ºdv√∂zl√ºnk a Hedyn√©l!'
-   name: '{ask}'
    explanation: 'K√©rdezz valamit: `{ask}`.'
    demo_code: '{ask} Mi a kedvenc sz√≠ned?'
-   name: '{echo}'
    explanation: 'Ism√©telj valamit: `{echo}`.'
    demo_code: |-
        {ask} Mi a kedvenc sz√≠ned?
        {echo} A kedvenc sz√≠ned teh√°t
-   name: '{print} emoji'
    explanation: 'Rajzolj egy emojit: `{print}`.'
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: 'Rajzolj egy vonalat: `{forward}`.'
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: 'Ford√≠tsd el a tekn≈ëst: `{turn}`.'
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Nevezz el egy sz√≥t az `{is}` paranccsal, √©s haszn√°ld a programban. Tetsz≈ëleges nevet v√°laszthatsz.
    demo_code: |-
        n√©v {is} Hedy
        {print} szia n√©v
-   name: '{ask}'
    explanation: K√©rdezz valami az `{ask}` utas√≠t√°ssal. Vigy√°zz! A v√°laszodnak nevet kell adnod az `{is}` seg√≠ts√©g√©vel.
    demo_code: |-
        sz√≠n {is} {ask} Mi a kedvenc sz√≠ned?
        {print} sz√≠n a kedvenc sz√≠ned!
-   name: '{sleep}'
    explanation: '√Åll√≠tsd meg a Hedy-t egy (p√°r) m√°sodpercre: `{sleep}`.'
    demo_code: |-
        {print} Hadd gondolkodjak egy pillanatot...
        {sleep}
        {print} Hmm.. Kell m√©g 3 m√°sodperc...
        {sleep} 3
        {print} Heur√©ka! Kital√°ltam!
-   name: '{is} a tekn≈ëssel'
    explanation: Nevezz el egy sz√°mot az `{is}` paranccsal. Tetsz≈ëleges nevet v√°laszthatsz.
    demo_code: |-
        sz√∂g {is} 90
        {turn} sz√∂g
        {forward} 100
3:
-   name: V√©letlen v√°laszt√°s
    explanation: V√°lassz v√©letlenszer≈±en egy sz√≥t egy csoportb√≥l az `{at}` √©s a `{random}` utas√≠t√°sokkal.
    demo_code: |-
        √°llatok {is} kutya, cica, kenguru
        {print} √°llatok {at} {random}
-   name: '{add}'
    explanation: '`{add}` egy elemet `{to_list}` a list√°ba.'
    demo_code: |-
        √°llatok {is} boci, cica
        {add} kutya {to_list} √°llatok
-   name: '{remove}'
    explanation: '`{remove}` egy elemet `{from}` a list√°b√≥l.'
    demo_code: |-
        √°llatok {is} cica, kutya, boci
        {remove} kutya {from} √°llatok
4:
-   name: '{print}'
    explanation: Pontos ki√≠rat√°s id√©z≈ëjelekkel.
    demo_code: '{print} "Szia, √ºdv√∂zl√ºnk a Hedy-n√©l."'
-   name: is
    explanation: Adj nevet a sz√∂vegnek √©s √≠rasd ki `print`seg√≠ts√©g√©vel id√©z≈ëjelek n√©lk√ºl
    demo_code: |-
        nev is Hedy
        print 'A nevem ' nev
-   name: ask
    explanation: K√©rdezz valamit `ask`seg√≠ts√©g√©vel.
    demo_code: |-
        szin is ask 'Mi a kedvenc sz√≠ned?'
        print szin ' a kedvenc sz√≠ned !'
5:
-   name: print
    explanation: Pontos ki√≠rat√°s id√©z√≥jelekkel.
    demo_code: print 'Szia, √ºdv√∂zl√ºnk a Hedy-n√©l.'
-   name: ask
    explanation: K√©rdezz valamit az `ask`utas√≠t√°ssal.
    demo_code: |-
        szin is ask 'Mi a kedvenc sz√≠ned?'
        print szin ' a kedvenced!'
-   name: if
    explanation: V√°lassz az `if` utas√≠t√°ssal
    demo_code: |-
        szin is ask 'Mi a kedvenc sz√≠ned?'
        if szin is z√∂ld print 'sz√©p!' else print 'cs√∫nya'
-   name: if utas√≠t√°s a tekn≈ëssel
    explanation: V√°lassz az `if` utas√≠t√°ssal
    demo_code: |-
        valasz is ask 'Milyen messze menjek?'
        if valasz is messze forward 100 else forward 5
-   name: '{in}'
    explanation: Check elements with `{in}`
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What {is} your favorite color?'
        {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'
-   name: '{pressed}'
    explanation: Ellen≈ërizze hogy a `{pressed}` kulcs a billenty≈±zeten van-e.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
6:
-   name: print
    explanation: Pontos ki√≠rat√°s aposztr√≥fokkal
    demo_code: print '5-sz√∂r 5 az ' 5 * 5
-   name: '`ask` √©s `if` sz√°mol√°sokkal'
    explanation: K√©rdezz egy sz√°mol√°st √©s ellen≈ërizd, hogy j√≥-e.
    demo_code: |-
        valasz = ask 'Mennyi 10+10?'
        if valasz is 20 print 'Igen!' else print 'Hopp√°'
-   name: '`ask` √©s `if` tekn≈ës'
    explanation: K√©rdezd meg a felhaszn√°l√≥t mennyi sz√∂get akar
    demo_code: |-
        szogek = ask 'H√°ny sz√∂g?'
        szog = 360 / szogek
        forward 50
7:
-   name: print
    explanation: Pontos ki√≠rat√°s id√©z√≥jelekkel.
    demo_code: print 'Szia, √ºdv√∂zl√ºnk a Hedy-n√©l.'
-   name: ask
    explanation: K√©rdezz valamit az `ask`utas√≠t√°ssal.
    demo_code: |-
        szin = ask 'Mi a kedvenc sz√≠ned?'
        print szin ' a kedvenced!'
-   name: if
    explanation: K√©sz√≠ts el√°gaz√°st az `if` utas√≠t√°ssal
    demo_code: |-
        szin = ask 'Mi a kedvenc sz√≠ned?'
        if szin is z√∂ld print 'sz√©p!' else print 'cs√∫nya'
-   name: repeat - tekn≈ës
    explanation: Ism√©tej meg egy k√≥dsort `repeat` utas√≠t√°ssal.
    demo_code: repeat 3 times forward 10
8:
-   name: print
    explanation: √çrass ki valamit. Ne felejts el a posztr√≥fot haszn√°lni a helyes ki√≠rat√°shoz.
    demo_code: print '5-sz√∂r 5 az ' 5 * 5
-   name: '`if` t√∂bb sorral'
    explanation: K√©rdezz egy m≈±veletet √©s ellen≈ërizd, hogy j√≥-e a v√°lasz. Most k√©t sort fogunk ki√≠ratni.
    demo_code: |-
        valasz = ask 'Mennyi 5 + 5?'
        if valasz is 10
            print 'Nagyszer≈±!'
            print 'Val√≥ban a v√°lasz ' valasz
        else
            print 'Hopp√°!'
            print 'A v√°lasz 10'
-   name: '`{repeat}` with turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '`{if}` with multiple lines'
    explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
    demo_code: |-
        answer = {ask} 'What is 20 plus 20?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        else
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: '`{repeat}` and turtle'
    explanation: '{repeat} multiple lines'
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{for} with a list'
    explanation: print all things in a list
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: repeat
    explanation: a `repeat` utas√≠t√°st `for` utas√≠t√°ssal helyettes√≠tj√ºk
    demo_code: |-
        for i in range 1 to 10
          print i
        print 'Aki b√∫jt, aki nem, megyek!'
-   name: ask
    explanation: K√©rdezz r√° egy √∂sszegre, √©s ellen≈ërizd, hogy helyes -e. Most 2 sort √≠rathatunk ki.
    demo_code: |-
        valasz = ask 'Mennyi 5+5?'
        if valasz is 10
            print 'J√≥l van!'
            print 'Val√≥ban, a v√°lasz ez volt ' valasz
        else
            print 'Juj!'
            print 'A v√°lasz 10'
12:
-   name: float directly
    explanation: Decimal numbers
    demo_code: |-
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: Text with quotation marks after =
    demo_code: |-
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: quotes after {if} comparison
    explanation: Text with quotation marks after {if}
    demo_code: |-
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: quotes in list
    explanation: A list with quotation marks
    demo_code: |-
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: √âs
    explanation: |-
        Mindk√©t √°ll√≠t√°snak (az `and` bal √©s jobb oldal√°n) igaznak kell lenni.
        if 3+2 is 5 and 2+2 is 4
    demo_code: |-
        valasz1 = ask 'Mennyi 3+2?'
        valasz2 = ask 'Mennyi 2+2?'
        if valasz1 is 5 and valasz2 is 4
         print 'Mindk√©t v√°lasz helyes'
        else
         print 'Legal√°bb egy v√°lasz hib√°s!'
-   name: Vagy
    explanation: |-
        `Or` Az `or` jobb vagy baloldal√°n legal√°bb az egyik v√°lasznak igaznak kell lenni, ha
        mindkett≈ë igaz, az is j√≥.
    demo_code: |-
        valasz1 = ask 'Mennyi 3+2?'
        valasz2 = ask 'Mennyi 2+2?'
        if valasz1 is 5 or valasz2 is 4
         print 'Legal√°bb egy v√°lasz helyes!'
        else
         print 'Mindk√©t v√°lasz hib√°s!'
14:
-   name: Kisebb
    explanation: |-
        A `<` ellen≈ërzi, hogy az els≈ë sz√°m kisebb-e, mint a m√°sodik. P√©ld√°ul, ha le akarjuk
        ellen≈ërizni, hogy valtozo kisebb-e, mint 15, akkor `valtozo< 15` utas√≠t√°st haszn√°ljuk.
        P√©ld√°ul: kor<13
    demo_code: |-
        kor = ask 'H√°ny √©ves vagy?'
        if kor < 13
         print 'Fiatalabb vagy, mint √©n!'
-   name: Nagyobb
    explanation: |-
        A `>` ellen≈ërzi, hogy az els≈ë sz√°m nagyobb-e, mint a m√°sodik. P√©ld√°ul, ha le akarjuk
        ellen≈ërizni, hogy valtozo nagyobb-e, mint 15, akkor `valtozo>15` utas√≠t√°st haszn√°ljuk.
        P√©ld√°ul: kor>13
    demo_code: |-
        kor = ask 'H√°ny √©ves vagy?'
        if kor < 13
         print 'Id≈ësebb vagy, mint √©n!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: Not equal
    explanation: We use the `!=` to check if two things are not the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller {or} equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: Logikai am√≠g
    explanation: A `while` ciklust `True` √©s `False` seg√≠ts√©g√©vel haszn√°lhatjuk. while valasz is False
    demo_code: |-
        valasz = 0
        while valasz != 25
          valasz = ask 'Mennyi 5-sz√∂r 5?'
        print 'A helyes v√°lasz megad√°sra ker√ºlt'
-   name: Kisebb am√≠g
    explanation: |-
        Haszn√°lhatjuk a `while` ciklust a `<` √©s `>` karakterekkel is. L√©gy √≥vatos, meg kell
        v√°ltoztatnod a sz√°mot, hogy a ciklus v√©get √©rjen. Ezt √∫gy tessz√ºk, hogy a szam
        v√°ltoz√≥ √©rt√©ke szam + 1 lesz.
    demo_code: |-
        szam = 1
        while szam < 3
          print 'Ezt ' 3 - szam ' alkalommal ism√©telj√ºk'
          szam = szam + 1
        print 'K√©szen vagyunk'
16:
-   name: Sz√∂gletes z√°r√≥jel list√°k k√∂r√ºl
    explanation: List√°kn√°l sz√∂gletes z√°r√≥jelet fogunk haszn√°lni! A lista egyes elemeit aposztr√≥fok (') k√∂z√© tessz√ºk.
    demo_code: |-
        gyumolcs = ['alma', 'ban√°n', 'cseresznye']
        print gyumolcs
-   name: Vegy√ºnk ki egy elemet a list√°b√≥l
    explanation: Egy elem kiv√©tel√©hez egy [sz√°m] jel√∂l√©st haszn√°lunk, p√©d√°ul a gyumolcs[1] azt jelenti, hogy az els≈ë elemet kapjuk meg a gyumolcs nev≈± list√°b√≥l!
    demo_code: |-
        gyumolcs = ['alma', 'ban√°n', 'cseresznye']
        elsogyumolcs = gyumolcs[1]
        print gyumolcs
-   name: Elem v√©letlenszer≈± kiv√°laszt√°sa list√°b√≥l
    explanation: V√©letlenszer≈± elem kiv√°laszt√°sa list√°b√≥l a [random] utas√≠t√°ssal t√∂rt√©nik, p√©ld√°ul gyumolcs[random] utas√≠t√°s azt jelenti, hogy v√©letlenszer≈±en kapjuk vissza a gy√ºm√∂lcs nev≈± lista egyik elem√©t!
    demo_code: |-
        gyumolcs = ['alma', 'ban√°n', 'cseresznye']
        veletlengyumolcs = gyumolcs[random]
        print veletlengyumolcs
17:
-   name: 'for ezzel:'
    explanation: Ha a `for` utas√≠t√°st haszn√°ljuk, egy  `:`-ot tesz√ºnk a `for` utas√≠t√°s v√©g√©re!
    demo_code: |-
        for i in range 1 to 12:
            print i
        print 'Aki b√∫jt, aki nem, megyek!'
-   name: 'if ezzel:'
    explanation: Ugyan√∫gy kell elj√°rnunk `if` √°ll√≠t√°s eset√©n
    demo_code: |-
        szin = ask 'Mi a kedvenc sz√≠ned?'
        if szin is 'z√∂ld':
            print 'a sz√≠n z√∂ld'
        else:
            print 'A szin nem z√∂ld'
-   name: elif
    explanation: 'Mutatunk neked egy √∫j utas√≠t√°st, amit ezut√°n haszn√°lhatsz: `elif`. Az `elif` azt jelenti "else if". El≈ësz√∂r leellen≈ërizz√ºk hogy `if` helyes-e, ha nem helyes, megn√©zz√ºk az `elif` felt√©telt √©s ha ez sem helyes, akkor `else` utas√≠t√°shoz megy√ºnk.'
    demo_code: |-
        a = 2
        if a is 1:
            print 'a √©rt√©ke 1'
        elif a is 2:
            print 'a √©rt√©ke 2'
        else:
            print 'a √©rt√©ke nem 1 vagy 2'
18:
-   name: '{print}'
    explanation: With `{print}` you need to use parentheses
    demo_code: '{print}(''hi!'')'
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
