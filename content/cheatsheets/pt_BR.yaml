1:
-   name: '{print}'
    explanation: Imprima algo com `{print}`.
    demo_code: '{print} Ol√° bem-vindo(a) √† Hedy!'
-   name: '{ask}'
    explanation: Pergunte algo com `{ask}`.
    demo_code: '{ask} Qual a sua cor favorita?'
-   name: '{echo}'
    explanation: Repita algo usando `{echo}`.
    demo_code: |-
        {ask} Qual a sua cor favorita?
        {echo} ent√£o a sua cor favorita √©
-   name: '{print} emojis'
    explanation: Imprima um emoji com `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Desenhe uma linha com `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Gire a tartaruga que desenha com `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: D√™ um nome para uma palavra ser usada no programa com `{is}`.
    demo_code: |-
        nome {is} Hedy
        {print} bem-vindo(a) nome
-   name: '{ask}'
    explanation: Pergunte algo com `{ask}`. Cuidado! Voc√™ precisa dar √† resposta um nome com `{is}`.
    demo_code: |-
        cor {is} {ask} Qual a sua cor favorita?
        {print} cor √© a sua favorita!
-   name: '{sleep}'
    explanation: '`{sleep}` deixe Hedy pausar por um (ou mais) segundo(s).'
    demo_code: |-
        {print} Deixe-me pensar por um segundo...
        {sleep}
        {print} Hmm.. Eu preciso de mais 3 segundos...
        {sleep} 3
        {print} Eureka! Eu entendi!
-   name: '{is} com tartaruga'
    explanation: D√™ um nome para um n√∫mero usando `{is}`. Voc√™ mesmo pode escolher o nome.
    demo_code: |-
        √¢ngulo {is} 90
        {turn} √¢ngulo
        {forward} 100
3:
-   name: Escolhe aleat√≥rio
    explanation: Escolha uma palavra aleat√≥ria de um grupo com `{at}` e `{random}`.
    demo_code: |-
        animais {is} cachorro, gato, canguru
        {print} animais {at} {random}
-   name: '{add}'
    explanation: '`{add}` um item `{to_list}` uma lista.'
    demo_code: |-
        animais {is} vaca, gato
        {add} cachorro {to_list} animais
-   name: '{remove}'
    explanation: '`{remove}` um item `{from}` uma lista.'
    demo_code: |-
        animais {is} gato, cachorro, vaca
        {remove} cachorro {from} animais
4:
-   name: '{print}'
    explanation: Imprima exatamente usando aspas simples.
    demo_code: '{print} ''Ol√° bem-vindo(a) √† Hedy.'''
-   name: '{is}'
    explanation: D√™ um nome para um texto qualquer e use `{print}` sem aspas.
    demo_code: |-
        nome {is} Hedy
        {print} 'meu nome √© ' nome
-   name: '{ask}'
    explanation: Pergunte algo com `{ask}`.
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
5:
-   name: '{print}'
    explanation: Imprima exatamente usando aspas simples.
    demo_code: '{print} ''Ol√° bem-vindo(a) √† Hedy.'''
-   name: '{ask}'
    explanation: Pergunte algo com `{ask}`.
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
-   name: '{if}'
    explanation: Fa√ßa uma escolha com `{if}`.
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'
-   name: '{if} com tartaruga'
    explanation: Fa√ßa uma escolha com `{if}`.
    demo_code: |-
        resposta {is} {ask} 'At√© onde eu devo andar?'
        {if} resposta {is} longe {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Verifique elementos com `{in}`.
    demo_code: |-
        cores_bonitas {is} verde, amarelo
        cor {is} {ask} 'Qual {is} a sua cor favorita?'
        {if} cor {in} cores_bonitas {print} 'bonita!' {else} {print} 'n√£o gostei'
-   name: '{pressed}'
    explanation: Verifique se uma determinada tecla no teclado est√° `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''Voc√™ apertou A!'' {else} {print} ''Voc√™ apertou outra tecla!'''
6:
-   name: '{print}'
    explanation: Imprima exatamente usando aspas simples.
    demo_code: '{print} ''5 vezes 5 √© '' 5 * 5'
-   name: '{ask}'
    explanation: Pe√ßa por um c√°lculo e verifique se est√° correto.
    demo_code: |-
        resposta = {ask} 'Quanto √© 10 mais 10?'
        {if} resposta {is} 20 {print} 'Acertou!' {else} {print} 'Ops'
-   name: '`{ask}` e `{if}` com tartaruga'
    explanation: Pergunte ao usu√°rio quantos √¢ngulos ele deseja.
    demo_code: |-
        √¢ngulos = {ask} 'Quantos √¢ngulos?'
        √¢ngulo = 360 / √¢ngulos
        {forward} 50
7:
-   name: '{print}'
    explanation: Imprima exatamente usando aspas simples.
    demo_code: '{print} ''Ol√° bem-vindo(a) √† Hedy.'''
-   name: '{ask}'
    explanation: Pergunte algo com `{ask}`.
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
-   name: '{if}'
    explanation: Fa√ßa uma escolha com `{if}`.
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'
-   name: '{repeat} com tartaruga'
    explanation: Repita uma linha de c√≥digo com `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Imprima alguma coisa. Lembre-se de usar aspas simples para imprimir exatamente.
    demo_code: '{print} ''5 vezes 5 √© '' 5 * 5'
-   name: '{ask}'
    explanation: Pergunte pela resposta de uma soma e verifique se est√° correta. Agora n√≥s podemos imprimir 2 linhas.
    demo_code: |-
        resposta = {ask} 'Quanto √© 5 mais 5?'
        {if} resposta {is} 10
            {print} 'Muito bem!'
            {print} 'De fato, a resposta foi ' resposta
        {else}
            {print} 'Ops!'
            {print} 'A resposta √© 10'
-   name: '{repeat} com tartaruga'
    explanation: Repita m√∫ltiplas linhas.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Verifique se uma determinada tecla no teclado est√° `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'Voc√™ apertou A!'
        {else}
            {print} 'Voc√™ apertou outra tecla!'
9:
-   name: '{if} com m√∫ltiplas linhas'
    explanation: Pe√ßa pela resposta de uma soma com `{ask}` e verifique se est√° correta. Agora imprima duas linhas.
    demo_code: |-
        resposta = {ask} 'Quanto √© 10 mais 10?'
        {if} resposta {is} 20
            {print} 'Muito bem!!'
            {print} 'A resposta √© realmente' resposta
        {else}
            {print} 'Errado'
            {print} 'A resposta √© 20'
-   name: '{repeat} com a tartaruga'
    explanation: Repita m√∫ltiplas linhas.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Imprima algo. Lembre-se de usar aspas para imprimir exatamente.
    demo_code: '{print} ''5 vezes 5 √© '' 5 * 5'
-   name: '{for} com uma lista'
    explanation: Imprima todas as coisas de uma lista.
    demo_code: |-
        animais {is} cachorro, gato, peixe
        {for} animal {in} animais
          {print} 'Em amo ' animal
11:
-   name: La√ßo {for}
    explanation: N√≥s podemos usar `{for}` com um `{range}`.
    demo_code: |-
        {for} contador {in} {range} 1 {to} 5
            {print} contador
-   name: '{ask}'
    explanation: Pergunte pela resposta de uma soma e verifique se est√° correta. Agora voc√™ pode imprimir duas linhas.
    demo_code: |-
        resposta = {ask} 'Quanto √© 5 mais 5?'
        {if} resposta {is} 10
            {print} 'Muito bem!'
            {print} 'De fato, a resposta era ' resposta
        {else}
            {print} 'Ops!'
            {print} 'A resposta √© 10'
12:
-   name: n√∫meros reais
    explanation: N√∫meros decimais.
    demo_code: |-
        {print} 'Venha calcular!'
        {print} 'Dois e meio mais dois e meio s√£o...'
        {print} 2.5 + 2.5
-   name: atribui√ß√£o de texto
    explanation: Texto com aspas simples depois de `=`
    demo_code: |-
        nome = 'Hedy a Rob√¥'
        {print} 'Ol√° ' nome
-   name: aspas simples depois da compara√ß√£o com `{if}`
    explanation: Texto com aspas simples depois de `{if}`.
    demo_code: |-
        nome = {ask} 'Quem √© voc√™?'
        {if} nome = 'Hedy'
            {print} 'Ol√°!'
-   name: texto com aspas dentro de uma lista
    explanation: Uma lista com aspas simples.
    demo_code: |-
        super_her√≥is = 'Homem de Ferro', 'Batman', 'Super-Homem'
        {print} super_her√≥is {at} {random}
13:
-   name: '{and}'
    explanation: Ambas as partes precisam ser verdadeiras.
    demo_code: |-
        resposta1 = {ask} 'Quanto √© 3+2?'
        resposta2 = {ask} 'Quanto √© 2+2?'
        {if} resposta1 {is} 5 {and} resposta2 {is} 4
            {print} 'Ambas as respostas est√£o corretas!'
        {else}
            {print} 'Pelo menos uma resposta est√° errada!'
-   name: '{or}'
    explanation: Pelo menos uma das partes precisa estar correta. Se ambas estiverem corretas, tamb√©m n√£o tem problema.
    demo_code: |-
        resposta1 = {ask} 'Quanto √© 3+2?'
        resposta2 = {ask} 'Quanto √© 2+2?'
        {if} resposta1 {is} 5 {or} resposta2 {is} 4
            {print} 'Pelo menos uma resposta est√° correta!'
        {else}
            {print} 'Ambas as respostas est√£o erradas!'
14:
-   name: Menor
    explanation: N√≥s usamos o `<` para verificar se o primeiro n√∫mero √© menor que o segundo n√∫mero.
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade < 13
            {print} 'Voc√™ √© mais novo do que eu!'
-   name: Maior
    explanation: N√≥s usamos `>` para verificar se o primeiro n√∫mero √© maior que o segundo n√∫mero.
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade > 13
            {print} 'Voc√™ √© mais velho do que eu!'
-   name: Igual
    explanation: N√≥s usamos o `==` para verificar se duas coisas s√£o id√™nticas.
    demo_code: |-
        resposta = {ask} 'Quanto √© 5 * 5?'
        {if} resposta == 25
            {print} 'Est√° correto!'
-   name: Diferente
    explanation: N√≥s usamos o `!=` para verificar se duas coisas s√£o diferentes.
    demo_code: |-
        resposta = {ask} 'Quanto √© 5 * 5?'
        {if} resposta != 25
            {print} 'N√£o est√° correto!'
-   name: Menor ou igual
    explanation: N√≥s usamos o `<=` para verificar se o primeiro n√∫mero √© menor ou igual ao segundo n√∫mero.
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade <= 12
            {print} 'Voc√™ √© mais novo do que eu!'
-   name: Maior ou igual
    explanation: N√≥s podemos usar o `>=` para verificar se o primeiro n√∫mero √© maior ou igual ao segundo n√∫mero.
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade >= 14
            {print} 'Voc√™ √© mais velho do que eu!'
15:
-   name: '{while}'
    explanation: N√≥s podemos usar o la√ßo `{while}` com o diferente.
    demo_code: |-
        resposta = 0
        {while} resposta != 25
            resposta = {ask} 'Quanto √© 5 vezes 5?'
        {print} 'Foi dada uma boa resposta'
-   name: '{while} menor'
    explanation: N√≥s tamb√©m podemos usar o la√ßo `{while}` com `<` e `>`.
    demo_code: |-
        contagem = 1
        {while} contagem < 3
            {print} 'Fazemos isto mais ' 3 - contagem ' vezes.'
            contagem = contagem + 1
        {print} 'Acabamos'
16:
-   name: colchetes
    explanation: Listas com colchetes.
    demo_code: |-
        fruta = ['ma√ß√£', 'banana', 'cereja']
        {print} fruta
-   name: Obtenha um elemento de uma lista
    explanation: 'Para obter um elemento de uma lista n√≥s usamos [n√∫mero] onde fruta[1] significa: obtenha a primeira fruta da lista!'
    demo_code: |-
        fruta = ['banana', 'ma√ß√£', 'cereja']
        primeira_fruta = fruta[1]
        {print} primeira_fruta
-   name: Obtenha um elemento aleat√≥rio de uma lista
    explanation: Para obter um elemento aleat√≥rio de uma lista n√≥s usamos [random], ent√£o fruta[random] significa obter uma fruta qualquer da lista!
    demo_code: |-
        fruta = ['banana', 'ma√ß√£', 'cereja']
        qualquer_fruta = fruta[{random}]
        {print} qualquer_fruta
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a √© 1'
        {elif} a == 2:
            {print} 'a √© 2'
        {else}:
            {print} 'a n√£o √© 1 nem 2'
-   name: '{print}'
    explanation: Quando n√≥s usamos um `{for}`, precisamos colocar um `:` depois do comando `{for}`!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Pronto ou n√£o, aqui vou eu!'
-   name: '{if}'
    explanation: N√≥s precisamos fazer o mesmo com todos os nossos comandos `{if}`.
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {if} cor == 'verde':
            {print} 'Sua cor favorita √© verde'
        {else}:
            {print} 'Sua cor favorita n√£o √© verde'
18:
-   name: '{print}'
    explanation: Depois de `{print}` voc√™ precisa usar par√™nteses.
    demo_code: '{print}(''ol√°!'')'
-   name: '{range}'
    explanation: Depois de `{range}` voc√™ precisa usar par√™nteses.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Ol√°, ', i, ' vezes')
-   name: '{print} com vari√°vel'
    explanation: Com `{print}` voc√™ precisa usar par√™nteses e v√≠rgulas para imprimir mais itens.
    demo_code: |-
        nome = 'Hedy'
        {print}('meu nome √© ', nome)
-   name: pergunte alguma coisa com {input}
    explanation: Use `{input}` ao inv√©s de `{ask}` para perguntar alguma coisa.
    demo_code: |-
        nome = {input}('Qual √© o seu nome?')
        {print}('Ent√£o o seu nome √© ', nome)
