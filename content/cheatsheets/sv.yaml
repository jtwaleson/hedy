1:
-   name: '{print}'
    explanation: Print something with `{print}`.
    demo_code: '{print} Hall√• och v√§lkommen till Hedy!'
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: '{ask} Vilken √§r din favoritf√§rg?'
-   name: '{echo}'
    explanation: Repetera n√•got med `{echo}`.
    demo_code: |-
        {ask} Vilken √§r din favoritf√§rg?
        {echo} s√• din favoritf√§rg √§r
-   name: '{print} emojis'
    explanation: Skriv en emoji med `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Rita en linje med `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Sv√§ng ritsk√∂ldpaddan med `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: F√∂r att anv√§nda ett ord i programmet kan du namnge det med `{is}`. Du kan v√§lja namnet sj√§lv.
    demo_code: |-
        namn {is} Hedy
        {print} v√§lkommen namn
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`. Se upp! Du beh√∂ver namnge svaret med `{is}`.
    demo_code: |-
        f√§rg {is} {ask} Vilken √§r din favoritf√§rg?
        {print} f√§rg √§r din favorit!
-   name: '{sleep}'
    explanation: '`{sleep}` l√•ter Hedy vila en (eller flera) sekund(er).'
    demo_code: |-
        {print} L√•t mig t√§nka i en sekund
        {sleep}
        {print} Hmm.. Jag beh√∂ver 3 sekunder till...
        {sleep} 3
        {print} Ahaa! Nu vet jag!
-   name: '{is} med sk√∂ldpadda'
    explanation: Namnge ett nummer med `{is}`. Du kan v√§lja namnet sj√§lv.
    demo_code: |-
        vinkel {is} 90
        {turn} vinkel
        {forward} 100
3:
-   name: V√§lj slumpm√§ssig
    explanation: V√§lj ett slumpm√§ssigt ord fr√•n en grupp med `{at}` och `{random}`.
    demo_code: |-
        djur {is} hund, katt, k√§ngru
        {print} djur {at} {random}
-   name: '{add}'
    explanation: '`{add}` l√§gg till en sak `{to_list}` en lista.'
    demo_code: |-
        djur {is} ko, katt
        {add} hund {to_list} djur
-   name: '{remove}'
    explanation: '`{remove}` en sak `{from}` en lista.'
    demo_code: |-
        djur {is} katt, hund, ko
        {remove} hund {from} djur
4:
-   name: '{print}'
    explanation: Skriv exakt med hj√§lp av citationstecken.
    demo_code: '{print} ''Hej och v√§lkommen till Hedy.'''
-   name: '{is}'
    explanation: Namnge en text och `{print}` utan citationstecken.
    demo_code: |-
        namn {is} Hedy
        {print} 'mitt namn √§r ' namn
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: |-
        f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'
        {print} f√§rg ' √§r din favorit!'
5:
-   name: '{print}'
    explanation: Skriv ut exakt med hj√§lp av citationstecken.
    demo_code: '{print} ''Hej och v√§lkommen till Hedy.'''
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: |-
        f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'
        {print} f√§rg ' √§r din favorit!'
-   name: '{if}'
    explanation: G√∂r ett val med `{if}`.
    demo_code: |-
        f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'
        {if} f√§rg {is} gr√∂n {print} 'fin!' {else} {print} 's√•d√§r'
-   name: '{if} med sk√∂ldpadda'
    explanation: G√∂r ett val med `{if}`.
    demo_code: |-
        svar {is} {ask} 'Hur l√•ngt ska jag g√•?'
        {if} svar {is} l√•ngt {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Kolla element med `{in}`.
    demo_code: |-
        snygga_f√§rger {is} gr√∂nt, gult
        f√§rg {is} {ask} 'Vad {is} din favoritf√§rg?'
        {if} f√§rg {in} snygga_f√§rger {print} 'snyggt!' {else} {print} 'meh'
-   name: '{pressed}'
    explanation: Kontrollera om en viss tangent √§r `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''Du tryckte p√• A!'' {else} {print} ''Du tryckte p√• en annan tangent!'''
6:
-   name: '{print}'
    explanation: Skriv ut exakt med citattecken.
    demo_code: '{print} ''5 g√•nger 5 √§r '' 5 * 5'
-   name: '{ask}'
    explanation: Be om en utr√§kning och kolla om den st√§mmer.
    demo_code: |-
        svar = {ask} 'Vad √§r 10 plus 10?'
        {if} svar {is} 20 {print} 'Ja!' {else} {print} 'Hoppsan'
-   name: '`{ask}` och `{if}` med sk√∂ldpadda'
    explanation: Fr√•ga anv√§ndaren hur m√•nga vinklar den vill ha.
    demo_code: |-
        vinklar = {ask} 'Hur m√•nga vinklar?'
        vinkel = 360 / vinklar
        {forward} 50
7:
-   name: '{print}'
    explanation: Skriv ut exakt med citattecken.
    demo_code: '{print} ''Hej och v√§lkommen till Hedy.'''
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: |-
        f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'
        {print} f√§rg ' √§r din favorit!'
-   name: '{if}'
    explanation: V√§lj ett alternativ `{if}`.
    demo_code: |-
        f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'
        {if} f√§rg {is} gr√∂nt {print} 'fint!' {else} {print} 'meh'
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa en kodrad med `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Skriv ut n√•got. Kom ih√•g att anv√§nda citattecken f√∂r att skriva ut exakt.
    demo_code: '{print} ''5 g√•nger 5 √§r '' 5 * 5'
-   name: '{ask}'
    explanation: Fr√•ga efter svaret p√• en addition och kontrollera om det √§r korrekt. Vi kan nu skriva ut tv√• rader.
    demo_code: |-
        svar = {ask} 'Vad √§r 5 plus 5?'
        {if} svar {is} 10
            {print} 'Bra jobbat!'
            {print} 'Svaret var faktiskt ' svar
        {else}
            {print} 'Hoppsan!'
            {print} 'Svaret √§r 10'
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa flera rader.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Kontrollera om en viss tangent √§r `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'Du tryckte p√• A!'
        {else}
            {print} 'Du tryckte p√• en annan tangent'
9:
-   name: '{if} med flera rader'
    explanation: Fr√•ga efter svaret p√• en addition med `{ask}` och se om det √§r korrekt. Nu skriver vi ut tv√• rader.
    demo_code: |-
        svar = {ask} 'Vad √§r 10 plus 10?'
        {if} svar {is} 20
            {print} 'Bra jobbat!!'
            {print} 'Svaret √§r faktiskt ' svar
        {else}
            {print} 'Fel'
            {print} 'Svaret √§r 20'
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa flera rader.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Skriv ut n√•got. Kom ih√•g att anv√§nda citattecken f√∂r exakt utskrift.
    demo_code: '{print} ''5 g√•nger 5 √§r '' 5 * 5'
-   name: '{for} med en lista'
    explanation: Skriv ut alla saker i en lista.
    demo_code: |-
        alla_djur {is} hund, katt, marulk
        {for} djur {in} alla_djur
          {print} 'Jag √§lskar ' djur
11:
-   name: '{for}-loop'
    explanation: Vi kan anv√§nda `{for}` med ett `{range}`.
    demo_code: |-
        {for} r√§knare {in} {range} 1 {to} 5
            {print} r√§knare
-   name: '{ask}'
    explanation: Fr√•ga efter svaret p√• en addition och kolla om det √§r korrekt. Vi kan nu skriva ut tv√• rader.
    demo_code: |-
        svar = {ask} 'Vad √§r 5 plus 5?'
        {if} svar {is} 10
            {print} 'Bra jobbat!'
            {print} 'Ja, svaret var ' svar
        {else}
            {print} 'Hoppsan!'
            {print} 'Svaret √§r 10'
12:
-   name: flyt direkt
    explanation: Decimaltal.
    demo_code: |-
        {print} 'R√§kna p√•!'
        {print} 'Tv√• och en halv plus tv√• och en halv √§r...'
        {print} 2.5 + 2.5
-   name: tilldela text
    explanation: Text med citattecken efter `=`
    demo_code: |-
        namn = 'Roboten Hedy'
        {print} 'Hej ' namn
-   name: citattecken efter `{if}`-j√§mf√∂relse
    explanation: Text med citattecken efter `{if}`.
    demo_code: |-
        namn = {ask} 'Vem √§r du?'
        {if} namn = 'Hedy'
            {print} 'Hall√• d√§r!'
-   name: citattecken i lista
    explanation: En lista med citattecken.
    demo_code: |-
        superhj√§ltar = 'Iron Man', 'Batman', 'St√•lmannen'
        {print} superhj√§ltar {at} {random}
13:
-   name: '{and}'
    explanation: Tv√• delar som b√•da m√•ste vara r√§tt.
    demo_code: |-
        svar1 = {ask} 'Vad √§r 3+2?'
        svar2 = {ask} 'Vad √§r 2+2?'
        {if} svar1 {is} 5 {and} svar2 {is} 4
            {print} 'B√•da svaren √§r r√§tt!'
        {else}
            {print} 'Minst ett svar √§r fel!'
-   name: '{or}'
    explanation: Minst ett av de tv√• delarna m√•ste vara r√§tt. Om b√•da √§r r√§tt g√•r det ocks√• bra.
    demo_code: |-
        svar1 = {ask} 'Vad √§r 3+2?'
        svar2 = {ask} 'Vad √§r 2+2?'
        {if} svar1 {is} 5 {or} svar2 {is} 4
            {print} 'Minst ett svar √§r r√§tt!'
        {else}
            {print} 'B√•da svaren √§r fel!'
14:
-   name: Mindre √§n
    explanation: Vi anv√§nder `<` f√∂r att kolla om det f√∂rsta talet √§r mindre √§n det andra.
    demo_code: |-
        √•lder = {ask} 'Hur gammal √§r du?'
        {if} √•lder < 13
            {print} 'Du √§r yngre √§n jag!'
-   name: St√∂rre √§n
    explanation: Vi anv√§nder `>` f√∂r att kolla om det f√∂rsta talet √§r st√∂rre √§n det andra talet.
    demo_code: |-
        √•lder = {ask} 'Hur gammal √§r du?'
        {if} √•lder > 13
            {print} 'Du √§r √§ldre √§n jag!'
-   name: Lika med
    explanation: Vi anv√§nder `==` f√∂r att kolla om tv√• saker √§r lika.
    demo_code: |-
        svar = {ask} 'Vad √§r 5 * 5?'
        {if} svar == 25
            {print} 'Det st√§mmer!'
-   name: Olika
    explanation: Vi anv√§nder `!=` f√∂r att kolla om tv√• saker √§r olika.
    demo_code: |-
        svar = {ask} 'Vad √§r 5 * 5?'
        {if} svar != 25
            {print} 'Det st√§mmer inte!'
-   name: Mindre √§n eller lika med
    explanation: Vi anv√§nder `<=` f√∂r att kolla om det f√∂rsta talet √§r mindre √§n eller lika med det andra talet.
    demo_code: |-
        √•lder = {ask} 'Hur gammal √§r du?'
        {if} √•lder <= 12
            {print} 'Du √§r yngre √§n jag!'
-   name: St√∂rre √§n eller lika med
    explanation: Vi anv√§nder `>=` f√∂r att kolla om det f√∂rsta talet √§r st√∂rre √§n eller lika med det andra talet.
    demo_code: |-
        √•lder = {ask} 'Hur gammal √§r du?'
        {if} √•lder >= 14
            {print} 'Du √§r √§ldre √§n jag!'
15:
-   name: '{while}'
    explanation: Vi kan anv√§nda `{while}` med skilt fr√•n.
    demo_code: |-
        svar = 0
        {while} svar != 25
            svar = {ask} 'Vad √§r 5 g√•nger 5?'
        {print} 'R√§tt svar har getts'
-   name: Mindre √§n {while}
    explanation: Vi kan ocks√• anv√§nda `{while}` med `<` och `>`.
    demo_code: |-
        antal = 1
        {while} antal < 3
            {print} 'Vi g√∂r det h√§r ' 3 - antal ' g√•nger till'
            antal = antal + 1
        {print} 'Nu √§r det klart'
16:
-   name: hakparenteser
    explanation: Listor med hakparenteser.
    demo_code: |-
        frukt = ['√§pple', 'banan', 'k√∂rsb√§r']
        {print} frukt
-   name: H√§mta ett element fr√•n en lista
    explanation: F√∂r att h√§mta ett element fr√•n en lista anv√§nder vi [tal] s√• frukt[1] betyder att h√§mta den f√∂rsta frukten fr√•n listan!
    demo_code: |-
        frukt = ['banan', '√§pple', 'k√∂rsb√§r']
        f√∂rsta_frukten = frukt[1]
        {print} f√∂rsta_frukten
-   name: H√§mta ett slumpm√§ssigt element fr√•n en lista
    explanation: F√∂r att f√• ett slumpm√§ssigt element fr√•n en lista anv√§nder vi [slump] s√• frukt[slump] betyder att h√§mta en slumpm√§ssig frukt fr√•n listan!
    demo_code: |-
        frukt = ['banan', '√§pple', 'k√∂rsb√§r']
        slumpad_frukt = frukt[{random}]
        {print} slumpad_frukt
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a √§r 1'
        {elif} a == 2:
            {print} 'a √§r 2'
        {else}:
            {print} 'a √§r inte 1 eller 2'
-   name: '{print}'
    explanation: N√§r vi anv√§nder `{for}` m√•ste vi ha ett `:` efter `{for}`-satsen!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Redo eller inte, h√§r kommer jag!'
-   name: '{if}'
    explanation: Vi beh√∂ver g√∂ra samma sak med alla v√•ra `{if}`-satser.
    demo_code: |-
        f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'
        {if} f√§rg == 'gr√∂nt':
            {print} 'Din favoritf√§rg √§r gr√∂nt'
        {else}:
            {print} 'Din favoritf√§rg √§r inte gr√∂nt'
18:
-   name: '{print}'
    explanation: Efter `{print}` beh√∂ver du ha parenteser.
    demo_code: '{print}(''hej!'')'
-   name: '{range}'
    explanation: Efter `{range}` beh√∂ver du ha parenteser.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Hej, g√•nger ', i)
-   name: '{print} med var'
    explanation: Med `{print}` beh√∂ver du anv√§nda parenteser och kommatecken om du skriver ut fler saker.
    demo_code: |-
        namn = 'Hedy'
        {print}('Jag heter ', namn)
-   name: fr√•ga n√•got med {input}
    explanation: Anv√§nd `{input}` ist√§llet f√∂r `{ask}` f√∂r att fr√•ga n√•got.
    demo_code: |-
        namn = {input}('Vad heter du?')
        {print}('S√• du heter ', namn)
