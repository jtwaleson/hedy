title: Documentació de Hedy
join-sections:
-   title: Donant suport a Hedy
    text: '# Hi ha tres maneres de donar suport a Hedy!'
-   title: Millorant l'idioma
    text: |-
        La naturalesa gradual i multi-lingual de Hedy crea molts reptes tècnics interessants.
        Cerqueu aquests problemes a <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank"> Github </a>.
-   title: Traduint Hedy
    text: |-
        No és un programador? Cap problema! Una altra manera de donar suport a Hedy és de <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank"> traduir paraules clau, missatges d'error, aventures són un altre contingut </a>.
        Aquest és l'estat actual, ajudeu -nos a completar un idioma o a afegir -ne un de nou.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Ajuda als professos i comencem
    text: |-
        Hedy està dissenyat per donar suport als professors a proporcionar lliçons de programació a classe. Tenim funcions específiques del professor com l’opció de crear una classe, personalitzar -la i veure com estan els vostres estudiants.
        Si us agrada Hedy, podeu contactar a les escoles que sabeu per ajudar els professors a començar. Us podem ajudar a trobar escoles o professors a través de <a href="https://discord.gg/8yY7dEme9r" target="_blank"> Discord </a>.
learn-more-sections:
-   title: Uneix-te a la comunitat Hedy
    text: |-
        Ens encanta sentir-vos! La millor manera de posar-se en contacte amb nosaltres és unir-se al nostre <a href="https://discord.gg/8yY7dEme9r" target="_blank"> servidor Discord </a>.

        També podeu [enviar-nos un correu electrònic] (mailto: hello@hedy.org "Sobre Hedy").

        I si voleu estar al corrent de les últimes notícies [subscriviu-vos al nostre butlletí](/subscribe).
-   title: Amb profunditat!
    text: |-
        Vols saber més sobre la filosofia i el disseny d'Hedy? Fes una ullada a aquesta xerrada que la Felienne va fer a la conferència StrangeLoop el 2022:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy a les notícies
    text: |-
        Alguns llocs web i diaris han escrit sobre Hedy des del nostre llançament a principis de 2020. En conservem una llista aquí:
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
sections:
-   title: Introducció
    key: intro
    subsections:
    -   title: Què és Hedy?
        text: |-
            Hedy és un llenguatge de programació textual, desenvolupat específicament per a (pre)adolescents (de 10 a 15 anys).
            A diferència dels llenguatges de programació per a nens, com Scratch, Hedy no utilitza blocs de codi sinó codi textual.
            Així que amb Hedy aprendràs a escriure codi com ho fan els programadors reals, però a petits passos amb exercicis lúdics.
            D'aquesta manera, Hedy pot funcionar com un pas per a llenguatges de programació reals com Python d'una manera accessible i sobretot divertida!
            Si voleu saber-ne més, podeu veure aquest <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">vídeo</a> sobre el desenvolupament de Hedy com a llenguatge de programació.
    -   title: Públic objectiu
        text: |-
            Hedy es desenvolupa pensant en els estudiants de primària i secundària (entre 10 i 15 anys).
            És important que els alumnes puguin llegir bé. Recomanem no començar amb Hedy abans que els alumnes hagin assolit almenys un nivell de lectura de 3r de primària.
            Els estudiants (i professors!) No necessiten cap experiència en programació abans de començar amb Hedy.
    -   title: Com funciona?
        text: |-
            Hedy es divideix en nivells, en els quals s'ensenyen noves ordres. Cada nivell conté una varietat d'aventures per practicar les ordres acabades d'aprendre.
            Com a professor, pots decidir quines aventures estan disponibles per als teus alumnes. Faran un restaurant, una calculadora o una casa embruixada en aquest nivell? Dins de cada nivell, les aventures s'organitzen de més fàcil a més difícil.
            Així que els teus alumnes segueixen sent desafiats. Les aventures les poden fer els alumnes individualment, o les podeu utilitzar en una instrucció clàssica.

            Les aventures també inclouen un exemple de codi, per assegurar-se que els professors menys informats digitalment també poden utilitzar Hedy!
            Per descomptat, Hedy també atén els professors creatius als quals els agrada fer els seus propis plans de lliçons i aventures!

            Després de programar totes les aventures d'un cert nivell, els teus alumnes poden posar a prova els seus coneixements en el test.
            Podeu fer un seguiment del treball dels vostres alumnes i el seu progrés a la pàgina de la classe.
    -   title: Dispositius
        text: |-
            Hedy està basat en web, el que significa que funciona en qualsevol dispositiu amb un navegador (Google Chrome, Firefox, Edge, etc.), de manera que els ordinadors portàtils, els chromebooks, les tauletes i fins i tot els telèfons intel·ligents són adequats per utilitzar Hedy.
            No cal que descarregueu res abans de treballar amb Hedy, només cal que aneu al lloc web i ja ho teniu!
    -   title: La comunitat Hedy
        text: |-
            Tots els professors, programadors i altres fans de Hedy poden unir-se al nostre <a href="https://discord.gg/8yY7dEme9r" target="_blank">servidor de Discord</a>. Aquest és el lloc ideal per xerrar sobre Hedy: tenim canals on mostrar els teus projectes i lliçons interessants, canals per informar d'errors i canals per xerrar amb altres professors i amb l'equip de Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Aquí</a> podeu trobar un vídeo sobre com unir-vos a la comunitat de Discord.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Vols seguir el tutorial (un altre cop)? Clica <a href="https://hedy.org/tutorial" target="_blank">aquí</a>
-   title: Teaching preparations
    key: preparations
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: Creating a Class
        text: |-
            Com a professor, podeu crear una classe per als vostres alumnes. En aquesta classe podeu veure els comptes dels estudiants i els seus programes i podeu fer un seguiment del seu progrés.
            Aquest <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">vídeo</a> us mostra com crear ràpidament una classe a Hedy.
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level tresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: Student Accounts
        text: |-
            Hi ha dues maneres de permetre que els teus alumnes s'uneixin a la teva classe: pots crear-los un compte o ells poden crear els seus propis comptes.

            **Creeu comptes per als vostres estudiants**
            La manera més senzilla d'afegir estudiants a la vostra classe és creant-hi un compte. Això es pot fer fent clic al botó "crear comptes d'estudiant" i emplenant els noms d'usuari i les contrasenyes dels mateixos.
            Els estudiants poden iniciar sessió amb el nom d'usuari i la contrasenya que heu triat. Després, poden canviar el seu nom d'usuari o contrasenya si ho desitgen i encara romandran a la teva classe.
            Aquest <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">vídeo</a> mostra com afegir estudiants a la vostra classe de la manera més ràpida i senzilla.

            **Els estudiants fan els seus propis comptes**
            Els vostres estudiants també poden anar al lloc web de Hedy i crear els seus propis comptes, tal com ho heu fet vosaltres. Per incorporar-los a la vostra classe, només han de fer clic a l'enllaç d'invitació.
            Podeu trobar l'enllaç d'invitació a la pàgina de la classe i enviar-lo als vostres alumnes. Tingueu en compte que els vostres estudiants han d'iniciar sessió a Hedy quan facin clic a l'enllaç per tal que funcioni sense problemes.
            També podeu convidar manualment un estudiant a la vostra classe amb el botó "Convida per nom d'usuari".
    -   title: Setting preferred language
        text: |-
            Quan els estudiants creen perfils, se suposa que han d'escollir un "idioma preferit". Hedy sempre es carregarà en aquest idioma seleccionat.
            El canvi d'idioma sempre es pot fer més endavant tornant a navegar a "El meu compte" i a "La meva configuració personal".
            A partir del desembre de 2021, és obligatori establir un idioma preferit per a cada compte d'Hedy.
            Quan el vostre compte o els comptes dels vostres estudiants s'hagin creat abans d'aquesta data, rebreu un missatge que us indicarà que falta un idioma preferit.
            No et preocupis! Aneu a "El meu perfil" i configureu un idioma a la configuració del vostre perfil.
            Fins que no definiu un idioma, Hedy es mostrarà en l'idioma del vostre navegador i, quan aquest idioma no sigui compatible, en anglès.

            **Per a persones que no parlen anglès**
            No només pots canviar l'idioma de les aventures pel teu propi idioma. També podeu triar en quin idioma han d'estar les paraules clau (per exemple, "imprimir" o "preguntar").
            D'aquesta manera, podeu ensenyar als vostres estudiants a codificar amb paraules clau en anglès, però també podeu deixar-los programar en el seu propi idioma. Per exemple, els estudiants holandesos poden utilitzar l'ordre "vraag" en lloc de "preguntar".

            **Vídeo**
            Aquest <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">vídeo</a> us mostra com establir un idioma preferit i canviar les paraules clau al vostre idioma preferit com bé.
    -   title: Storing programs
        text: |-
            Com que ja heu iniciat sessió, veureu el bàner blau amb El meu perfil i Els meus programes.
            Aquestes pestanyes també existeixen per als vostres estudiants. A Els meus programes pots trobar tots els codis que has desat.

            Podeu desar els vostres projectes fàcilment donant-li un nom a la barra blanca i prement el botó verd Desa el codi.
            Tu (i els teus estudiants) també pots compartir programes. Aquests programes es publicaran a la nostra <a href="https://hedy.org/explore" target="_blank">pàgina d'exploració</a>, perquè tothom els pugui veure i utilitzar.
            Si voleu deixar de compartir el vostre programa, aneu a "Els meus programes" i feu clic a "Deixa de compartir".

            The paper plane icon can be used to hand in programs to the teacher of a class. Programs that have been handed is will no longer be editable.
-   title: Teaching with Hedy
    key: teaching
    subsections:
    -   title: Ensenyant amb Hedy
        text: |-
            Hedy conté molts nivells diferents que ensenyen una nova habilitat diferent. Recomanem ensenyar un nivell per lliçó.
            D'aquesta manera, els vostres estudiants tenen el temps d'entendre completament un nou comandament o concepte i practicar-lo abans de passar al següent nivell.
            Utilitzem aquesta estructura a les nostres lliçons: Introducció, Nous conceptes i ordres, anem a treballar, trencaclosques i qüestionaris.
    -   title: Diapositives
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
                        We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introducció
        text: |-
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you start introducing the new lesson.
    -   title: Introducció de nous conceptes i ordres
        text: |-
            Els nous conceptes i ordres poden ser molt difícils d'entendre completament per a alguns estudiants.
            És per això que és important modelar l'ús adequat de les noves ordres als vostres alumnes.
            Especialment als nivells inferiors, on alguns estudiants no tenen cap experiència en programació, pot ser difícil per a ells entendre els nous conceptes abstractes.
            Mostrar molts exemples fa que un concepte abstracte (per exemple: 'Què és una variable?') més reconeixible i més fàcil d'entendre ('Mira, la variable mascota es va convertir en gos'). Hem preparat unes presentacions que et poden ajudar amb això.
    -   title: Anem a treballar
        text: |-
            Cada nivell conté diferents aventures que pots trobar a les pestanyes roses. La primera pestanya rosa explica les noves ordres d'aquest nivell.
            Les següents pestanyes són aventures que els alumnes poden provar i fer les seves.
            Les aventures s'organitzen de la més fàcil a la més difícil, així que us recomanem començar per l'esquerra i el vostre camí cap a la dreta.
            L'última pestanya "Què és el següent" ofereix un petit resum del que aprendràs al següent nivell. Per descomptat, podeu seleccionar les aventures que voleu que facin els vostres alumnes per a cada nivell.
            No sempre han de fer totes les aventures. Cada aventura conté un codi d'exemple, que els estudiants poden provar amb el botó verd.
            El codi d'exemple es copia al camp de treball, on els estudiants poden provar el codi i ajustar-lo per fer-lo seu.
            Estimula els teus alumnes a convertir els codis d'exemple en els seus propis projectes afegint les seves pròpies idees i fent la seva pròpia variació de l'aventura.
    -   title: Proves i trencaclosques
        text: |-
            Per comprovar si els vostres estudiants han recollit tota la informació nova del nivell, podeu deixar que facin el qüestionari.
            El qüestionari conté 10 preguntes d'opció múltiple sobre els nous conceptes i el comandament a aquest nivell.
            Encara no tots els nivells tenen un qüestionari, ja que encara estem construint els qüestionaris.
            Alguns nivells també contenen trencaclosques. Els trencaclosques mostren als estudiants un parell de línies de codi que els estudiants han de posar en l'ordre correcte.

            Aquest <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">vídeo</a> mostra els qüestionaris i els trencaclosques.
    -   title: Avaluació
        text: |-
            Completa la teva lliçó fent una breu avaluació. Què van aprendre els alumnes? Quines dificultats van trobar?
            Com van aprendre dels seus errors? I per descomptat: què van crear?
            Sovint, els estudiants estan molt orgullosos de les seves pròpies creacions, així que és bo estalviar una mica de temps i donar als seus alumnes l'oportunitat de mostrar el seu treball als seus companys.
-   title: Funcions extra Hedy
    key: funcions
    subsections:
    -   title: Estadística del professorat
        text: Aquest <a href="https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s" target="_blank">vídeo</a> us mostra més informació sobre com utilitzar les estadístiques del professor a la vostra classe.
    -   title: Crea la teva pròpia aventura
        text: També és possible que els professors creïn la vostra pròpia aventura. Aquesta <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank"> vídeo </a> us mostra com crear la vostra pròpia aventura com a professor i afegir -la a la vostra classe.
    -   title: Explora la pàgina
        text: |-
            A la <a href="https://hedy.org/explore" target="_blank">pàgina d'exploració</a> podeu veure el treball d'altres usuaris de Hedy. Podeu provar els seus programes i utilitzar-los com a inspiració per crear alguna cosa genial.
            També podeu afegir un programa que hàgiu creat a la pàgina d'exploració fent clic a "Desa i compartiu el codi" a la pantalla de codificació o aneu a Els meus programes i feu clic a "Comparteix".
            Ja no vols compartir la teva feina? Només cal que aneu a "Els meus programes" i feu clic a "Descompartiu".
            Si voleu més informació sobre la pàgina d'exploració, mireu aquest <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">vídeo</a>.
    -   title: Els meus èxits
        text: |-
            Si feu clic al vostre nom d'usuari a l'extrem superior dret de la pantalla, podeu anar a <a href="https://hedy.org/my-achievements" target="_blank">Els meus assoliments</a>. En aquesta pàgina es recullen els vostres assoliments. Els vostres alumnes també tenen una pàgina així.
            Quan passeu el cursor per sobre de la insígnia amb el ratolí, veureu com podeu guanyar-la. També hi ha insígnies amagades, de les quals hauràs d'esbrinar tu mateix com guanyar-les.
            Si voleu més informació sobre els assoliments, mireu aquest <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">vídeo</a>.
    -   title: Puntuacions altes
        text: |-
            En <a href="www.https://hedy.org/highscores" target="_blank">aquesta pàgina</a> podeu veure les puntuacions més altes de tots els usuaris de Hedy.
            En aquest <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">vídeo</a>pots obtenir més informació sobre les puntuacions més altes.
    -   title: Depurador
        text: |-
            El codi (del vostre alumne) no funciona? Hi ha d'haver un error (del codi)! Podeu utilitzar el depurador per trobar l'error.
            El depurador és el botó de marieta a la pantalla de codificació. Si el premeu, podeu executar el vostre codi línia per línia per trobar el vostre error.
            Has trobat l'error? Premeu el botó d'aturada vermell i el depurador s'apagarà.
    -   title: Llegeix en veu alta
        text: Voleu que la sortida del vostre programa es llegeixi en veu alta? A continuació, podeu utilitzar la funció de lectura en veu alta que es troba sota el botó "executa el codi" a la pantalla de codificació.
    -   title: Mode programador
        text: |-
            Distret per totes les aventures, o vols fer un programa llarg? A continuació, consulteu l'interruptor "Mode de programadors" a la part inferior de la pantalla de codificació.
            El mode de programadors et permet a tu i als teus estudiants utilitzar una pantalla de codificació més gran.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: Aquest <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">vídeo</a> us mostra encara més funcions d'Hedy, com ara els fulls de trucs i el commutador de paraules clau.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Errors comuns
    levels:
    -   level: '1'
        sections:
        -   title: Els estudiants s'obliden d'escriure ordres
            example:
                error_text: Per exemple, escriuen una frase sense utilitzar print.
                error_code: Hedy no pot imprimir això
                solution_text: Ensenyeu als vostres estudiants a iniciar sempre una línia de codi amb una ordre.
                solution_code: print Hedy can print this!
        -   title: Students use capitals when typing commands
            example:
                error_text: Commands won't work if they are in capitals.
                error_code: |-
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: Remove the capitals.
                solution_code: |-
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: Students use echo without ask
            example:
                error_text: Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: echo Your name is
                solution_text: Add an ask command to make it work.
                solution_code: |-
                    ask Com et dius?
                    echo Et dius
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_text: And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |-
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: 'In level 1 we have to keep it at this:'
                solution_code: |-
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_text: Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |-
                    forward 300
                    turn 90
                solution_text: In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |-
                    forward 100
                    turn 90
        -   title: 'Turtle: Students use the command backward, but that doesn''t exist'
            example:
                error_text: Backward is not a command.
                error_code: backward 100
                solution_text: 'To make the turtle go backwards, you use the forward command and a negative number. For example:'
                solution_code: forward -100
    -   level: '2'
        sections:
        -   title: Students make typos in their commands
            example:
                error_text: Hedy can't recognize a command with a typo.
                error_code: prinnt Don't make typos!
                solution_text: Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: print Don't make typos!
        -   title: Students forget that the ask command has changed
            example:
                error_text: In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: ask what would you like to eat?
                solution_text: In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: order is ask What would you like to eat?
        -   title: Els estudiants intenten utilitzar la comanda `{echo}`
            example:
                error_text: Per a alguns estudiants pot ser frustrant saber que l'ordre `{echo}` ja no funciona. Per això és molt important explicar els avantatges d'utilitzar variables. Per exemple, podeu utilitzar diverses variables en un codi i les podeu posar a qualsevol lloc que vulgueu en una frase!
                error_code: |-
                    resposta {is} {ask} Per què {echo} ja no funciona?!
                    {echo}
                solution_text: Use a varible instead.
                solution_code: |-
                    resposta {is} {ask} Per què ja no funciona {echo}?
                    {print} answer
        -   title: Students use a variable name or as a normal word
            example:
                error_text: In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |-
                    name is Hedy
                    print Hi my name is name
                solution_text: So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |-
                    name is Hedy
                    print Hi I'm name
        -   title: Students use long variable names containing two words.
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask Which door do you pick?
                solution_text: Add an underscore.
                solution_code: chosen_door is ask which door do you pick?
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: A list can't be printed. You can only print one item from the list with at random.
                error_code: |-
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |-
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |-
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |-
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: Students forget at in at random
            example:
                error_text: Like in the example
                error_code: |-
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: Or they will sometimes put at random at the beginning of the line.
                error_code: |-
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: Students try to use at random without a list
            example:
                error_text: For example
                error_code: |-
                    clubs is Manchester United
                    print clubs at random
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    print Hello
                    mood is ask 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |-
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: 'These are the correct quotation marks:'
                solution_code: |-
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: print 'You're not allowed to type this'
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: After students use if or else they forget to use a second command like print or ask.
                error_code: |-
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: Add the print command to fix it.
                solution_code: |-
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |-
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask 'Which door do you pick?'
                solution_text: Add an underscore.
                solution_code: chosen_door is ask 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: print '5 + 5'
                solution_text: In this code the output screen will print '10'.
                solution_code: print 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: repeat 100 times print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |-
                    repeat 3 times
                    print 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times
                        print 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: |-
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    for i in range 1 to 5
                        print i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: print 2,5 + 2,5
                solution_text: 'This is the correct code:'
                solution_code: print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: print 'my name is Hedy!'
                solution_text: 'This is the correct code:'
                solution_code: print('my name is Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: errors_comuns
    intro: |-
        Pots aprendre dels teus errors, sobretot en la codificació!
        Cometre errors és inevitable i una gran oportunitat per aprendre, però per als professors pot ser un repte trobar la solució correcta per a un error!
        Sobretot a mesura que els codis es fan més llargs i més llargs a mesura que avancen els nivells. És per això que hem fet una llista amb els errors freqüents a cada nivell i les seves solucions.
start-sections:
-   title: La programació textual feta fàcil!
    text: "Moltes escoles i professors d'arreu del món volen ensenyar als seus alumnes la programació. Inicialment, sovint això es fa amb eines lúdiques, que van des del robot Beebot fins a \nScratch Junior o Scratch. Després d'utilitzar aquestes eines, els nens sovint volen passar a llenguatges de programació\
        \ textuals més potents, com Python.\n\nTanmateix, Python és difícil, perquè només està disponible en anglès i requereix que els estudiants aprenguin conceptes i sintaxi de programació complexos alhora.\nHedy és la manera fàcil de començar amb els llenguatges de programació textual! Hedy és d'ús\
        \ gratuït, de codi obert i, a diferència de qualsevol altre llenguatge de programació textual, és les tres coses:\n\n1. Hedy és multilingüe, pots utilitzar Hedy en el teu propi idioma\n2. Hedy és gradual, de manera que pots aprendre un concepte i la seva sintaxi a la vegada\n3. Hedy està dissenyat\
        \ per a l'aula, la qual cosa permet als professors personalitzar completament l'experiència dels seus alumnes"
-   title: Programació multilingüe
    text: Tot i que gairebé tots els llenguatges de programació textual tenen paraules clau en anglès, com ara "for" o "while", Hedy es pot utilitzar en qualsevol idioma! Actualment, admetem 39 idiomes diferents, inclosos el català, l'espanyol, l'àrab, el xinès simplificat i l'hindi. Si el vostre idioma
        no està disponible, sempre podeu començar una traducció nova.
-   title: Aprenentatge pas a pas
    text: Aprendre un llenguatge de programació pot ser aclaparador, ja que els estudiants han d'aprendre conceptes (per exemple, if-else o bucles) i sintaxi (com les cometes o els claudàtors) alhora. A Hedy, els conceptes s'introdueixen primer amb poca sintaxi i després es perfeccionen. Una manera d'aprendre
        científicament provada!
-   title: Preparat per l'aula
    text: |-
        Hedy és apte per a nens a partir de 10 anys i està dissenyat per a l'aula.
        Els professors poden utilitzar els nostres plans de lliçons integrats gratuïts, però també poden crear les seves pròpies lliçons i carregar-les a la interfície d'usuari de Hedy.
-   title: Programació en context
    text: Hedy mostra la programació de la manera més àmplia possible i es pot utilitzar de diverses maneres interessants. Hedy permet la creació d'històries digitals i interactives, dibuixos acolorits que es poden mostrar a la pantalla però també dibuixar amb un plotter o brodats en una samarreta, i
        es poden utilitzar per crear jocs o aplicacions amb botons i accions del teclat.
-   title: És gratuït Hedy?
    text: |-
        Sí! Hedy és "Open Source", cosa que significa que tothom ens pot ajudar a millorar Hedy.
        Podeu trobar el nostre codi a <a href="https://github.com/hedyorg/hedy" target="_blank"> Github </a>.
        Si us agrada Hedy i voleu contribuir, acceptem (i estem molt agraïts) <a href="https://github.com/sponsors/hedyorg" target="_blank"> donacions </a>!
-   title: Haig d'instal·lar res?
    text: No. Hedy treballa al navegador, que és el programa que estàs utilitzant per mirar aquesta pàgina. Probablement Chrome o Edge o Firefox. Hedy també treballa en telèfons i tauletes.
-   title: Necessito experiència en programació per ensenyar amb Hedy?
    text: |-
        No, això no és necessari. Tots els conceptes s'expliquen a les diapositives i a la interfície per als estudiants.
        Si creeu un compte de professor gratuït, també podreu accedir al manual del professor amb informació sobre com ensenyar
        i dels errors freqüents.
