title: Documentation de Hedy
join-sections:
-   title: Supporting Hedy
    text: '# There are three ways in which you can support Hedy!'
-   title: Improving the language
    text: |-
        The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.
        Find those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Translating Hedy
    text: |-
        Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        This is the current status, help us complete a language, or add a new one!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help teachers get started
    text: |-
        Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.
        If you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Appréciez vous Hedy ?
    text: |-
        Nous aimerions en apprendre plus sur votre expérience !
        [Cliquez ici pour nous envoyer un message](mailto :hello@hedy.org "About Hedy")
-   title: Vous avez trouvé une erreur ?
    text: '[Remontez-la sur GitHub](https://github.com/hedyorg/hedy/issues/new/choose)'
-   title: Semaine européenne du code 2020
    text: |-
        Vous voulez en savoir plus sur Hedy ? Consultez cette conférence que Felienne a donnée à la Semaine européenne du code 2020 :

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
sections:
-   title: Introduction
    key: intro
    subsections:
    -   title: Qu'est-ce que Hedy ?
        text: |-
            Hedy est un langage de programmation textuel, spécifiquement développé pour les (pré-)ados (10 à 15 ans).
            Contrairement aux langages de programmation pour les enfants, comme Scratch, Hedy n'utilise pas de blocs de code.
            Ainsi, avec Hedy vous apprendrez à taper du code comme les vrais programmeurs, mais en petites étapes avec des exercices ludiques.
            De cette façon, Hedy peut fonctionner comme un tremplin vers de vrais langages de programmation comme Python d'une manière accessible et surtout amusante !
            Ici vous pouvez regarder une <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">vidéo</a> sur le développement d'Hedy comme langage de programmation.
    -   title: Audience cible
        text: |-
            Hedy a été développée en pensant aux élèves du collège et du lycée (âgés de 10 à 15 ans).
            Il est important que les élèves soient capables de bien lire. Nous recommandons de ne pas commencer avec Hedy avant que les élèves aient atteint au moins un niveau de lecture de niveau 6ème.
            Les élèves (et les professeurs !) n'ont pas besoin d'expérience de programmation avant de commencer avec Hedy.
    -   title: Comment fonctionne Hedy ?
        text: |-
            Hedy est séparé en plusieurs niveaux, chacun permettant d'apprendre de nouvelles commandes. Chaque niveau comprends une variété d'aventures pour pratiquer ces nouvelles commandes.
            En tant que professeur, vous décidez des aventures disponibles à vos élèves. Feront-ils un restaurant, une calculatrice ou une maison hantée, ce niveau-ci ? À chaque niveau, les aventures sont classé par ordre de difficulté croissante, de la plus simple à la plus difficile.
            Vos élèves ont relèveront ainsi continuellement de nouveaux défis. Les aventures peuvent être effectuées par les élèves par eux-même, ou vous pouvez les effectuer en groupe devant la classe.

            Les aventures incluent du code exemple, pour que les professeurs moins technologiquement habiles puissent aussi tiliser Hedy !
            Bien sûr, Hedy est aussi pour les professeurs créatifs qui adorent créer leur propres aventures et plan d'études !

            Après avoir programmé toutes les aventures d'un certain niveau, vos élèves peuvent tester leurs connaissance dans un quiz.
            Vous pouvez suivre le progrès et le travail de vos étudiant depuis la page Classe.
    -   title: Dispositifs
        text: |-
            Hedy est basé sur le web, cela signifie qu'il peut fonctionner sur n'importe quel ordinateur avec un navigateur internet (Firefox, Google Chrome, Edge, etc) donc Hedi fonctionne avec les ordinateurs portables, les chromebooks, les tablettes et même les smartphones.
            Il n'y a pas besoin de télécharger quoi que ce soit pour faire marcher Hedy, il faut juste aller sur le site web et c'est parti !
    -   title: La communauté Hedy
        text: |-
            Tous les enseignants Hedy, programmeurs et autres fans sont les bienvenus sur notre <a href="https://discord.gg/8yY7dEme9r" target="_blank">server Discord</a>. C'est l'endroit idéal pour chatter à propos de Hedy : nous avons des channels où vous pouvez montrer vos projets cools et vos leçons, des channels pour remonter les bugs et des channels pour chatter avec d'autres enseignants et l'équipe Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Ici</a> vous trouverez une vidéo expliquant comment rejoindre notre communauté sur Discord.
-   title: Tutoriel
    key: tutoriel
    subsections:
    -   title: Tutoriel
        text: Vous souhaitez (re)voir le tutoriel <a href="https://hedycode.com/tutorial" target="_blank">? Cliquez-<a href="https://hedycode.com/tutorial" target="_blank">ici</a>.
-   title: Préparatifs
    key: préparations
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: Réglage de la langue
        text: |-
            En tant qu'enseignant, vous pouvez créer une classe pour tes élèves. Dans cette classe, vous pouvez voir les comptes des élèves et leurs programmes et vous pouvez suivre leurs progrès.
            Cette <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">vidéo</a> vous montre comment créer une classe rapidement dans Hedy.
    -   title: Personnaliser ta classe
        text: |-
            Vous pouvez aussi personnaliser votre classe et choisir quelles aventures y sont disponibles. Comme ça, les élèves ne seront pas submergés par la quantité d'aventures et de niveaux, et peuvent se concentrer sur les aventures avec lesquelles vous souhaitez qu'ils s'entrainent.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: Sauvegarde des programmes
        text: |-
            Il y a 2 manières de permettre aux élèves de rejoindre ta classe : vous pouvez créer des comptes pour eux, ou les laisser créer leurs comptes.

            **Pour créer les comptes pour les élèves**
            La manière la plus facile d'ajouter des élèves dans votre classe, est de créer les comptes pour eux. Pour ce faire, cliquez sur le bouton « Créer un compte » et remplissez les champs nom d'utilisateur et mot de passe pour eux.
            Les élèves peuvent alors se connecter avec les noms d'utilisateur et mots de passe que vous avez choisi. Par la suite, ils peuvent changer leurs noms d'utilisateur et mots de passe s'ils le souhaitent, tout en restant dans votre classe.
            Cette <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">vidéo</a> montre le moyen le plus facile et plus rapide d'ajouter des élèves dans votre classe.

            **Les élèves créent leurs comptes**
            Les élèves peuvent aussi aller sur le site Web de Hedy et créer un compte personnel, comme vous l'avez fait pour eux. Pour les ajouter dans votr classe, clique simplement sur le lien d'invitation.
            Vous pouvez aussi ajouter des élèves manuellement en cliquant sur le bouton « Inviter par nom d'utilisateur ».
    -   title: Définir le langage préféré
        text: |-
            Lorsque les élèves créent des profils, ils doivent choisir une « langue préférée ». Hedy sera toujours chargé dans la langue sélectionnée.
            Il est possible de changer cette langue ultérieurement en accédant à nouveau à « Mon compte » et « Mes paramètres personnels ».
            À partir de décembre 2021, il est obligatoire de définir une langue préférée pour chaque compte Hedy.
            Si votre compte ou les comptes de vos élèves ont été créés avant cette date, vous recevrez un message indiquant que la langue préférée est manquante.
            Ne vous inquiétez pas ! Accédez à « Mon profil » et définissez une langue dans les paramètres de votre profil.
            Jusqu'à ce que vous définissiez une langue, Hedy s'affichera dans la langue de votre navigateur et, lorsque cette langue n'est pas prise en charge, en anglais.

            **Pour les non-anglophones**
            Non seulement vous pouvez changer la langue des aventures dans votre propre langue, mais vous pouvez également choisir dans quelle langue les mots-clés (par exemple, 'print' ou 'ask') doivent être affichés.
            De cette façon, vous pouvez enseigner à vos élèves à programmer avec des mots-clés en anglais, mais vous pouvez également les laisser programmer dans leur propre langue. Par exemple, les étudiants néerlandais peuvent utiliser la commande 'vraag' au lieu de 'ask'.

            **Vidéo**
            Cette <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">vidéo</a> vous montre comment définir une langue préférée et changer les mots-clés dans votre langue préférée également.
    -   title: Enregistrement des programmes
        text: |-
            Lorsque vous êtes connecté, vous verrez Mes programmes à côté de votre icône de profil.
            Cette option existe également pour vos élèves. Dans Mes programmes, vous pouvez trouver tous les programmes sur lesquels vous avez travaillé.
            Par défaut, les programmes seront enregistrés dans « Mes programmes » lorsque vous exécutez le code, et ce toutes les 10 secondes, sous leur nom par défaut
            et leur niveau (par exemple : Histoire 5). Si vous souhaitez enregistrer un programme sous un nouveau nom, il vous suffit de taper le nouveau nom dans la barre de nom.
            Actuellement, un seul programme peut être enregistré par niveau, par onglet.

            Vous (et vos élèves) pouvez également partager des programmes en utilisant le bouton de partage à côté des noms des programmes.
            Ces programmes seront publiés sur notre page de <a href="https://hedy.org/explore" target="_blank">découverte</a>, pour que tout le monde puisse les voir et les utiliser.
            Si vous souhaitez annuler le partage de votre programme, allez dans « Mes programmes » et cliquez sur « Annuler le partage ».

            L'icône de l'avion en papier peut être utilisée pour remettre des programmes à l'enseignant d'une classe. Les programmes qui ont été remis ne pourront plus être modifiés.
-   title: L'enseignement avec Hedy
    key: enseigner
    subsections:
    -   title: L'enseignement avec Hedy
        text: |-
            Hedy contient beaucoup de niveaux différents qui enseignent chacun une nouvelle compétence. Nous recommandons d'enseigner un niveau par leçon.
            Cela donne à vos élèves le temps de saisir pleinement une nouvelle commande ou un nouveau concept et de s'exercer avec lui, avant de passer au niveau suivant.
            Nous utilisons cette structure dans nos leçons :
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introduction
        text: |-
            Vous pouvez commencer vos leçons en activant les connaissances préalables de vos élèves : Que savent-ils déjà sur le sujet, qu'ont-ils appris dans la leçon précédente et quelles erreurs ont-ils commises dont ils ont maintenant tiré les leçons ?
            De cette façon, toutes les commandes apprises précédemment et les erreurs fréquemment commises sont fraîches dans la mémoire de vos élèves, lorsque vous commencez à présenter la nouvelle leçon.
    -   title: Introduction de nouveaux concepts et de nouvelles commandes
        text: |-
            Les nouveaux concepts et commandes peuvent être très difficiles à comprendre pour certains élèves.
            C'est pourquoi il est important de montrer aux élèves comment utiliser correctement les nouvelles commandes.
            Surtout aux niveaux inférieurs, où certains élèves n'ont aucune expérience en programmation, il peut leur être difficile de comprendre les nouveaux concepts abstraits.
            Présenter de nombreux exemples rend un concept abstrait (par exemple : "Qu'est-ce qu'une variable ?") plus reconnaissable et plus facile à comprendre ("Regardez, la variable animal a changé en chien").
    -   title: Commençons le travail
        text: |-
            Chaque niveau contient différentes aventures que vous pouvez trouver dans les onglets roses. Le premier onglet rose explique les nouvelles commandes de ce niveau.
            Les onglets suivants sont des aventures que les élèves peuvent essayer et créer eux-mêmes.
            Les aventures sont classées du plus facile au plus difficile, nous vous recommandons donc de commencer par la gauche et de vous diriger vers la droite.
            Le dernier onglet "What's next" donne une petite idée de ce que vous apprendrez dans le niveau suivant. Bien entendu, vous pouvez sélectionner les aventures que vous voulez faire faire à vos élèves pour chaque niveau.
            Ils ne sont pas obligés de faire toutes les aventures. Chaque aventure contient un exemple de code, que les élèves peuvent essayer à l'aide du bouton vert.
            Le code d'exemple est copié dans le champ de travail, où les élèves peuvent essayer le code et l'adapter pour se l'approprié.
            Encouragez vos élèves à transformer les codes d'exemple en leurs propres projets en ajoutant leurs propres idées et en créant leur propre variation de l'aventure.
    -   title: Quiz et puzzles
        text: |-
            Pour vérifier que vos élèves ont assimilé toutes les nouvelles informations dans un niveau, vous pouvez les inviter à répondre au quiz.
            Le quiz comporte 10 questions portant sur les nouveaux concepts et commandes de ce niveau.
            Tous les niveaux n’ont pas encore de quiz, nous sommes encore en train de les construire.
            Certains niveaux comportent également des puzzles. Les puzzles montrent aux étudiants quelques lignes de code que les élèves doivent place dans le bon ordre.

            Cette <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">vidéo</a> présente les quiz et les puzzles..
    -   title: Évaluation
        text: |-
            Terminez votre leçon par une brève évaluation. Qu'ont appris les élèves ? Quelles difficultés ont-ils rencontrées ?
            Comment ont-ils appris de leurs erreurs ? Et bien sûr, qu'ont-ils créé ? Qu'ont-ils créé ?
            Les élèves sont souvent très fiers de leurs propres créations. Il est donc intéressant de prendre le temps de donner à vos élèves la possibilité de montrer leur travail à leurs camarades de classe.
-   title: Caractéristiques supplémentaires de Hedy
    key: caractéristiques
    subsections:
    -   title: Statistiques des enseignants
        text: Cette [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) donne plus d'informations sur comment utiliser les statistiques des enseignants dans votre cours.
    -   title: Créez votre propre aventure
        text: Les enseignants peuvent également créer leur propre aventure. [Cette vidéo] (https://www.youtube.com/watch?v=A0zbXpxX4q4) vous montre comment créer votre propre aventure en tant qu'enseignant et l'ajouter à votre (vos) cour(s).
    -   title: Explorer la page
        text: |-
            Sur la page [explorer](https://hedy.org/explore), vous pouvez voir le travail d'autres utilisateurs de Hedy. Vous pouvez essayer leurs programmes et vous en inspirer pour créer vous-même quelque chose de cool.
            Vous pouvez également ajouter vous-même un programme que vous avez créé à la page d'exploration en cliquant sur "Enregistrer et partager le code" dans l'écran de codage ou en allant dans "Mes programmes" et en cliquant sur "Partager".
            Vous ne voulez plus partager votre travail ? Il vous suffit d'aller dans "Mes programmes" et de cliquer sur "Annuler le partage".
            Si vous souhaitez obtenir davantage d'informations sur la page d'exploration, consultez cette [vidéo] (https ://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: Mes réalisations
        text: |-
            Si vous cliquez sur votre nom d'utilisateur dans le coin supérieur droit de votre écran, vous pouvez aller sur [Mes réalisations] (https://hedy.org/my-achievements). Sur cette page, vos réalisations sont rassemblées. Vos élèves disposent également d'une telle page.
            Lorsque vous passez la souris sur le badge, vous voyez comment l'obtenir. Il existe également des badges cachés, que vous devrez découvrir par vous-même.
            Si vous voulez plus d'informations sur les réalisations, regardez cette [vidéo] (https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: Les meilleurs scores
        text: |-
            Sur [cette page](https://hedy.org/highscores), vous pouvez voir les meilleurs scores de tous les utilisateurs de Hedy.
            Dans cette [vidéo](https://www.youtube.com/watch?v=IqTiUkBVTo8), vous en apprendrez davantage sur les meilleurs scores.
    -   title: Débogueur
        text: |-
            Votre code (ou celui de l'élève) ne fonctionne pas ? Il doit y avoir un bogue (une erreur de codage) ! Vous pouvez utiliser le débogueur pour trouver l'erreur.
            Le débogueur est le gros bouton de votre écran de codage. Si vous appuyez sur ce bouton, vous pouvez exécuter votre code ligne par ligne pour trouver votre erreur.
            Avez-vous trouvé l'erreur ? Appuyez sur le bouton rouge d'arrêt et le débogueur s'éteindra.
    -   title: Lire à haute voix
        text: Voulez-vous que la sortie de votre programme soit lue à haute voix ? Dans ce cas, vous pouvez utiliser la fonction de lecture à haute voix qui se trouve sous le bouton « exécuter le code » dans votre écran de codage.
    -   title: Mode programmeur
        text: |-
            Vous êtes distrait par toutes les aventures, ou vous voulez faire un long programme ? Alors, regardez le bouton « Mode Programmateur » en bas de votre écran de codage.
            Ce mode vous permet, à vous et à vos élèves, d'utiliser un écran de codage plus grand.
    -   title: Aide-mémoire
        text: |-
            A tous les niveaux il y a un bouton avec cet émoji 🤔. Vous et vos élèves peuvent y trouver les « Aide-mémoire ». Sur ces aide-mémoire, vous pouvez trouver toutes les commandes disponibles à chaque niveau sous leur forme correcte.

            Donc, si vous avez oublié comment une commande fonctionne, c'est très simple, jetez un œil à l'aide-mémoire.
    -   title: Vidéo
        text: Cette [vidéo] (https://www.youtube.com/watch?v=c4MntPPgl1Y) vous présente d'autres fonctionnalités de Hedy, comme les aides-mémoire et le sélecteur de clavier.
-   title: Réponses aux exercices
    key: réponses
    intro: |-
        Les réponses à tous les exercices se trouvent dans le profil public du compte utilisateur « Hedy_answers ». Nous encourageons souvent les élèves à utiliser leur propre créativité dans leur réponses, c'est pourquoi ces réponses sont, au mieux, des guides montrant à quoi peut ressembler une réponse correcte.

        Pour ouvrir le profile « Hedy_answer », cliquez <a href="https://hedy.org/user/hedy_answers" target="_blank">ici</a>.
-   title: Erreurs fréquemment commises
    levels:
    -   level: '1'
        sections:
        -   title: Les élèves oublient de taper les commandes
            example:
                error_text: Par exemple, ils tapent une phrase sans `{print}`.
                error_code: Hedy ne peut pas afficher ça.
                solution_text: Apprenez à vos élèves à toujours commencer une ligne par une commande.
                solution_code: '{print} Hedy peut imprimer ceci !'
        -   title: Les élèves utilisent des majuscules lorsqu'ils tapent des commandes
            example:
                error_text: Les commandes ne fonctionneront pas si elles sont en majuscules.
                error_code: |-
                    Demander Pourquoi mon code ne marche pas ?
                    Imprime Parce que j'utilise des commandes avec des majuscules.
                solution_text: Enlevez les majuscules.
                solution_code: |-
                    {ask} Pourquoi mon code marche-t-il ?
                    {print} Parce que j'ai enlevé les majuscules !
        -   title: Les élèves utilisent `{echo}` sans `{ask}`
            example:
                error_text: '`{echo}` est fait pour répéter une réponse après une commande `{ask}`. Sans `{ask}`, `{echo}` ne fera rien.'
                error_code: '{echo} Ton nom est'
                solution_text: Ajoute une commande `{ask}` pour que cela fonctionne.
                solution_code: |-
                    {ask} Quel est votre nom ?
                    {echo} Ton nom est
        -   title: Les élèves veulent que le mot répété (variable) se trouve au milieu d'une phrase
            example:
                error_text: Et ils ont raison ! C'est pourquoi ils apprendront à utiliser les variables au niveau suivant.
                error_code: |-
                    {ask} Quel est le langage de programmation le plus amusant ?
                    {echo} est le meilleur !
                solution_text: 'Au niveau 1, nous devons nous en tenir à cela :'
                solution_code: |-
                    {ask} Quel est le langage de programmation le plus amusant ?
                    {echo} Le meilleur est...
        -   title: 'Tortue : Les élèves laissent la tortue sortir de l''écran'
            example:
                error_text: Souvent, les élèves aiment essayer les grands nombres en utilisant la tortue, ce qui fait sortir la flèche de l'écran.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: Dans l'exemple, les élèves ont tendance à penser que la commande "tourne" ne fonctionne pas. Bien qu'elle fonctionne, vous ne pouvez pas voir son effet en dehors de l'écran. Utilisez des nombres plus petits pour éviter cela.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: 'Tortue : Les élèves utilisent la commande "recule", mais elle n''existe pas'
            example:
                error_text: Recule n'est pas une commande.
                error_code: recule 100
                solution_text: 'Pour faire reculer la tortue, il faut utiliser la commande avance et un nombre négatif. Par exemple :'
                solution_code: avance -100
    -   level: '2'
        sections:
        -   title: Les élèves font des fautes de frappe dans leurs commandes
            example:
                error_text: Hedy ne peut pas reconnaître une commande contenant une faute de frappe.
                error_code: afffiche Ne faites pas de fautes de frappe !
                solution_text: Apprenez à vos élèves à lire les messages d'erreur. Ils pourront ainsi découvrir eux-mêmes ce qui n'a pas fonctionné.
                solution_code: affiche Ne fais pas de fautes de frappe !
        -   title: Les élèves oublient que la commande "demande" a changé
            example:
                error_text: Dans ce niveau, les élèves apprennent ce que sont les variables. La commande demande nécessite également une variable, mais les élèves l'oublient.
                error_code: demande Qu'aimeriez-vous manger ?
                solution_text: Dans ce niveau, tu dois dire à Hedy où enregistrer ta réponse pour qu'elle puisse être utilisée plus tard. C'est ce qu'on appelle une variable.
                solution_code: demande Qu'aimeriez-vous manger?
        -   title: Les élèves essaient d'utiliser la commande `{echo}`
            example:
                error_text: Pour certains élèves, il peut être frustrant d'apprendre que la commande `{echo}` ne fonctionne plus. C'est pourquoi il est très important d'expliquer les avantages de l'utilisation des variables. Par exemple, vous pouvez utiliser plusieurs variables dans un code, et vous pouvez
                    les placer où vous voulez dans une phrase !
                error_code: |-
                    réponse {is} {ask} Pourquoi {echo} ne fonctionne plus?!
                    {echo}
                solution_text: Utilise plutôt une variable.
                solution_code: |-
                    réponse {is} {ask} Pourquoi {echo} ne fonctionne-t-il plus ?
                    {print} réponse
        -   title: Les élèves utilisent un nom de variable ou un mot normal
            example:
                error_text: Dans l'exemple ci-dessous, le mot "nom" est utilisé comme variable, mais aussi comme texte normal. Le résultat de ce code sera "Bonjour mon Hedy est Hedy".
                error_code: |-
                    nom est Hedy
                    affiche Bonjour mon nom est nom
                solution_text: N'utilise donc pas un mot que vous voulez utiliser dans le texte comme nom de variable. Au niveau 4, ce problème est résolu à l'aide de guillemets.
                solution_code: |-
                    nom est Hedy
                    affiche Bonjour, je suis nom
        -   title: Les élèves utilisent des noms de variables longs contenant deux mots.
            example:
                error_text: Une variable doit être nommée avec un seul mot. Vous pouvez utiliser un tiret bas pour relier deux mots. Cela compte pour un seul mot.
                error_code: porte choisie est demande Quelle porte choisissez-vous ?
                solution_text: Ajoute un tiret bas.
                solution_code: porte_choisie est demande Quelle porte choisissez-vous ?
        -   title: Les élèves peuvent utiliser deux noms différents pour la même variable
            example:
                error_text: Dans cet exemple, l'élève a utilisé "cheval" et "nom" pour les mêmes variables.
                error_code: |-
                    cheval est demande Quel est le nom de votre cheval ?
                    affiche Votre cheval est appelé nom
                solution_text: Vérifiez toujours si la variable porte le même nom dans tout le code. De légères différences peuvent être difficiles à repérer (par exemple les pluriels), mais elles interfèrent avec le code.
                solution_code: |-
                    nom est demande Quel est le nom de votre cheval ?
                    affiche Votre cheval s'appelle nom
    -   level: '3'
        sections:
        -   title: Les élèves essaient d'imprimer des listes en entier
            example:
                error_text: Une liste ne peut pas être imprimée. Vous ne pouvez imprimer qu'un seul élément de la liste, au hasard.
                error_code: |-
                    courses est pommes, lait, chocolat
                    affiche courses
                solution_text: Pour afficher une liste de toutes les courses, il suffit de les placer après une commande affiche. Sinon, vous pouvez utiliser la liste pour imprimer un article au hasard.
                solution_code: |-
                    {print} pommes, lait, chocolat

                    ou

                    courses {is} pommes, lait, chocolat
                    {affiche} épicerie {at} {random}
        -   title: Le élèves utilisent le nom de la variable ou d'une liste comme du texte normal
            example:
                error_text: Ce problème s'est probablement produit au niveau 2 également. Désormais, il peut également se produire avec les listes.
                error_code: |-
                    nom {is} Hedy
                    {print} Bonjour, mon nom est nom

                    ou

                    animal {is} rhinocéros, abeille, cygne
                    {affiche} Le meilleur animal est... animal {at} {random}
                solution_text: N'utilisez pas les noms de variables ou de listes dans du texte normal à imprimer. Au niveau 4, ce problème est résolu avec des guillemets.
                solution_code: |-
                    nom est Hedy
                    affiche Bonjour je suis nom

                    ou

                    animaux est rhinocéros, abeille, cygne
                    affiche Le meilleur animal est... animal au hasard
        -   title: Les élèves oublient `{at}` dans `{at}` `{random}`
            example:
                error_text: Comme dans l'exemple
                error_code: |-
                    oiseaux est moineau, mouette, corneille
                    affiche oiseaux hasard
                solution_text: Ce problème est résolu en ajoutant le mot `{at}`
                solution_code: |-
                    oiseaux {is} moineau, mouette, corneille
                    {print} oiseaux {at} {random}
        -   title: Les élèves oublient d'utiliser la commande `{print}` quand ils utilisent aussi la commande `{at}` `{random}`
            example:
                error_text: Ou alors ils vont parfois mettre `{at}` `{random}` au début d'une ligne.
                error_code: |-
                    fruit {is} pomme, cerise, banane
                    fruit {at} {random}
                solution_text: Insistez auprès de vos élèves sur le fait que vous avez toujours besoin de la commande `{print}` pour afficher un texte.
                solution_code: |-
                    fruit {is} pomme, cerise, banane
                    {print} fruit {at} {random}
        -   title: Les élèves oublient d'utiliser des virgules dans leurs listes
            example:
                error_text: Dans une liste, les éléments sont séparés par une virgule.
                error_code: |-
                    pizzas {is} champignons thon quatre saisons
                    {print} pizzas {at} {random}
                solution_text: Chaque élément de votre liste doit être suivi d'une virgule
                solution_code: |-
                    pizzas {is} champignons, thon, quatre saisons
                    {print} pizzas {at} {random}
        -   title: Les élèves essaient d'utiliser `{at}` `{random}` avec autre chose qu'une liste
            example:
                error_text: Par exemple
                error_code: |-
                    clubs {is} Machester United
                    {print} clubs {at} {random}
                solution_text: Hedy ne peut pas afficher quelque chose au hasard, parce qu'il n'y a pas de liste à partir de laquelle choisir.
                solution_code: |-
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Les élèves essaient d'utiliser les fonctions ajouter/supprimer sans liste
            example:
                error_text: Dans l'exemple ci-dessous, "noms" n'est pas une liste, mais une variable. Vous ne pouvez rien y ajouter.
                error_code: |-
                    noms {is} Jacques
                    ton_nom {is} {ask} Qui es-tu ?
                    {add} ton_nom {to} noms
                    {print} noms {at} {random}
                solution_text: Il faut d'abord qu'il y ait une liste, donc vous devez ajouter un deuxième nom pour transformer les noms en liste, par exemple Amy. Si vous ne voulez pas d'Amy dans votre liste, vous pouvez utiliser remove pour la supprimer ensuite.
                solution_code: |-
                    noms {is} Jacques, Amy
                    ton_nom {is} {ask} Qui es-tu ?
                    {add} ton_nom {to} noms
                    {print} noms {at} {random}
        -   title: Les élèves oublient d'utiliser `{to}`/`{from}` dans `{add}`/`{remove}`
            example:
                error_text: Sans `{to}`/`{from}`, la commande `{add}`/`{remove}` ne marchera pas.
                error_code: |-
                    aventures {is} histoire, perroquet, dé
                    choix {is} Quelle aventure tu préfères?
                    {add} choix
                    {remove} dé
                    {print} J'aime aventures {at} {random}
                solution_text: Hedy doit savoir à quelle liste l'élément doit être ajouté/supprimé.
                solution_code: |-
                    aventures {is} histoire, perroquet, dé
                    choix {is} Quelle aventure préférez-vous ?
                    {add} choix {to} aventures
                    {remove} dé {from} aventures
                    {print} J'aime aventures {at} {random}
    -   level: '4'
        sections:
        -   title: Les élèves oublient d'utiliser les guillemets des deux côtés du texte
            example:
                error_text: Dans ce niveau, il affiche et demande ont besoin de guillemets. Un avant le texte et un après.
                error_code: |-
                    affiche Hello
                    humeur demande 'Comment vas-tu ?
                solution_text: Ajoute correctement les guillemets.
                solution_code: |-
                    affiche 'Hello'
                    humeur est demande 'Comment vas-tu?'
        -   title: Les élèves utilisent les mauvais guillemets
            example:
                error_text: Il est important de commencer votre cours en vérifiant si les étudiants savent comment taper un guillemet correctement. Sinon, ils pourraient utiliser les "doubles guillemets" ou les guillemets inversés ` .
                error_code: |-
                    print `Bienvenue au restaurant`
                    nourriture is demande "Que voulez-vous commander?"
                solution_text: 'Ce sont les guillemets corrects :'
                solution_code: |-
                    affiche 'Bienvenue au restaurant'
                    nourriture est demande 'Que voulez-vous commander ?'
        -   title: Les élèves utilisent une apostrophe dans leur texte
            example:
                error_text: A partir de ce niveau, les apostrophes ne sont plus autorisées. Elles sont souvent utilisées en français pour signifier l'élision de voyelles comme dans l'entrée, par exemple.
                error_code: affiche 'Vous n'êtes pas autorisé à entrer ceci'
                solution_text: Vous pouvez choisir d'utiliser la mauvaise grammaire et d'omettre l'apostrophe. Vous pouvez aussi utiliser le ` comme apostrophe.
                solution_code: |-
                    print 'T'es autorisé à entrer ceci'
                    print 'Et t`es capable de faire ceci'
    -   level: '5'
        sections:
        -   title: Les élèves oublient d'utiliser `{print}` dans une commande `{if}`
            example:
                error_text: Après avoir utilisé `{if}`ou `{else}`, les élèves oublient d'utiliser une deuxième commande comme `{print}` ou `{ask}`.
                error_code: |-
                    si nom est Hedy 'Super!'
                    sinon 'Hedy est mieux!'
                solution_text: Add the print command to fix it.
                solution_code: |-
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: Les élèves oublient encore les guillemets des deux côtés
            example:
                error_text: If commandos can get very long and students tend to forget to use quotes.
                error_code: |-
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: Les élèves utilisent des guillemets autour des noms de variables
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: Les élèves utilisent des noms de variable longs contenant 2 mots
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask 'Which door do you pick?'
                solution_text: Add an underscore.
                solution_code: chosen_door is ask 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: print '5 + 5'
                solution_text: In this code the output screen will print '10'.
                solution_code: print 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: repeat 100 times print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |-
                    repeat 3 times
                    print 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times
                        print 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: |-
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    for i in range 1 to 5
                        print i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: print 2,5 + 2,5
                solution_text: 'This is the correct code:'
                solution_code: print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: print 'my name is Hedy!'
                solution_text: 'This is the correct code:'
                solution_code: print('my name is Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: erreurs_courantes
    intro: |-
        Vous pouvez apprendre de vos erreurs, surtout en codage !
        Il est inévitable de faire des erreurs, et c'est une excellente occasion d'apprendre, mais pour les enseignants, il peut être difficile de trouver la bonne solution à une erreur !
        D'autant plus que les codes deviennent de plus en plus longs au fil des niveaux. C'est pourquoi nous avons dressé une liste des erreurs fréquemment commises dans chaque niveau, ainsi que leurs solutions.
start-sections:
-   title: Qu’est-ce qu’un langage de programmation progressif ?
    text: |-
        Apprendre à programmer peut être difficile. Non pas que programmer *est* difficile en soit ! Mais il y a beaucoup de règles à mémoriser, comme quand on apprend le français.
        De la même manière que quand on apprend à lire ou à écrire, tu auras besoin de beaucoup d’entraînement pour apprendre à programmer.

        Aujourd'hui, tu peux lire ce texte facilement. Mais te souviens-tu de quand tu as appris à lire ? Au début ça te prenait un peu de temps de lire syllabe par syllabe !
        C’est vrai pour la programmation aussi : ça peut être difficile au début, mais ça devient de plus en plus facile !

        Le bon côté de Hedy, c’est qu’il est *progressif*. Ça veut dire que tu ne dois pas apprendre toutes les règles en même temps.
        Les premiers niveaux n’ont que quelques règles, ce qui te permet de t’y habituer tranquillement.
        À chaque nouveau niveau, nous introduisons de nouvelles règles, nous ajoutons de nouvelles commandes à celle que tu as déjà apprises. Ces commandes sont des instructions pour l’ordinateur.
-   title: Pourquoi Hedy est progressif ?
    text: |-
        Felienne, la créatrice de Hedy, explique dans cette vidéo (en anglais) pourquoi Hedy est progressif.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer ; autoplay ; encrypted-media ; gyroscope ; picture-in-picture" allowfullscreen></iframe>
-   title: Multi-lingual programming
    text: While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a
        a new translation.
-   title: Built for the classroom
    text: |-
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: À qui est destiné Hedy ?
    text: Hedy est destiné à tous les enfants qui veulent apprendre à programmer ! Il suffit de savoir lire le français.
-   title: Dois-je déjà savoir programmer ?
    text: Non, ce n'est pas nécessaire. Cependant, si tu as déjà programmé avec Scratch ou Python, certaines commandes te seront familières.
-   title: Hedy est-il gratuit ?
    text: |-
        Oui ! Hedy est aussi 'Open source', ce qui signifie que n’importe qui sachant programmer peut nous aider à améliorer Hedy.
        Si vous aimez Hedy, nous aimerions un [don](https://github.com/sponsors/hedyorg?locale=en) !
-   title: Que dois-je installer ?
    text: Rien. Hedy fonctionne dans le navigateur avec lequel tu lis cette page. Probablement Chrome, Edge, ou Firefox. Hedy fonctionne aussi sur ton smartphone ou ta tablette.
