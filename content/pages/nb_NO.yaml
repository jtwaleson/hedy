title: Hedy dokumentasjon
join-sections:
-   title: Supporting Hedy
    text: '# There are three ways in which you can support Hedy!'
-   title: Improving the language
    text: |-
        The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.
        Find those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Translating Hedy
    text: |-
        Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        This is the current status, help us complete a language, or add a new one!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help teachers get started
    text: |-
        Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.
        If you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Liker du Hedy?
    text: |-
        Vi vil gjerne høre fra deg!

        [Klikk her for å sende oss en epost](mailto:hello@hedy.org "About Hedy")
-   title: Har du funnet en feil?
    text: '[Fortell oss om det på GitHub](https://github.com/hedyorg/hedy/issues/new/choose)'
-   title: Har du lyst til å hjelpe?
    text: |-
        Den letteste måten er ved å hjelpe til med [oversettelse av Hedy](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        Her er nåværende status, hjelp oss å ferdigstille et språk, eller legg til et nytt et.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Oversettelse-status" /></a>
sections:
-   title: Introduksjon
    key: intro
    subsections:
    -   title: Hva er Hedy?
        text: |-
            Hedy er et tekstlig programmeringsspråk, spesifikt utviklet for barn og ungdom i alderen 10 til 15 år.
            I motsetning til programmeringsspråk laget for barn, som eks. Scratch, så bruker Hedy tekst istedenfor kode-blokker.
            Med Hedy lærer du å skrive kode slik som ekte programmerere gjør, men i små steg med kjekke og morsomme øvelser.
            På denne måten kan Hedy fungere som et springbrett til ekte programmeringsspråk som Python på en tilgjenglig og morro måte,
            Du kan se en [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) om utviklingen av Hedy som et programmeringsspråk her.
    -   title: Målgruppe
        text: |-
            Hedy er utviklet for barne- og ungdomskole elever i alderen 10 til 15 år.
            Det er viktig at elevene er flink til å lese før de begynner med Hedy. Vi anbefaler å vente med å begynne med Hedy til elevene har oppnådd leseferdigheter tilsvarende et minimumsnivå av tredje klasse.
            Elever (og lærerere!) trenger ikke tidligere erfaring med programmering for å starte med Hedy.
    -   title: Hvordan fungerer Hedy?
        text: <Todo>
    -   title: Å undervise med Hedy
        text: |-
            Hedy er delt opp i nivåer hvor man lærer seg nye kommandoer og regler. Hvert nivå inneholder et varierende sett med øvelser før å øve på de nylig lærte kommandoene.
            Øvelsene kan gjøres av elevene på egenhånd, eller som del av klassisk undervisning. I bruksanvisningen for lærerer vil det finnes undervisningplan for hvert av nivåene.
            Undervisningsplanene og øvelsene har steg for steg forklaringer for å sikre at lærere med mindre digital erfaring også klarer å bruke Hedy!
            Hedy støtter også kreative lærere som foretrekker å lage sine egne undervisningsplaner og øvelser!
    -   title: Enheter
        text: |-
            Hedy er webbasert. Dette betyr at Hedy fungerer på enhver digital enhet som har en nettleser (Google Chrome, Firefox, Edge, osv.). Hedy fungerer på laptoper, chromebooks, nettbrett og til og med smarttelefoner!
            Man trenger ikke å laste ned noe for å bruke Hedy, bare gå til nettsiden og sett i gang!
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Do you want to follow the tutorial (again)? Click [here](https://hedy.org/tutorial)
-   title: Forberedelser
    key: forberedelser
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: Sett ditt foretrukke språk
        text: |-
            Når elevene lager en profil må de velge et 'foretrukke språk'. Hedy vil alltid lastet på det valgte språket.
            Det foretrukke språket kan alltids endres senere ved å gå til 'Min profil' og velge 'Mine personlige innstillinger'.
            Fra desember 2021 er det obligatorisk å sette et foretrukket språk for hver Hedy konto.
            For kontoer opprettet tidligere enn desember 2021 vil man få en melding om at foretrukket språk mangler.
            Dette er ikke noe problem, bare gå til 'Min profil' og velg et språk i 'Mine personlige innstillinger'.
            Frem til du velger et språk vil Hedy vises i språket som er valgt i nettleserinnstillingene. Hvis det språket ikke støttes velges automatisk engelsk.
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level tresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: Lagring av programmer
        text: |-
            Nå når du er logget inn vil du se den blå menylinjen med 'Mine programmer' og din profil.
            Disse knappene vil også vises til elevene dine også. I 'Mine programmer' vil du finne all koden som lagres.

            Du kan lagre prosjektene dine ved å gi prosjektet et navn i den hvite linjen, for så å lagre ved å trykke på den grønne 'Lagre Kode' knappen

            La programmeringsmorroen begynne!
    -   title: Setting preferred language
        text: |-
            When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.
            Changing this language can always be done later on by navigation to 'My account' and 'My personal settings' again.
            From December 2021 on setting a preferred language is obligatory for each Hedy account.
            When your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.
            Don't worry! Navigate to 'My profile' and set a language in your profile settings.
            Until you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.

            **For non-English speakers**
            Not only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.
            This way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.
    -   title: Storing programs
        text: |-
            Because you are now logged in, you'll see the blue banner with My profile and My programs.
            These tabs exist for your students too. In My programs you can find all the codes that you've saved.

            You can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.
            You (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.
            If you want to unshare your program, go to 'My programs' and click 'Unshare'.
-   title: Å undervise med Hedy
    key: undervise
    subsections:
    -   title: Undervise med Hedy
        text: |-
            Hedy inneholder flere nivåer som hver for seg vil lære elevene en ny ferdighet. Vi anbefaler å undervise i et nivå per undervisningstime.
            Dette gir elevene dine tid til å virkelig lære seg en ny kommando eller et nytt konsept, samt at de får tid til å øve skikkelig før de går videre til neste nivå.
            Vi bruker denne strukturen i våre undervisningstimer:
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introduksjon
        text: |-
            Du kan begynne undervisningen med å aktivere elevenes tidligere kunnskap: Hva har de lært sålangt, hva lærte de forrige gang og hvilke feil gjorde de som de nå har lært av?
            På denne måten vil alle tidligere lærte kommandoer og vanlige feil være lett tilgjengelig i elevenes hukommelse når du begynner å introdusere det nye læringsmålet.
    -   title: Introduksjon av nye konsepter og kommandoer
        text: |-
            Det kan være veldig vanskelig for noen elever å forstå nye konsepter og kommandoer.
            Derfor er det svært viktig å gi gode eksempler på hvordan de nye kommandoene skal brukes.
            Spesielt i de innledende nivåene, når elevene ikke har erfaring med programmering i det hele tatt, kan det være vanskelig for elevene å forstå de nye abstrakte konseptene.
            Å vise mange eksempler vil hjelpe med å gjøre et abstrakt konsept mer gjennkjennelig og lettere å forstå.
            Eksempelvis: 'Hva er en variabel?', 'Se, variabelen kjæledyr endret seg til å være hund'.
    -   title: La oss komme i gang
        text: |-
            Hvert nivå inneholder forskjellige eventyr som du kan finne i de rosa fanene. Den første rosa fanen forklarer de nye kommandoene som introduseres i dette nivået.
            De neste fanene er eventyr som elevene kan bryne seg på og gjøre til sine egne prosjekter.
            Eventyrene er sortert fra lettest til vanskeligst. Vi anbefaler derfor å begynne til venstre, og jobbe deg mot høyre.
            Den siste fanen 'Hva skjer neste gang' gir en liten forsmak på hva du skal lære om i neste nivå. Du kan selvfølgelig velge hvilke eventyr du ønsker at elevene skal gjøre for hvert nivå.
            De trenger ikke alltid å gjøre alle eventyrene. Hvert eventyr inneholder eksempelkode som studenene kan prøve med den grønne knappen.
            Eksempelkoden blir kopiert til kodefeltet slik at elevene kan prøve koden, samt eksperimentere ved å gjøre endringer i koden.
            Stimuler elevene dine til å gjøre eksempelkoden til deres egne prosjekter ved å legge til sine idéer og lage sine egne variasjoner av eventyrene.
    -   title: Quiz
        text: |-
            For å teste at elevene dine har plukket opp all ny informasjon i nivået kan du la dem ta en quiz.
            Quizen inneholder 10 flervalgsspørsmål om det nye konseptet og kommandoene i det nivået.
            Det er ikke alle nivåer som har en quiz enda, vi holder fortsatt på å bygge quizene.
    -   title: Evaluering
        text: |-
            Avslutt undervisningstimen ved å ha en kort evaluering av timen. Hva lærte elevene? Hvilke vanskeligheter møtte de på?
            Hvordan lærte de av feilene de gjorde? Og selvfølgelig; Hva laget de?
            Elevene er ofte svært stolt av det de har laget, så det er kjekt å sette av litt ekstra tid til å gi elevene muligheten til å vise det de har gjort til klassekameratene sine.
-   title: Extra Hedy features
    key: features
    subsections:
    -   title: Teacher Statistics
        text: This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: Make your own adventure
        text: It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: Explore page
        text: |-
            On the [explore](https://hedy.org/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: My achievements
        text: |-
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedy.org/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: High Scores
        text: |-
            On [this page](https://hedy.org/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: Debugger
        text: |-
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: Read aloud
        text: Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: Programmers mode
        text: |-
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyword switcher.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Vanlige feil
    levels:
    -   level: '1'
        sections:
        -   title: Elevene glemmer hvordan man skriver kommandoer
            example:
                error_text: For eksempel; De prøver å skrive ut en setning uten å bruke skriv-kommandoen
                error_code: Hedy kan ikke skrive dette
                solution_text: Lær elevene dine å begynne kodelinjene sine med en kommando.
                solution_code: skriv Hedy kan skrive dette!
        -   title: Elevene bruker stor forbokstav når de skriver kommandoer
            example:
                error_text: Kommandoene fungerer ikke hvis de har stor forbokstav
                error_code: |-
                    Spør Hvorfor funker ikke koden min
                    Skriv Fordi jeg brukte stor forbokstav
                solution_text: Fjern den store forbokstaven
                solution_code: |-
                    spør Hvorfor funker koden min nå?
                    skriv Fordi jeg fjernet den store forbokstaven
        -   title: Elevene bruker 'ekko' uten 'spør'
            example:
                error_text: '''ekko'' er laget for å gjennta svaret som gis til en spør-kommando. Uten ''spør'' vil ikke ''ekko'' gjøre noe.'
                error_code: ekko Ditt navn er
                solution_text: Legg til en spør-kommando for å få det til å fungere.
                solution_code: |-
                    spør Hva heter du?
                    ekko Ditt navn er
        -   title: Eleven ønsker å skrive ut ekko-ordet (variabelen) i midten av en setning
            example:
                error_text: Og de har rett til det! Derfor skal de lære hvordan de kan bruke variabler i neste nivå.
                error_code: |-
                    spør Hvilket programmeringsspråk er best?
                    ekko er best!
                solution_text: 'I nivå 1 må vi gjøre slik:'
                solution_code: |-
                    spør Hvilket programmeringsspråk er best?
                    ekko Det beste språket er...
        -   title: 'Skilpadden: Eleven lar skilpadden vandre ut av skjermen'
            example:
                error_text: Det er vanlig at elever prøver ut store tall når de bruker skilpadden, noe som fører til at pilen forsvinner ut av skjermen.
                error_code: |-
                    frem 300
                    snu 90
                solution_text: I eksempelet over så er det vanlig at elevene tror at snu-kommandoen ikke fungerer. Den fungerer, men de ser det ikke fordi det skjer utenfor skjermen. Løsningen er å bruke mindre tall for å unngå at skilpadden forsvinner utenfor skjermen.
                solution_code: |-
                    frem 100
                    snu 90
        -   title: 'Skilpadden: Eleven bruker kommandoen bak, men den eksisterer ikke'
            example:
                error_text: Bak/bakover/tilbake er ikke en kommando
                error_code: bak 100
                solution_text: 'For å få skilpadden til å gå bakover kan du bruke frem-kommandoen og et negativt tall. For eksempel:'
                solution_code: frem -100
    -   level: '2'
        sections:
        -   title: Eleven har skrivefeil i kommandoene sine
            example:
                error_text: Hedy klarer ikke å gjennkjenne kommandoer med skrivefeil i.
                error_code: skrivv Ikke lag skriveleifer!
                solution_text: Lær elevene dine å lese feilmeldingene. På denne måten kan de selv finne ut av hva som gikk gale.
                solution_code: skriv Ikke lag skriveleifer!
        -   title: Eleven glemmer at spør-kommandoen har endret seg
            example:
                error_text: I dette nivået lærer elevene om variabler. For å bruke spør-kommandoen på dette nivået må man nå lagre svaret som en variabel. Dette kan være lett å glemme for elevene.
                error_code: spør Hva vil du ha å spise?
                solution_text: I dette nivået må du fortelle Hedy hvor svaret skal lagres, slik at det kan brukes senere i koden. Dette kalles en variabel.
                solution_code: bestilling er spør Hva vil du ha å spise?
        -   title: Eleven prøver å bruke ekko-kommandoen
            example:
                error_text: For noen elever kan det være frustrerende å lære at ekko-kommandoen ikke fungerer lengre. Det er derfor veldig viktig å forklare fordelene med å bruke variabler. Du kan for eksempel si at man kan bruke flere variabler i en kode og at man kan putte dem hvor man vil i en setning!
                error_code: |-
                    svaret er spør Hvorfor fungerer ikke ekko lengre?!
                    ekko
                solution_text: 'Bruk en variabel isteden:'
                solution_code: |-
                    svaret er spør Hvorfor fungerer ikke ekko lengre?
                    skriv svaret
        -   title: Eleven bruker et variabelnavn som et vanlig ord
            example:
                error_text: I eksempelet under er ordet 'navn' brukt som en variabel og som normal tekst. Resultatet av koden blir da 'Hei mitt Hedy er Hedy'
                error_code: |-
                    navn er Hedy
                    skriv Hei mitt navn er navn
                solution_text: Ikke bruk ord til variabelnavn hvis du ønsker å bruke ordet i teksten din. I nivå 4 blir dette løst ved å bruke fnutter (apostrofer).
                solution_code: |-
                    navn er Hedy
                    skriv Hei jeg heter navn
        -   title: Eleven bruker lange variabelnavn som består av to eller flere ord
            example:
                error_text: En variabelnavn må være et ord. Man kan bruke understrek for å sette sammen to ord, det teller som et ord.
                error_code: valgt dør er spør Hvilken dør velger du?
                solution_text: 'Legg til en understrek:'
                solution_code: valgt_dør er spør Hvilken dør velger du?
        -   title: Elever bruker av og til to forskjellige navn for den samme variabelen
            example:
                error_text: I dette eksempelet har eleven brukt 'hest' og 'navn' for å referere til samme variabel.
                error_code: |-
                    hest er spør Hva heter hesten din?
                    skriv Hesten din heter navn
                solution_text: Sjekk alltid at variabler har samme navn i hele koden. Små forskjeller kan være vanskelig å oppdage (eks. entall/flertall) men de vil føre til feil i koden.
                solution_code: |-
                    navn er spør Hva heter hesten din?
                    skriv Hesten din heter navn
    -   level: '3'
        sections:
        -   title: Eleven prøver å skrive ut hele lister
            example:
                error_text: En liste kan ikke skrives ut. Man kan kun skrive ut et ord fra listen ved å bruke på tilfeldig-kommandoen
                error_code: |-
                    handleliste er epler, melk, sjokolade
                    skriv handleliste
                solution_text: 'For å skrive ut en liste med alle tingene på handlelisten kan du legge dem rett etter en skriv-kommando. Eventuelt kan du bruke listen til å skrive ut et tilfeldig ord i listen:'
                solution_code: |-
                    skriv epler, melk, sjokolade

                    eller

                    handleliste er epler, melk, sjokolade
                    skriv handleliste på tilfeldig
        -   title: Eleven bruker navnet til en variabel eller liste som vanlig tekst
            example:
                error_text: 'Problemet oppsto antageligvis i nivå 2 også. Nå kan det skje for lister også:'
                error_code: |-
                    navn er Hedy
                    skriv Hei mitt navn er navn

                    eller

                    dyr er nesehorn, bie, svane
                    skriv Mitt favoritt dyr er... dyr på tilfeldig
                solution_text: Ikke bruk variabel- eller listenavn som vanlig tekst. I nivå 4 løses dette problemet med fnutter (apostrofer).
                solution_code: |-
                    navn er Hedy
                    skriv Hei jeg heter navn

                    eller

                    dyr er nesehorn, bie, svane
                    skriv Favoritt dyret mitt er... dyr på tilfeldig
        -   title: Eleven glemmer 'på' i 'på tilfeldig'
            example:
                error_text: 'Som i eksemplet:'
                error_code: |-
                    fugler er spurv, måke, hakkespett
                    skriv fugler tilfeldig
                solution_text: 'Problemet løses ved å legge til på-nøkkelordet:'
                solution_code: |-
                    fugler er spurv, måke, hakkespett
                    skriv fugler på tilfeldig
        -   title: Eleven glemmer å bruke skriv-kommandoen når de i tillegg bruker 'på tilfeldig' kommandoen
            example:
                error_text: 'Eller så skriver de ''på tilfeldig'' på begynnelsen av linjen:'
                error_code: |-
                    frukter er eple, appelsin, banan
                    frukter på tilfeldig
                solution_text: Vær tydelig med elevene dine og si at man alltid må bruke skriv-kommandoen for å skrive ut tekst.
                solution_code: |-
                    frukter er eple, appelsin, banan
                    skriv frukter på tilfeldig
        -   title: Eleven glemte å bruke komma i listen sin
            example:
                error_text: I en liste er innholdet separert med komma-tegn
                error_code: |-
                    pizzaer er funghi tonno quattro stagioni
                    skriv pizzaer på tilfeldig
                solution_text: 'Etter hver ting i listen må vi legge til et komma:'
                solution_code: |-
                    pizzaer er funghi, tonno, quattro, stagioni
                    skriv pizzaer på tilfeldig
        -   title: Eleven prøver å bruke 'på tilfeldig'-kommandoen uten en liste
            example:
                error_text: 'For eksempel:'
                error_code: |-
                    klubber er Manchester United
                    skriv klubber på tilfeldig
                solution_text: Hedy kan ikke skrive noe tilfeldig, fordi det ikke fins en liste å velge noe tilfeldig fra.
                solution_code: |-
                    klubber er Manchester United, Bayern Munchen, FC Barcelona
                    skriv klubber på tilfeldig
        -   title: Elever prøver å bruke legg/fjern uten en liste
            example:
                error_text: I eksempelet under er ikke 'navn' en liste, men en variabel. Du kan ikke legge noe til den.
                error_code: |-
                    navn er Jakob
                    ditt_navn er spør Hvem er du?
                    legg ditt_navn til navn
                    skriv navn på tilfeldig
                solution_text: Det må finnes en liste før man kan bruke legg-kommandoen, så du må legge til et ekstra navn for å gjøre 'navn' om til en liste, for eksempel Ramona. Hvis du ikke vil ha Ramona på listen din kan du bruke fjern-kommandoen til å fjerne det etterpå.
                solution_code: |-
                    navn er Jakob, Ramona
                    ditt_navn er spør Hvem er du?
                    legg ditt_navn til navn
                    skriv navn på tilfeldig
        -   title: Elever glemmer å bruke til/fra ved bruk av legg/fjern
            example:
                error_text: Uten til/fra vil ikke legg/fjern kommandoene fungere.
                error_code: |-
                    eventyr er fortelling, papegøye, terninger
                    valg er spør Hvilket eventyr liker du best?
                    legg valg
                    fjern terninger
                    skriv Jeg elsker eventyr på tilfedig
                solution_text: Hedy må vite hvilken liste elementet skal legges til i eller fjernes fra.
                solution_code: |-
                    eventyr er fortelling, papegøye, terninger
                    valg er spør Hvilket eventyr liker du best?
                    legg valg til eventyr
                    fjern terninger fra eventyr
                    skriv Jeg elsker eventyr på tilfedig
    -   level: '4'
        sections:
        -   title: Eleven glemmer å bruke apostrof på begge sider av teksten
            example:
                error_text: I dette nivået krever skriv og spør at du bruker fnutter rundt tekststrenger. En før teksten og en etter.
                error_code: |-
                    skriv Hallo
                    humør er spør 'Hvordan har du det?
                solution_text: Legg til riktige fnutter.
                solution_code: |-
                    skriv 'Hallo'
                    humør er spør 'Hvordan har du det?'
        -   title: Eleven bruker feil apostrof-tegn
            example:
                error_text: Det er viktig å begynne undervisningen av dette nivået med å sjekke at elevene vet hvordan de skriver det riktige apostrof-tegnet. Det er vanlig at elevene bruker feil tegn, eks "dobbel-apostrof " eller `skrå-apostrof `.
                error_code: |-
                    skriv `Velkommen til restauranten`
                    matrett er spør "Hva ønsker du å bestille?"
                solution_text: 'Dette er de korrekte apostrofene:'
                solution_code: |-
                    skriv 'Velkommen til restauranten'
                    matrett er spør 'Hva ønsker du å bestille?'
        -   title: Eleven bruker en apostrof i teksten sin
            example:
                error_text: Fra dette nivået er det ikke mulig å bruke fnutter. De brukes ofte i norsk når man skriver enkelte forkortninger samt ord som leses bokstav for bokstav eller ord som har s-, x- eller z-ending. (Mer vanlig på engelsk med fnutter)
                error_code: skriv 'Du kan ikke skrive en pc's prossessor'
                solution_text: 'Du kan velge å bruke feil gramatikk, eller fjerne apostrofen. Eventuelt kan du bruke ` som en apostrof:'
                solution_code: |-
                    skriv 'Du kan skrive en pcs prossessor'
                    skriv 'Du kan skrive en pc`s prossessor'
    -   level: '5'
        sections:
        -   title: Eleven glemmer å bruke skriv-kommandoen sammen med hvis-kommandoen
            example:
                error_text: 'Etter eleven bruker hvis- eller ellers-kommandoen glemmer de å bruke en påfølgende kommando som skriv- eller spør-kommandoen:'
                error_code: |-
                    hvis navn er Hedy 'Kjempebra!'
                    ellers 'Hedy er bedre!'
                solution_text: 'Legg til skriv-kommandoen for å fikse problemet:'
                solution_code: |-
                    hvis navn er Hedy skriv 'Kjempebra!'
                    ellers skriv 'Hedy er bedre!'
        -   title: Eleven kan bruke to forskjellige navn for å referere til samme variabel
            example:
                error_text: 'I dette eksempelet har studenten brukt ''hest'' og ''navn'' for den samme variabelen:'
                error_code: |-
                    hest er spør 'Hva heter hesten din?'
                    hvis navn er Blakken skriv 'Kult!'
                    ellers skriv 'Mindre kult!'
                solution_text: Sjekk alltid at variabler har samme navn gjennom hele kodeflyten. Små forskjeller kan være vanskelig å legge merke til (eks. entall/flertall) men det vil føre til feil i koden.
                solution_code: |-
                    hest er spør 'Hva heter hesten din?'
                    hvis hest er Blakken skriv 'Kult!'
                    ellers skriv 'Mindre kult!'
        -   title: Elevene glemmer fortsatt apostrof på begge sider
            example:
                error_text: Enkelte hvis-kommandoer kan bli veldig lange og elevene har en tendens til å glemme apostrofene.
                error_code: |-
                    hvis navn er Hedy skriv morro
                    ellers skriv 'meh!
                solution_text: 'Bruk alltid to fnutter i en skriv-kommando:'
                solution_code: |-
                    hvis navn er Hedy skriv 'morro'
                    ellers skriv 'meh!'
        -   title: Eleven bruker fnutter rundt variabelnavn
            example:
                error_text: På dette nivået skal det ikke være fnutter rundt variabel navn.
                error_code: |-
                    hvis 'navn' er 'Hedy' skriv 'morro'
                    ellers skriv 'meh!'
                solution_text: 'Fjern apostrofene for å få koden til å fungere:'
                solution_code: |-
                    hvis navn er Hedy skriv 'morro'
                    ellers skriv 'meh!'
        -   title: Eleven bruker lange variabelnavn bestående av to ord
            example:
                error_text: Et variabelnavn må være i et ord. Du kan bruke understrek for å koble sammen to ord, dette teller som et ord.
                error_code: valgt dør er spør 'Hvilken dør velger du?'
                solution_text: 'Legg til en understrek:'
                solution_code: valgt_dør er spør 'Hvilken dør velger du?'
        -   title: Elever vil at flere alternativer skal produsere samme resultat ved bruk av hvis-kommandoen
            example:
                error_text: 'Eksempel: Denne eleven vil at Hedy skal fortelle alle vennene hennes at de er morsom, men ikke de andre klassekameratene hennes.'
                error_code: |-
                    hvis navn er Mari, Silje, Samira skriv 'Du er morsom'
                    ellers skriv 'Du er ikke morsom'
                solution_text: |-
                    Du kan bruke i-kommandoen for å løse problemet. Kommandoen introduseres først på senere nivå, men den fungerer allerede på nivå 5.
                    En annen løsning kan være å bruke flere hvis-kommandoer uten en ellers-kommando. Ulempen med dette er at de andre klassekameratene ikke blir fortalt at de ikke er morsom.
                solution_code: |-
                    venner er Mari, Silje, Samira
                    navn er spør 'Hvem er du?'
                    hvis navn i venner skriv 'Du er morsom'
                    ellers skriv 'Du er ikke morsom'

                    eller

                    navn er spør 'Hvem er du?'
                    hvis navn er Mari skriv 'Du er morsom'
                    hvis navn er Silje skriv 'Du er morsom'
                    hvis navn er Samira skriv 'Du er morsom'
        -   title: Eleven setter variabelnavnet til det samme som verdien i hvis-utsagnet
            example:
                error_text: I eksempelet under er passordet 'passord'. Dette vil resultere i at det alltid er korrekt.
                error_code: |-
                    passord er spør 'Hva er passordet?'
                    hvis passord er passord skriv 'Korrekt!'
                    ellers 'Feil passord'
                solution_text: 'Velg et annet navn for variabelen:'
                solution_code: |-
                    hemmelig_passord er spør 'Hva er passordet?'
                    hvis hemmelig_passord er passord skriv 'Korrekt!'
                    ellers 'Feil passord'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: print '5 + 5'
                solution_text: In this code the output screen will print '10'.
                solution_code: print 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: repeat 100 times print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |-
                    repeat 3 times
                    print 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times
                        print 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: |-
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    for i in range 1 to 5
                        print i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: print 2,5 + 2,5
                solution_text: 'This is the correct code:'
                solution_code: print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: print 'my name is Hedy!'
                solution_text: 'This is the correct code:'
                solution_code: print('my name is Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: common_mistakes
    intro: |-
        Du kan lære av å gjøre feil, spesielt i kodeverden!
        Å gjøre feil er uungåelig, og en fantastisk mulighet til å lære, men det kan være en utfordring for deg som lærer å finne den rette løsningen for en feil!
        Spesielt når koden blir lengre og lengre utover i nivåene. Derfor har vi laget en liste med vanlige feil som gjøres i nivåene, og hvordan man løser de!
start-sections:
-   title: Hva er et gradvis programmeringsspråk?
    text: |-
        Å lære seg å programmere kan være vanskelig. Ikke at programmering i seg selv *er* vanskelig! Men det er mange regler man må lære seg, akkurat som når du begynte å lære deg norsk.
        På samme måte krever det mye øvelse å lære seg programmering.

        Disse setningene leser du nok ganske lett. Men husker du når du lærte deg å lese? Da brukte du en del tid bare på å lære hver bokstav!
        Dette gjelder også for programmering, det er kanskje vanskelig i begynnelsen, men det blir lettere etterhvert!

        Det som er bra med Hedy er at Hedy er *gradvis*. Det betyr at du ikke trenger å lære alle reglene på en gang.
        De første nivåene har ganske få regler, slik at det er lett å bli vant til programmering.
        For hvert nivå legger vi til flere regler og kommandoer. Kommandoer er instruksjoner for en datamaskin.
-   title: Hvorfor er Hedy gradvis?
    text: |-
        I denne videoen forklarer Felienne, skaperen av Hedy, hvorfor Hedy er gradvis.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: Hvem er Hedy laget for?
    text: Hedy er laget for alle barn og ungdom som har lyst til å lære programmering! Du trenger bare å være komfortabel med å lese norsk.
-   title: Multi-lingual programming
    text: While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a
        a new translation.
-   title: Built for the classroom
    text: |-
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Trenger jeg erfaring med programmering?
    text: Nei, det er ikke nødvendig. Men hvis du har programmert med Scratch eller Python, kan noen av kommandoene være kjente.
-   title: Er Hedy gratis?
    text: |-
        Ja! Hedy er også åpen kildekode (Open Source) som betyr at alle som kan programmere kan hjelpe oss å gjøre Hedy bedre.
        Du kan finne koden på [GitHub](https://github.com/hedyorg/hedy).
        Hvis du liker Hedy og vil bidra, er vi veldig glade for [donasjoner](https://github.com/sponsors/hedyorg)!
-   title: Må jeg installere noe?
    text: Nei. Hedy kjører i nettleseren, som er det programmet du bruker for å se på denne siden. Sannsynligvis Chrome, Edge, Firefox eller Safari. Hedy virker også på telefonen din eller nettbrettet ditt.
