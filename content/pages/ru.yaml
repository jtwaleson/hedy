title: Hedy documentation
join-sections:
-   title: Поддержка Хеди
    text: '# There are three ways in which you can support Hedy!'
-   title: Improving the language
    text: |-
        The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.
        Find those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Translating Hedy
    text: |-
        Не программист? Нет проблем! Еще один способ поддержать Hedy - это <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">перевод ключевых слов, сообщений об ошибках, приключений и прочего контента</a>.
        Это текущее состояние, помогите нам завершить работу над языком или добавить новый!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Помочь учителям начать работу
    text: |-
        Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.
        If you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Присоединяйтесь к сообществу Hedy
    text: |-
        Дайте нам знать!

        [Нажмите сюда, чтобы написать нам](mailto:hello@hedy.org "About Hedy")
-   title: Глубокое погружение!
    text: |-
        Хотите узнать больше о философии и дизайне Hedy? Посмотрите выступление Фелиенн на конференции StrangeLoop в 2022 году:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy в новостях
    text: |-
        Самый простой способ — помочь нам [с переводом Хэди](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        Вот текущий статус перевода. Помогите нам закончить перевод на русский или другой язык, или добавьте новый язык, которого нет в списке.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
sections:
-   title: Introduction
    key: intro
    subsections:
    -   title: What's Hedy?
        text: |-
            Hedy is a textual programming language, specifically developed for (pre-)teens (10 to 15 years old).
            In contrast to programming languages for kids, like Scratch, Hedy doesn't use code blocks but textual code.
            So with Hedy you'll learn how to type code like the real programmers do, but in small steps with playful exercises.
            This way Hedy can function as a stepping stone to real programming languages like Python in an accessible and mostly fun way!
            If you want to know more, you can watch this <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> about the development of Hedy as a programming language.
    -   title: Target audience
        text: |-
            Hedy is developed with middle school and junior high school students in mind (ages 10 - 15).
            It's important for the students to be able to read well. We recommend not to start with Hedy before the students have achieved at least a 3rd grade reading level.
            Students (and teachers!) don't need any programming experience before starting with Hedy.
    -   title: How does Hedy work?
        text: |-
            Hedy is divided into levels, in which new commands are taught. Each level contains a variety of adventures to practice the newly learned commands.
            As a teacher, you get to decide which adventures are available for your students. Will they be making a restaurant, a calculator or a haunted house this level? Within each level, the adventures are arranged from easiest to hardest.
            So your students keep getting challenged. The adventures can be done by the students individually, or you can use them in a classical instruction.

            The adventures also include a code example, to make sure the less digitally informed teachers are able to use Hedy too!
            Of course Hedy also caters to the creative teachers that love to make their own lessonplans and adventures!

            After programming all the adventures of a certain level, your students can test their knowledge in the quiz.
            You can track your students' work and their progress on the class page.
    -   title: Devices
        text: |-
            Hedy работает через Интернет, что означает, что он работает на любом устройстве с браузером (Google Chrome, Firefox, Edge и т.д.), поэтому ноутбуки, Chromebook, планшеты и даже смартфоны подходят для использования Hedy.
            Перед работой с Hedy не нужно ничего скачивать, просто зайдите на сайт, и всё!
    -   title: The Hedy Community
        text: |-
            Приглашаем всех учителей, программистов и других поклонников Хеди присоединиться к нашему серверу <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a>. Это идеальное место для общения о Hedy: у нас есть каналы, где вы можете показать свои классные проекты и уроки, каналы для сообщения об ошибках и каналы для общения с другими учителями и командой Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Здесь</a> вы можете найти видео о том, как присоединиться к сообществу Discord.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Вы хотите пройти учебник (еще раз)? Нажмите <a href="https://hedy.org/tutorial" target="_blank">здесь</a>.
-   title: Teaching preparations
    key: preparations
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: Creating a Class
        text: |-
            Как учитель, вы можете создать класс для своих учеников. В этом классе вы можете видеть учетные записи учеников и их программы, а также следить за их успехами.
            В этом видео <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank"></a> показано, как быстро создать класс в Hedy.
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level tresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: Student Accounts
        text: |-
            To add students to your class go to the class page by clicking in the class name on the 'for teachers' page. Then click 'add students'. There are 2 ways to let your students join your class: You can create accounts for them, or they could create their own accounts.

            **You create accounts for your students**
            The easiest way to add students to your class is by creating an account for them. This can be done by clicking the 'create student accounts' button and filling in the usernames and passwords for them.
            The students can login with the username and password that you chose. Afterwards, they can change their username or password if they'd like and they'll still remain in your class.
            This [video](https://www.youtube.com/watch?v=eEQvik-Ce5M) shows how to add students to your class in the quickest and easiest way.

            **Students make their own accounts**
            Your students can also go to the Hedy website and create their own accounts, just like you did. To get them into your class, they simply have to click the invite link.
            You can find the invite link on the class page and send it to your students. Mind that your students have to be logged in to Hedy when they click the link, in order to make it work smoothly.
            You can also manually invite a student to your class with the button 'Invite by username'.
    -   title: Setting preferred language
        text: |-
            When students create profiles they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.
            Changing this language can always be done later on by navigating to 'My account' and 'My personal settings' again.
            From December 2021, setting a preferred language is obligatory for each Hedy account.
            When your account or your students' accounts have been created earlier than this date, you will receive a message that a preferred language is missing.
            Don't worry! Navigate to 'My profile' and set a language in your profile settings.
            Until you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.

            **For non-English speakers**
            Not only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.
            This way you can teach your students to code with English keywords, but you can also let them program in their own language. For example, Dutch students can use the command 'vraag' instead of 'ask'.

            **Video**
            This [video](https://www.youtube.com/watch?v=QrVZETj4oLM) show you how to set a preferred language and change the keywords to you preferred language as well.
    -   title: Storing programs
        text: |-
            When you are logged in, you'll see My programs next to your profile icon.
            This option exists for your students too. In My programs you can find all the programs that you've worked on.
            By default, programs will be saved to 'My programs' when you run the code, and every 10 seconds, under their default name
            and their level (for example: Story 5). If you want to store a program under a new name, just type the new name in the name bar.
            Currently, only one program can be saved per level, per tab.

            You (and your students) can also share programs using the share button next to program names.
            These programs will be posted on our <a href="https://hedy.org/explore" target="_blank">explore page</a>, for everybody to see and use.
            If you want to unshare your program, go to 'My programs' and click 'Unshare'.

            The paper plane icon can be used to hand in programs to the teacher of a class. Programs that have been handed is will no longer be editable.
-   title: Teaching with Hedy
    key: teaching
    subsections:
    -   title: Обучение с Hedy
        text: |-
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons: Introduction, New concepts and commands, let's get to work, puzzels and quizzes.
    -   title: Слайды
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Введение
        text: |-
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you start introducing the new lesson.
    -   title: Введение новых понятий и команд
        text: |-
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog'). Our slides could help you with that.
    -   title: Приступаем к работе
        text: |-
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: Викторины и головоломки
        text: |-
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
            Some levels also contain puzzels. Puzzels show the students a couple of line of code that the students have to put in the right order.

            This [video](https://www.youtube.com/watch?v=lNh5EdZVUwc) shows the quizzes and puzzels.
    -   title: Оценка
        text: |-
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: Дополнительные функции Hedy
    key: особенности
    subsections:
    -   title: Статистика учителей
        text: This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: Создайте свое собственное приключение
        text: It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: Страница «Обзор»
        text: |-
            On the [explore](https://hedy.org/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: Мои достижения
        text: |-
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedy.org/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: Высокие баллы
        text: |-
            On [this page](https://hedy.org/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: Отладчик
        text: |-
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: Чтение вслух
        text: Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: Режим программиста
        text: |-
            Вас отвлекают все эти приключения или вы хотите составить длинную программу? Тогда обратите внимание на переключатель "Режим программиста" в нижней части экрана кодирования.
            Режим программистов позволяет вам и вашим ученикам использовать больший экран для кодирования.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyword switcher.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Распространенные ошибки
    levels:
    -   level: '1'
        sections:
        -   title: Студенты забывают печатать команды
            example:
                error_text: For example they type a sentence without using print.
                error_code: Hedy не может напечатать это
                solution_text: Teach your students to always start a line of code with a command.
                solution_code: напечатать Хеди может напечатать это!
        -   title: Студенты используют заглавные буквы при наборе команд
            example:
                error_text: Commands won't work if they are in capitals.
                error_code: |-
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: Уберите заглавные буквы.
                solution_code: |-
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: Студенты используют эхо без вопроса
            example:
                error_text: Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: эхо Ваше имя
                solution_text: Add an ask command to make it work.
                solution_code: |-
                    ask What's your name?
                    echo Your name is
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_text: And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |-
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: 'In level 1 we have to keep it at this:'
                solution_code: |-
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_text: Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |-
                    вперед 300
                    поворот 90
                solution_text: In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |-
                    вперед 100
                    поворот 90
        -   title: 'Turtle: Students use the command backward, but that doesn''t exist'
            example:
                error_text: Назад - это не команда.
                error_code: назад 100
                solution_text: 'To make the turtle go backwards, you use the forward command and a negative number. For example:'
                solution_code: вперед -100
    -   level: '2'
        sections:
        -   title: Студенты допускают опечатки в своих командах
            example:
                error_text: Hedy can't recognize a command with a typo.
                error_code: наппечатать Не делайте опечаток!
                solution_text: Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: напечатать Не делайте опечаток!
        -   title: Students forget that the ask command has changed
            example:
                error_text: In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: спросить что бы вы хотели съесть?
                solution_text: In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: order is ask What would you like to eat?
        -   title: Студенты пытаются использовать команду эхо
            example:
                error_text: For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |-
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: Вместо этого используйте переменную.
                solution_code: |-
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: Students use a variable name or as a normal word
            example:
                error_text: In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |-
                    name is Hedy
                    print Hi my name is name
                solution_text: So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |-
                    имя Хеди
                    напечатать Привет я имя
        -   title: Students use long variable names containing two words.
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask Which door do you pick?
                solution_text: Добавьте знак подчеркивания.
                solution_code: chosen_door is ask which door do you pick?
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: Студенты пытаются распечатать целые списки
            example:
                error_text: A list can't be printed. You can only print one item from the list with at random.
                error_code: |-
                    продукты яблоки, молоко, шоколад
                    напечатать продукты
                solution_text: To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |-
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |-
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |-
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: Студенты забывают `{at}` в `{at}` `{random}`
            example:
                error_text: Как в примере
                error_code: |-
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: Or they will sometimes put at random at the beginning of the line.
                error_code: |-
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: Students try to use at random without a list
            example:
                error_text: Например
                error_code: |-
                    clubs is Manchester United
                    print clubs at random
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: Сначала должен быть список, поэтому нужно добавить второе имя, чтобы превратить имена в список, например, Эми. Если вы не хотите, чтобы Эми была в списке, вы можете использовать убрать, чтобы удалить ее после.
                solution_code: |-
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    print Hello
                    mood is ask 'How are you?
                solution_text: Добавьте правильные кавычки.
                solution_code: |-
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: Студенты используют неправильные кавычки
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |-
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: 'Это правильные кавычки:'
                solution_code: |-
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: print 'You're not allowed to type this'
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: After students use if or else they forget to use a second command like print or ask.
                error_code: |-
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: Add the print command to fix it.
                solution_code: |-
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |-
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: Студенты используют кавычки вокруг имен переменных
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask 'Which door do you pick?'
                solution_text: Добавьте знак подчеркивания.
                solution_code: chosen_door is ask 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Студенты испытывают трудности с кавычками
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: напечатать '5 + 5'
                solution_text: In this code the output screen will print '10'.
                solution_code: напечатать 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Студенты пытаются повторить несколько строк
            example:
                error_text: В этом уровне можно повторять одну строку кода только несколько раз. В этом коде студент хотел вывести 3 разных напитка, но это не сработает. Он задаст вопрос 3 раза и выведет только последний ответ.
                error_code: |-
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: repeat 100 times print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Студенты неправильно используют отступы
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |-
                    повторить 3 раза
                    напечатать 'привет'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    повторить 3 раза
                        напечатать 'привет'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |-
                    В правильном коде третья строка тоже начинается с отступа. Таким образом, она относится к блоку повторить и поэтому будет повторена 3 раза.
                    Демонстрация этих различий может помочь вашим ученикам понять, почему нам нужны отступы, чтобы наши программы работали.
                solution_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: |-
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: Вы можете исправить эту ошибку, добавив кавычки. Так компьютер поймет, что второй пароль в `{if} password {is} 'password'` является строковым значением (то есть обычным текстом), а не именем переменной.
                solution_code: |-
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Студенты допускают ошибки с отступами
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Студенты забывают об отступах
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Студенты забывают использовать отступы
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: 'Это правильный код:'
                solution_code: |-
                    for i in range 1 to 5
                        print i
        -   title: Студенты не понимают i
            example:
                error_text: |-
                    Некоторые студенты не понимают, что i - это переменная. i выбрана, потому что она используется в программировании на Python, но вы с таким же успехом можете использовать другое имя переменной.
                    Например, вот этот код:
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Студенты забывают о кавычках
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    Вы можете использовать кавычки для чисел, но только если вы хотите, чтобы компьютер воспринимал их как текст. Это означает, что вы не можете выполнять вычисления с числом.
                    В приведенном ниже примере вы не можете выполнять математические действия с числом 25, потому что оно заключено в кавычки.
                error_code: |-
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: 'Это правильный код:'
                solution_code: |-
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: напечатать 2,5 + 2,5
                solution_text: 'Это правильный код:'
                solution_code: напечатать 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Студенты путают «и» с «или»
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: На этом уровне студентам все еще разрешено использовать = или is. Но на других уровнях или в python у них могут возникнуть проблемы из-за этого. Поэтому лучше всего научить их использовать их.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Отступы часто вызывают затруднения у студентов.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Студенты забывают о скобках
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Студенты используют неправильные скобки
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Студенты забывают о двоеточии
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'Это правильный код:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Студенты забывают использовать скобки
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: напечатать 'Меня зовут Хеди!'
                solution_text: 'Это правильный код:'
                solution_code: напечатать('Меня зовут Хеди!').
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'Это правильный код:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'Это правильный код:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: common_mistakes
    intro: |-
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
start-sections:
-   title: Текстовое программирование стало проще!
    text: |-
        Многие школы и учителя по всему миру хотят научить своих учеников программированию. Вначале это часто делается с помощью игровых инструментов, начиная от робота Beebot и заканчивая
        Scratch Junior или Scratch. После использования таких инструментов дети часто хотят перейти к более мощным текстовым языкам программирования, таким как Python.

        Однако Python сложен, потому что он доступен только на английском языке и требует от учеников одновременного изучения сложных концепций программирования и синтаксиса.
        Hedy - это простой способ начать изучать текстовые языки программирования! Hedy бесплатен в использовании, имеет открытый исходный код и не похож ни на один другой язык текстового программирования по трем параметрам.

        1. Hedy является мультиязычным, вы можете использовать Hedy на своем родном языке.
        2. Hedy является постепенным, поэтому вы можете изучать одну концепцию и ее синтаксис за раз.
        3. Hedy создан для работы в классе, что позволяет учителям полностью адаптировать опыт своих учеников.
-   title: Многоязычное программирование
    text: В то время как почти все текстовые языки программирования имеют ключевые слова на английском языке, такие как `for` или `repeat`, Hedy можно использовать на любом языке! В настоящее время мы поддерживаем 39 различных языков, включая испанский, арабский, упрощенный китайский и хинди. Если ваш
        язык недоступен, вы всегда можете начать новый перевод.
-   title: Пошаговое обучение
    text: Изучение языка программирования может оказаться непосильной задачей, поскольку учащимся приходится одновременно изучать концепции (например, if-else или циклы) и синтаксис (например, кавычки или круглые скобки). В Hedy понятия сначала вводятся с небольшим количеством синтаксиса, а затем совершенствуются.
        Научно доказанный способ обучения!
-   title: Создан для классной комнаты
    text: |-
        Hedy предназначен для детей в возрасте от 10 лет и старше и разработан для использования в классе.
        Учителя могут использовать наши бесплатные встроенные планы уроков, а также создавать собственные уроки и загружать их в пользовательский интерфейс Hedy.
-   title: Программирование в контексте
    text: Hedy демонстрирует программирование в самом широком смысле и может быть использован различными увлекательными способами. Hedy позволяет создавать цифровые и интерактивные истории, красочные рисунки, которые можно не только показывать на экране, но и рисовать пером или вышивать на рубашке, а
        также использовать для создания игр или приложений с кнопками и действиями на клавиатуре.
-   title: Понадобится ли мне опыт программирования?
    text: |-
        Да! Hedy имеет "открытый исходный код", что означает, что каждый может помочь нам сделать Hedy лучше.
        Вы можете найти наш код на <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Если вам нравится Hedy и вы хотите внести свой вклад, мы принимаем (и очень благодарны за это) <a href="https://github.com/sponsors/hedyorg" target="_blank">пожертвования</a>!
-   title: Бесплатен ли Хэди?
    text: |-
        Да! Это так благодаря Лейденскому университету в Нидерландах. Более того, Хэди — язык с открытым исходным кодом. Это значит, что любой, кто умеет программировать, может помочь нам в его разработке.
        Исходный код Хэди доступен на [GitHub](https://github.com/hedyorg/hedy).
        Если вам нравится Хэди и вы готовы помочь, мы будем очень благодарны [пожертвованиям](https://github.com/sponsors/hedyorg).
-   title: Нужно ли мне что-то устанавливать?
    text: Нет. Хэди работает в браузере — в той же программе, в которой вы сейчас видите эту страницу. Вероятно, это Chrome, Edge или Firefox. Хэди также работает на телефонах и планшетах.
