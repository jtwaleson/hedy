title: Hedy документація
join-sections:
-   title: Підтримати Hedy
    text: |
        # There are three ways in which you can support Hedy!
-   title: Improving the language
    text: |
        The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.
        Find those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Translating Hedy
    text: |
        Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        This is the current status, help us complete a language, or add a new one!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help teachers get started
    text: |
        Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.
        If you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Приєднатися до Спільноти Hedy
    text: |
        We love to hear from you!
        [Click here to send us a message](mailto:hello@hedy.org "About Hedy")
-   title: Глибоке занурення!
    text: |
        [Let us know on GitHub](https://github.com/hedyorg/hedy/issues/new/choose)
-   title: Hedy у новинах
    text: |
        Want to know more about Hedy? Check out this talk Felienne gave at the European Code Week 2020:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
sections:
-   title: Введення
    key: введення
    subsections:
    -   title: Що таке Hedy?
        text: |
            Hedy — це мова текстового програмування, спеціально розроблена для підлітків (від 10 до 15 років).
            На відміну від мов програмування для дітей, таких як Scratch, Hedy використовує не блоки коду, а текстовий код.
            Тож із Hedy ви навчитеся вводити код, як це роблять справжні програмісти, але маленькими кроками за допомогою ігрових вправ.
            Таким чином Hedy може функціонувати як сходинка до справжніх мов програмування, таких як Python, у доступний і переважно цікавий спосіб!
            Якщо ви хочете дізнатися більше, ви можете переглянути це <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">відео</a> про розвиток Hedy як мови програмування.
    -   title: Цільова аудиторія
        text: |
            Hedy розроблено для учнів середньої та молодшої школи (віком від 10 до 15 років).
            Важливо, щоб учні вміли добре читати. Ми рекомендуємо не починати з Hedy, поки учні не досягнуть рівня читання принаймні в 3-му класі.
            Студентам (і вчителям!) не потрібен досвід програмування, перш ніж почати працювати з Hedy.
    -   title: Як працює Hedy?
        text: |
            Hedy розділений на рівні, на яких навчаються новим командам. Кожен рівень містить різноманітні пригоди, щоб відпрацювати щойно вивчені команди.
            Як учитель, ви вирішуєте, які пригоди доступні для ваших учнів. Чи будуть вони робити ресторан, калькулятор чи будинок з привидами такого рівня? На кожному рівні пригоди розташовані від найлегшого до найважчого.
            Тож ваші студенти постійно отримують виклики. Пригоди можуть виконувати учні самостійно, або ви можете використати їх у класичному навчанні.

            Пригоди також включають приклад коду, щоб переконатися, що вчителі, які менш обізнані з цифровими засобами, також зможуть використовувати Hedy!
            Звичайно, Hedy також обслуговує творчих вчителів, які люблять складати власні плани уроків і пригоди!

            Після програмування всіх пригод певного рівня ваші учні можуть перевірити свої знання у вікторині.
            Ви можете відслідковувати роботу своїх учнів та їх прогрес на сторінці класу.
    -   title: Прилади
        text: |
            Hedy базується в Інтернеті, що означає, що він працює на будь-якому пристрої з браузером (Google Chrome, Firefox, Edge тощо), тому для використання Hedy підходять ноутбуки, хромбуки, планшети та навіть смартфони.
            Не потрібно нічого завантажувати, перш ніж працювати з Hedy, просто перейдіть на веб-сайт, і все готово!
    -   title: Спільнота Hedy
        text: |
            Усі вчителі Hedy, програмісти та інші шанувальники можуть приєднатися до нашого <a href="https://discord.gg/8yY7dEme9r" target="_blank">сервера Discord</a>. Це ідеальне місце для спілкування про Hedy: у нас є канали, де ви можете показати свої круті проекти та уроки, канали для повідомлення про помилки та канали для спілкування з іншими викладачами та командою Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Тут</a> ви можете знайти відео про те, як приєднатися до спільноти Discord.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: |
            Бажаєте пройти навчальний курс (ще раз)? Натисніть <a href="https://hedy.org/tutorial" target="_blank">тут</a>.
-   title: Приготування
    key: приготування
    subsections:
    -   title: For teachers
        text: |
            You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained below.
    -   title: Створення класу
        text: |
            Як вчитель, ви можете створити клас для своїх учнів. У цьому класі ви можете бачити облікові записи студентів та їхні програми, а також контролювати їхній прогрес.
            Це <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">відео</a> показує, як швидко створити клас у Hedy.
    -   title: Customize your Class
        text: |
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level tresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: Облікові записи студентів
        text: |
            Є 2 способи дозволити студентам приєднатися до вашого класу: ви можете дозволити їм створювати власні облікові записи або ви можете створити для них облікові записи.

            **Студенти самостійно створюють облікові записи**
            Ваші учні можуть перейти на веб-сайт Hedy і створити власні облікові записи, як це зробили ви. Щоб залучити їх до вашого класу, вони просто повинні натиснути посилання запрошення.
            Ви можете знайти посилання для запрошення на сторінці класу та надіслати його своїм учням. Майте на увазі, що ваші студенти мають увійти в систему Hedy, коли вони натискають посилання, тому робота буде безперебійною.

            **Ви створюєте облікові записи для своїх учнів**
            Іноді простіше самостійно створити цілу купу облікових записів для своїх учнів. Це можна зробити, натиснувши кнопку «створити облікові записи студентів» і ввівши імена користувачів і паролі для них.
            Студенти можуть увійти за допомогою імені користувача та пароля, які ви вибрали. Після цього вони можуть змінити своє ім’я користувача чи пароль, якщо захочуть, і залишаться у вашому класі.
    -   title: Налаштування бажаної мови
        text: |
            Коли учні створюють профіль, вони повинні вибрати «бажану мову». Hedy завжди завантажуватиметься цією вибраною мовою.
            Змінити цю мову можна будь-коли пізніше, знову перейшовши до «Мого облікового запису» та «Мої особисті налаштування».
            З грудня 2021 року встановлення бажаної мови є обов’язковим для кожного облікового запису Hedy.
            Якщо ваш обліковий запис або облікові записи ваших студентів буде створено раніше цієї дати, ви отримаєте повідомлення про те, що бажана мова відсутня.
            Не переживай! Перейдіть до «Мого профілю» та встановіть мову в налаштуваннях профілю.
            Доки ви не виберете мову, Hedy відображатиметься мовою вашого браузера, а якщо ця мова не підтримується, англійською.

            **Для тих, хто не володіє англійською мовою**
            Ви не тільки можете змінити мову пригод на свою мову. Ви також можете вибрати мову ключових слів (наприклад, «друкувати» або «запитати»).
            Таким чином ви можете навчити своїх учнів кодувати за допомогою англійських ключових слів, але ви також можете дозволити їм програмувати своєю мовою. Наприклад, голландські студенти можуть використовувати команду «vraag» замість «ask».
    -   title: Зберігання програм
        text: |
            Оскільки ви вже ввійшли в систему, ви побачите синій банер в розділах Мій профіль та Мої програми.
            Ці вкладки також існують для ваших учнів. У розділі Мої програми ви можете знайти всі коди, які ви зберегли.

            Ви можете легко зберегти свої проекти, вказавши назву проекту на білій панелі та натиснувши зелену кнопку Зберегти код.
            Ви (і ваші студенти) також можете ділитися програмами. Ці програми будуть опубліковані на нашій сторінці огляду, щоб усі бачили та використовували.
            Якщо ви хочете скасувати спільний доступ до своєї програми, перейдіть до «Мої програми» та натисніть «Скасувати спільний доступ».
-   title: Навчання з Хеди
    key: teaching
    subsections:
    -   title: Навчання з Хеди
        text: |
            Hedy містить багато різних рівнів, кожен з яких навчає окремим новим навичкам. Ми рекомендуємо викладати один рівень за урок.
            Це дає вашим учням час, щоб повністю зрозуміти нову команду чи концепцію та потренуватися з ними, перш ніж переходити до наступного рівня.
            Ми використовуємо цю структуру на наших уроках:
    -   title: Slides
        text: |
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Вступ
        text: |
            Ви можете розпочинати свої уроки, активізуючи попередні знання своїх учнів: що вони вже знають про предмет, чого навчилися на попередньому уроці та яких помилок вони припустилися, на яких тепер навчилися?
            Таким чином усі вивчені раніше команди та помилки, які часто допускаються, залишаються свіжими в пам’яті ваших учнів, коли ви розпочинаєте новий урок.
    -   title: Введення нових понять і команд
        text: |
            Деяким студентам може бути дуже важко повністю зрозуміти нові концепції та команди.
            Ось чому важливо змоделювати належне використання нових команд для ваших учнів.
            Особливо на нижчих рівнях, де деякі студенти взагалі не мають досвіду програмування, їм може бути важко зрозуміти нові абстрактні поняття.
            Показ великої кількості прикладів робить абстрактне поняття (наприклад: «Що таке змінна?») більш впізнаваним і легшим для розуміння («Подивіться, змінна pet змінилася на dog»).
    -   title: Приступаємо до роботи
        text: |
            Кожен рівень містить різні пригоди, які можна знайти на рожевих вкладках. Перша рожева вкладка пояснює нові команди на цьому рівні.
            Наступні вкладки — це пригоди, які учні можуть спробувати та створити власні.
            Пригоди розташовані від найпростіших до найскладніших, тому ми рекомендуємо починати зліва, а ваш шлях - праворуч.
            Остання вкладка «що далі» дає невелику підказку про те, що ви дізнаєтесь на наступному рівні. Звичайно, ви можете вибрати пригоди, які ви хочете, щоб ваші учні зробили для кожного рівня.
            Їм не завжди потрібно робити всі пригоди. Кожна пригода містить приклад коду, який учні можуть спробувати за допомогою зеленої кнопки.
            Приклад коду копіюється в робоче поле, де студенти можуть випробувати код і налаштувати його, щоб зробити його власним.
            Стимулюйте своїх учнів перетворювати приклади кодів на власні проекти, додаючи власні ідеї та створюючи власну варіацію пригоди.
    -   title: Тест
        text: |
            Щоб перевірити, чи ваші учні підібрали всю нову інформацію на рівні, ви можете дозволити їм виконати тест.
            Тест містить 10 запитань з декількома варіантами відповідей про нові концепції та команди для цього рівня.
            Ще не на кожному рівні є вікторини, оскільки ми все ще створюємо вікторини.
    -   title: Оцінка
        text: |
            Завершіть свій урок короткою оцінкою. Чого навчилися учні? З якими труднощами вони зіткнулися?
            Як вони вчилися на своїх помилках? І звичайно: що вони створили?
            Студенти часто дуже пишаються своїми творіннями, тому приємно заощадити трохи часу та дати студентам можливість показати свої роботи своїм однокласникам.
-   title: Додаткові можливості Hedy
    key: функції
    subsections:
    -   title: Статистика вчителів
        text: |
            У цьому [відео] (https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) ви знайдете більше інформації про те, як використовувати статистику вчителів у вашому класі.
    -   title: Створіть власну пригоду
        text: |
            Вчителі також можуть створити власну пригоду. [Це відео] (https://www.youtube.com/watch?v=A0zbXpxX4q4) показує, як створити власну пригоду для вчителя та додати її до свого класу (класів).
    -   title: Ознайомитися зі сторінкою
        text: |
            На сторінці [ознайомленя](https://hedy.org/explore) ви можете переглянути роботи інших користувачів Hedy. Ви можете спробувати їхні програми і використати їх як натхнення для створення чогось крутого самостійно.
            Ви також можете додати програму, яку ви створили, на сторінку ознайомлення, натиснувши "Зберегти та поділитися кодом" на екрані кодування або перейти до "Мої програми" і натиснути "Поділитися".
            Не хочете більше ділитися своєю роботою? Просто перейдіть до "Моїх програм" і натисніть "Відкликати".
            Якщо ви хочете дізнатися більше про сторінку ознайомлення, перегляньте це [відео] (https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: Мої досягнення
        text: |
            Якщо ви натиснете на своє ім'я користувача у верхньому правому куті екрану, ви зможете перейти до [Мої досягнення] (https://hedy.org/my-achievements). На цій сторінці зібрані ваші досягнення. Ваші учні також мають таку сторінку.
            Коли ви наведете мишкою на значок, ви побачите, як його заробити. Існують також приховані значки, про які вам доведеться дізнатися самостійно, як їх заробити.
            Якщо ви хочете отримати більше інформації про досягнення, перегляньте це [відео] (https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: Високі результати
        text: |
            На [цій сторінці] (https://hedy.org/highscores) ви можете побачити високі оцінки всіх користувачів Hedy.
            У цьому [відео](https://www.youtube.com/watch?v=IqTiUkBVTo8) ви можете дізнатися більше про високі оцінки.
    -   title: Відладчик
        text: |
            Ваш (студентський) код не працює? Мабуть, у ньому є баг (помилка кодування)! Ви можете скористатися відладчиком, щоб знайти помилку.
            Відладчик - це кнопка у вигляді великої леді на екрані кодування. Якщо ви натиснете її, ви зможете прогнати ваш код рядок за рядком, щоб знайти помилку.
            Ви знайшли помилку? Натисніть червону кнопку "Стоп" і відладчик вимкнеться.
    -   title: Прочитати вголос
        text: |
            Ви хочете, щоб вихідні дані вашої програми були прочитані вголос? Тоді ви можете скористатися функцією читання вголос, яка знаходиться під кнопкою "виконати код" на екрані кодування.
    -   title: Cheat sheets
        text: |
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Режим програміста
        text: |
            Відволіклися від усіх пригод або хочете написати довгу програму? Тоді зверніть увагу на перемикач "Режим для програмістів" внизу екрана кодування.
            Режим програміста дозволяє вам та вашим учням використовувати більший екран для кодування.
    -   title: Інші корисні можливості
        text: |
            У цьому [відео] (https://www.youtube.com/watch?v=c4MntPPgl1Y) показано ще більше можливостей Hedy, наприклад, шпаргалки та перемикач клавіатури.
-   title: Answers to the exercises
    key: answers
    intro: |
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Часті помилки
    levels:
    -   level: '1'
        sections:
        -   title: Учні забувають ввести команди
            example:
                error_text: |
                    Наприклад, вони вводять речення без використання друку.
                error_code: |
                    Hedy не може це надрукувати
                solution_text: |
                    Навчіть своїх учнів завжди починати рядок коду з команди.
                solution_code: |
                    print Hedy може надрукувати це!
        -   title: Під час введення команд учні використовують великі літери
            example:
                error_text: |
                    Команди не працюватимуть, якщо вони написані великими літерами.
                error_code: |
                    Ask Чому мій код не працює?
                    Print Oскільки я використовую великі літери.
                solution_text: |
                    Змініть великі літери.
                solution_code: |
                    ask Чому мій код зараз працює?
                    print Тому що я видалив великі літери!
        -   title: Учні використовують echo без ask
            example:
                error_text: |
                    Команду echo створено для повторення відповіді після запиту. Без команди ask, команда echo нічого не зробить.
                error_code: |
                    echo Ваше ім'я
                solution_text: |
                    Додайте команду запиту, щоб вона працювала.
                solution_code: |
                    ask Як тебе звати?
                    echo Ваше ім'я
        -   title: Учні хочуть, щоб їхнє слово (змінна) які вонни ввели після команди ask було в середині речення
            example:
                error_text: |
                    І вони мають рацію! Ось чому вони навчаться використовувати правильні змінні на наступному рівні.
                error_code: |
                    ask Яка мова програмування найвеселіша?
                    echo найкраще!
                solution_text: |
                    На першому рівні ми маємо зберегти це:
                solution_code: |
                    ask Яка мова програмування найвеселіша?
                    echo Найкраща мова це...
        -   title: 'Черепаха: Учні відпускають черепаху від екрану'
            example:
                error_text: |
                    Часто учні люблять пробувати великі числа, використовуючи черепаху, яка змушує стрілку йти з екрана.
                error_code: |
                    вперед 300
                    поворот на 90
                solution_text: |
                    На прикладі: Учні схильні думати, що команда turn не працює. Незважаючи на те, що вона працює, бо ви не можете побачити, як це відбувається за екраном. Щоб цього не сталося, використовуйте менші числа.
                solution_code: |
                    вперед 100
                    поворот на 90
        -   title: 'Черепаха: Учні використовують команду backward, але її не існує'
            example:
                error_text: |
                    Backward не є командою.
                error_code: |
                    назад 100
                solution_text: |
                    Щоб змусити черепаху рухатися назад, ви використовуєте команду вперед і від’ємне число. Наприклад:
                solution_code: |
                    вперед -100
    -   level: '2'
        sections:
        -   title: Учні роблять помилки у своїх командах
            example:
                error_text: |
                    Hedy не може розпізнати команду з помилкою.
                error_code: |
                    prinnt Не робіть опечаток!
                solution_text: |
                    Навчіть учнів читати повідомлення про помилки. Таким чином вони можуть самі дізнатися, що пішло не так.
                solution_code: |
                    print Не робіть опечаток!
        -   title: Учні забувають, що команда ask змінилася
            example:
                error_text: |
                    На цьому рівні учні дізнаються про змінні. Команда ask також вимагає змінної, але учні забувають про це.
                error_code: |
                    ask що ти хочеш їсти?
                solution_text: |
                    На цьому рівні ви повинні сказати Hedy, де зберегти вашу відповідь, щоб її можна було використати пізніше. Це називається змінною.
                solution_code: |
                    order is ask Що б ви хотіли з'їсти?
        -   title: 'Учні пробують використати команду echo '
            example:
                error_text: |
                    Деяким студентам може бути неприємно дізнатися, що команда echo більше не працює. Саме тому дуже важливо пояснити переваги використання змінних. Наприклад, ви можете використовувати кілька змінних у коді та розміщувати їх у будь-якому реченні, де забажаєте!
                error_code: |
                    answer is ask Чому команда echo більше не працює?!
                    echo
                solution_text: |
                    Замість цього використовуйте змінну.
                solution_code: |
                    answer is ask Чому команда echo більше не працює?!
                    print answer
        -   title: Учні використовують назву змінної чи як звичайне слово
            example:
                error_text: |
                    У наведеному нижче прикладі слово "name" використовується як змінна, але також як звичайний текст. Результатом цього коду буде «Привіт, моє Hedy — є Hedy».
                error_code: |
                    name is Hedy
                    print Привіт, моє name - є name
                solution_text: |
                    Тому не використовуйте слово, яке ви хочете використовувати в тексті, як назву змінної. На четвертому рівні це вирішується за допомогою лапок.
                solution_code: |
                    name is Hedy
                    print Привіт, я name
        -   title: Учні використовують довгі імена змінних, що містять два слова.
            example:
                error_text: |
                    Змінна має бути названа одним словом. Ви можете використовувати підкреслення, щоб з’єднати два слова. Це вважається за одне слово.
                error_code: |
                    chosen door is ask Які двері ви обираєте?
                solution_text: |
                    Додайте підкреслення.
                solution_code: |
                    chosen_door is ask які двері ви обираєте?
        -   title: Учні можуть використовувати дві різні назви для однієї змінної
            example:
                error_text: |
                    У цьому прикладі студент використав 'horse' та 'name' для тих самих змінних.
                error_code: |
                    horse is ask Як звати твого коня?
                    print Твого коня звати name
                solution_text: |
                    Завжди перевіряйте, чи змінна має однакову назву в коді. Незначні відмінності може бути важко помітити (наприклад, множина), бо вони заважатимуть коду.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: |
                    Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: Students forget at in at random
            example:
                error_text: |
                    Як у прикладі
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: |
                    Or they will sometimes put at random at the beginning of the line.
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: Students forget to use commas in their lists
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: Students try to use at random without a list
            example:
                error_text: |
                    Наприклад
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: 'Students try to use add/remove without a list '
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: |
                    After students use if or else they forget to use a second command like print or ask.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: |
                    Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Додати підкреслення
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: |
                    Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: |
                    друкуй '5 + 5'
                solution_text: |
                    In this code the output screen will print '10'.
                solution_code: |
                    друкуй 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: |
                    Some students will find it hard to do maths with variables. Try to show them very simple examples, like:
                error_code: |
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: |
                    Or take it a step further like this.
                solution_code: |
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: |
                    Make sure that the students know to use both the full repeat command and the print command.
                error_code: |
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: |
                    In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: |
                    Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |
                    repeat 3 times
                    print 'hello'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    repeat 3 times
                        print 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: |
                    For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: |
                    This is the correct code for this level:
                solution_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: |
                    You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: |
                    The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: |
                    This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: |
                    We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: |
                    The word animals in the last line should be changed into animal.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: |
                    Students tend to forget to use indentation after a for command.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: |
                    You should use indentation after a for command.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: |
                    Make sure that the students use indentation.
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    for i in range 1 to 5
                        print i
        -   title: Students don't understand the i
            example:
                error_text: |
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    Could just as well be replaced with this code. It works the same.
                solution_code: |
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: |
                    Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: |
                    Decimal numbers can be used from this level on, but you can't use commas.
                error_code: |
                    друкуй 2,5 + 2,5
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    друкуй 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: |
                    Both commands might appear similar, but their functions are very different.
                error_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: |
                    In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: |
                    Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: |
                    These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: |
                    In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: |
                    Indentation is often hard for students.
                error_code: |
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: |
                    The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: |
                    After each command that requires indentation, a colon should be used.
                error_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: |
                    Students will forget to put brackets around their text.
                error_code: |
                    print 'my name is Hedy!'
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    друкуй('мене звуть Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: |
                    The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: |
                    They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: |
                    Ось правильний код:
                solution_code: |
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: типові_помилки
    intro: |
        Ви можете вчитися на своїх помилках, особливо в кодуванні!
        Роблення помилок неминуче, і це чудова можливість вчитися, але для вчителів може бути складним завданням знайти правильне виправлення помилки!
        Особливо тому, що коди стають все довшими в міру просування рівнів. Ось чому ми склали список із частими помилками на кожному рівні та способами їх вирішення.
start-sections:
-   title: Textual programming made easy!
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: Multi-lingual programming
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: Step by step learning
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: Built for the classroom
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Programming in context
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: Is Hedy free?
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!
-   title: Do I need to install anything?
    text: No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: Do I need programming experience to teach with Hedy?
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.
