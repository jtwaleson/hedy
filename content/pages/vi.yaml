title: Tài liệu Hedy
join-sections:
-   title: Hỗ trợ Hedy
    text: '# Có ba cách để bạn hỗ trợ Hedy!'
-   title: Cải thiện ngôn ngữ
    text: |-
        Bản chất "từng bước" và đa ngôn ngữ của Hedy tạo ra nhiều thách thức kỹ thuật hấp dẫn.
        Bạn có thể tìm hiểu những vấn đề đó trên [Github] (https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Biên dịch Hedy
    text: |-
        Bạn không phải lập trình viên sao? Không vấn đề gì! Bạn vẫn có thể ủng hộ Hedy bằng cách [biên dịch những từ khóa, thông báo lỗi, cuộc phiêu lưu và những nội dung khác](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        Đây là trạng thái hiện thời, hãy giúp chúng tôi hoàn thiện những ngôn ngữ sẵn có hoặc thêm mới một ngôn ngữ!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Hỗ trợ giáo viên bắt đầu
    text: |-
        Hedy được thiết kể để hỗ trợ giáo viên cung cấp các bài học lập trình trên lớp. Chúng tôi có các tính năng dành riêng cho giáo viên như tùy chọn tạo lớp học, tùy chỉnh lớp học và quan sát quá trình học tập của học sinh.
        Nếu bạn thích Hedy, bạn có thể liên hệ với những trường học bạn biết để có thể giúp giáo viên ở đó bắt đầu! Chúng tôi có thể giúp bạn tìm trường hoặc giáo viên thông qua [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Do you like Hedy?
    text: |-
        We love to hear from you!
        [Click here to send us a message](mailto:hello@hedy.org "About Hedy")
-   title: Found a bug?
    text: '[Let us know on GitHub](https://github.com/hedyorg/hedy/issues/new/choose)'
-   title: Code week talk
    text: |-
        Nếu bạn muốn biết thêm về Hedy, hãy xem bài thuyết trình của Felienne tại Tuần lễ lập trình Châu Âu 2020 (European Code Week 2020):

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
sections:
-   title: Giới thiệu
    key: giới thiệu
    subsections:
    -   title: Hedy là gì?
        text: |-
            Hedy là một ngôn ngữ lập trình dạng văn bản, được phát triển đặc biệt dành cho thiếu niên (từ 10 đến 15 tuổi).
            Không giống như các ngôn ngữ lập trình dành cho trẻ em (như Scratch), Hedy không sử dụng các khối lệnh mà sử dụng văn bản.
            Vì vậy, với Hedy, bạn sẽ học được cách viết mã như các lập trình viên thực thụ, nhưng theo từng bước nhỏ với các bài tập vui nhộn.
            Bằng cách này, Hedy có thể là bước đệm cho các ngôn ngữ lập trình thực sự như Python theo cách dễ tiếp cận và thú vị nhất!
            Nếu bạn muốn tìm hiểu thêm, hãy xem <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video này</a> về sự phát triển ngôn ngữ lập trình Hedy.
    -   title: Đối tượng mục tiêu
        text: |-
            Hedy được phát triển dành cho học sinh trung học cơ sở (từ 10 - 15 tuổi).
            Khả năng đọc hiểu của học sinh rất quan trọng, vì vậy chúng tôi khuyên bạn không nên bắt đầu với Hedy trước khi học sinh đạt được ít nhất trình độ đọc lớp 3.
            Học sinh (và giáo viên!) không cần bất kỳ kinh nghiệm lập trình nào trước khi bắt đầu với Hedy.
    -   title: Hedy hoạt động như thế nào?
        text: |-
            Hedy được chia thành các cấp độ, mỗi cấp độ lại là một bài học về những câu lệnh mới, với nhiều cuộc phiêu lưu để học sinh thực hành các lệnh mới học được.
            Với vai trò giáo viên, bạn được quyền quyết định học sinh của bạn sẽ có thể thực hành với những chủ đề nào. Ví dụ: Trong cấp độ này, học sinh của bạn sẽ tạo ra một nhà hàng, một máy tính, hay một ngôi nhà ma ám?
            Trong mỗi cấp độ, những cuộc phiêu lưu được sắp xếp từ dễ đến khó. Vì vậy, học sinh của bạn liên tục được thử thách. Học sinh của bạn có thể tự mình thực hành với các cuộc phiêu lưu, hoặc bạn có thể dùng chúng để trong những bài hướng dẫn thông thường.

            The adventures also include a code example, to make sure the less digitally informed teachers are able to use Hedy too!
            Of course Hedy also caters to the creative teachers that love to make their own lessonplans and adventures!

            After programming all the adventures of a certain level, your students can test their knowledge in the quiz.
            You can track your students' work and their progress on the class page.
    -   title: Thiết bị
        text: |-
            Hedy là một ứng dụng web, nghĩa là nó có thể chạy trên mọi thiết bị có trình duyệt web (ví dụ như Google Chrome, Firefox, Edge...). Vì vậy, các loại máy tính, máy tính bảng, hay thậm chí là điện thoại thông minh đều phù hợp để sử dụng Hedy.
            Để có thể bắt đầu với Hedy, chỉ cần truy cập trang web của Hedy là bạn đã có thể sẵn sàng!
    -   title: Cộng đồng Hedy
        text: |-
            Mọi giáo viên, lập trình viên hay người hâm mộ Hedy đều được chào đón tại <a href="https://discord.gg/8yY7dEme9r" target="_blank">máy chủ Discord của chúng tôi</a>. Đây là nơi lý tưởng để trò chuyện về Hedy: chúng tôi có các kênh để bạn có thể chia sẻ những dự án và bài học thú vị, để có thể báo cáo về lỗi phát sinh, và để nói chuyện cùng với những giáo viên khác và đội ngũ Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Tại đây</a> bạn có thể xem video hướng dẫn tham gia cộng đồng trên Discord.
-   title: Hướng dẫn
    key: hướng dẫn
    subsections:
    -   title: Hướng dẫn
        text: Bạn muốn lặp lại hướng dẫn lần nữa chứ? <a href="https://hedy.org/tutorial" target="_blank">Nhấn chuột vào đây nhé</a>.
-   title: Chuẩn bị cho giảng dạy
    key: chuẩn bị
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: Tạo một lớp học
        text: |-
            Là giáo viên, bạn có thể tạo lớp học cho học sinh của mình. Trong lớp học này, bạn có thể xem tài khoản của học sinh, xem những chương trình học sinh viết và giám sát quá trình học tập.
            Đây là <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">video hướng dẫn nhanh</a> cách tạo lớp học trong Hedy.
    -   title: Tùy chỉnh lớp học của bạn
        text: |-
            Bạn cũng có thể tủy chỉnh lớp học và cho phép những nội dung phù hợp xuất hiện. Bằng cách này, học sinh của bạn sẽ không bị choáng ngợp bởi lượng kiến thức và có thể tập trung vào những bài học được lựa chọn bởi giáo viên.
            Đây là <a href="https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s)" target="_blank">video hướng dẫn bạn</a> cách tùy chỉnh lớp học.
    -   title: Tài khoản học sinh
        text: |-
            Có hai cách để học sinh tham gia lớp học của bạn. Học sinh của bạn có thể tự tạo tài khoản, hoặc bạn có thể tạo tài khoản cho học sinh của mình.

            **Học sinh tự tạo tài khoản**
            Cũng như giáo viên, học sinh có thể truy cập website của Hedy và tạo tài khoản cho bản thân. Quá trình vào lớp rất đơn giản, học sinh chỉ cần truy cập đường dẫn lời mời.
            Bạn có thể thấy link mời trên trang lớp học, và có thể gửi nó đến học sinh của mình. Để quá trình diễn ra thuận lợi, hãy nhớ rằng học sinh cần đăng nhập vào Hedy khi họ truy cập link.

            **Giáo viên tạo tài khoản cho học sinh**
            Đôi khi, việc tự tạo một loạt tài khoản cho học sinh của bạn sẽ dễ dàng hơn. Điều này có thể được thực hiện bằng cách nhấp vào nút 'tạo tài khoản học sinh' và điền tên người dùng và mật khẩu cho họ.
            Các học sinh có thể đăng nhập với tên người dùng và mật khẩu mà bạn đã chọn. Sau đó, họ có thể thay đổi tên người dùng hoặc mật khẩu nếu muốn và họ sẽ vẫn ở trong lớp học của bạn.
    -   title: Cài đặt ngôn ngữ ưu tiên
        text: |-
            Học sinh khi tạo hồ sơ sẽ phải chọn "ngôn ngữ ưu tiên" mà họ muốn. Hedy sẽ luôn hiển thị bằng ngôn ngữ đã chọn.
            Việc thay đổi ngôn ngữ có thể được thực hiện sau, bằng cách vào mục "Tài khoản của tôi" và "Cài đặt cá nhân của tôi" một lần nữa.
            Kể từ tháng 12 năm 2021, việc thiết lập ngôn ngữ ưu tiên là bắt buộc cho mọi tài khoản Hedy.
            Với những tài khoản được tạo ra trước thời gian này, chủ tài khoản sẽ nhận được thông báo về việc thiếu ngôn ngữ ưu tiên.
            Đừng lo lắng, chỉ cần vào mục "Hồ sơ của tôi" và chọn một ngôn ngữ thôi!
            Cho đến khi bạn chọn một ngôn ngữ, Hedy sẽ được hiển thị bằng ngôn ngữ của trình duyệt web bạn dùng (Hedy sẽ hiển thị bằng tiếng Anh nếu ngôn ngữ ấy chưa được hỗ trợ).

            **Dành cho những người không nói tiếng Anh**
            Bạn không những có thể thay đổi ngôn ngữ của cuộc phiêu lưu sang ngôn ngữ của riêng mình, mà bạn cũng có thể chọn ngôn ngữ của từ khóa (ví dụ: "in" hoặc "hỏi").
            Bằng cách này, bạn có thể dạy học sinh của mình lập trình bằng các từ khóa tiếng Anh, nhưng bạn cũng có thể để họ lập trình theo ngôn ngữ của riêng họ. Ví dụ, học sinh Việt Nam có thể sử dụng lệnh "hỏi" thay vì "in".

            Ghi chú: Đến thời điểm này, bản dịch từ khóa Hedy tiếng Việt chưa được cập nhật và thống nhất đầy đủ. Trong trường hợp có vấn đề, bạn nên tạm thời sử dụng tiếng Anh.

            **Video**
            <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">Video này</a> hướng dẫn cách thiết đặt ngôn ngữ ưu tiên và cách chuyển ngữ từ khóa sang ngôn ngữ được ưu tiên.
    -   title: Lưu trữ chương trình
        text: |-
            Vì bạn đã đăng nhập, bạn sẽ thấy biểu ngữ màu xanh dương có "Hồ sơ của tôi" và "Chương trình của tôi".
            Tài khoản học sinh của bạn cũng có những tab này. Trong mục "Chương trình của tôi", bạn có thể truy cập vào tất cả chương trình bạn đã lưu.

            Bạn có thể lưu các dự án một cách dễ dàng, bằng cách đặt tên cho chúng trong thanh màu trắng và nhấn nút "Lưu chương trình" màu xanh lá cây.
            Bạn và học sinh có thể chia sẻ chương trình với nhau. Các chương trình này sẽ được đăng tải trên trang "Khám phá" của chúng tôi để mọi người cùng thấy và sử dụng.
            Nếu bạn muốn hủy chia sẻ chương trình, chuyển đến "Chương trình của tôi" và nhấn nút "Không chia sẻ".
-   title: Giảng dạy với Hedy
    key: giảng dạy
    subsections:
    -   title: Giảng dạy với Hedy
        text: |-
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: Bài giảng điện tử (Slide)
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Giới thiệu
        text: |-
            Bạn có thể bắt đầu bài học bằng cách chủ động sử dụng kiến thức có sẵn của học sinh: Các em đã biết gì về đề tài này, các em đã học gì trong bài học trước và các em đã mắc những lỗi gì (mà sau đó các em rút kinh nghiệm được)?
            Bằng cách này, học sinh của bạn sẽ luôn nhớ kiến thức về lập trình và những lỗi thường gặp phải khi tiếp nhận bài học mới.
    -   title: Introduction of new concepts and commands
        text: |-
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog'). Our slides could help you with that.
    -   title: Let's get to work
        text: |-
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: Quiz
        text: |-
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
    -   title: Đánh giá
        text: |-
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: Extra Hedy features
    key: tính năng
    subsections:
    -   title: Teacher Statistics
        text: This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: Make your own adventure
        text: It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: Khám phá trang
        text: |-
            On the [explore](https://hedy.org/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: My achievements
        text: |-
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedy.org/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: High Scores
        text: |-
            On [this page](https://hedy.org/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: Bộ gỡ lỗi
        text: |-
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: Read aloud
        text: Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: Chế độ lập trình viên
        text: |-
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyword switcher.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Frequently made mistakes
    levels:
    -   level: '1'
        sections:
        -   title: Students forget to type commandos
            example:
                error_text: For example they type a sentence without using print.
                error_code: Hedy can't print this
                solution_text: Teach your students to always start a line of code with a command.
                solution_code: print Hedy can print this!
        -   title: Students use capitals when typing commands
            example:
                error_text: Commands won't work if they are in capitals.
                error_code: |-
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: Remove the capitals.
                solution_code: |-
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: Students use echo without ask
            example:
                error_text: Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: echo Your name is
                solution_text: Add an ask command to make it work.
                solution_code: |-
                    ask What's your name?
                    echo Your name is
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_text: And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |-
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: 'In level 1 we have to keep it at this:'
                solution_code: |-
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_text: Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |-
                    forward 300
                    turn 90
                solution_text: In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |-
                    forward 100
                    turn 90
        -   title: 'Turtle: Students use the command backward, but that doesn''t exist'
            example:
                error_text: Backward is not a command.
                error_code: backward 100
                solution_text: 'To make the turtle go backwards, you use the forward command and a negative number. For example:'
                solution_code: forward -100
    -   level: '2'
        sections:
        -   title: Students make typos in their commands
            example:
                error_text: Hedy can't recognize a command with a typo.
                error_code: prinnt Don't make typos!
                solution_text: Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: print Don't make typos!
        -   title: Students forget that the ask command has changed
            example:
                error_text: In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: ask what would you like to eat?
                solution_text: In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: order is ask What would you like to eat?
        -   title: Students try to use the echo command
            example:
                error_text: For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |-
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: Use a varible instead.
                solution_code: |-
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: Students use a variable name or as a normal word
            example:
                error_text: In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |-
                    name is Hedy
                    print Hi my name is name
                solution_text: So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |-
                    name is Hedy
                    print Hi I'm name
        -   title: Students use long variable names containing two words.
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask Which door do you pick?
                solution_text: Add an underscore.
                solution_code: chosen_door is ask which door do you pick?
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: A list can't be printed. You can only print one item from the list with at random.
                error_code: |-
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |-
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |-
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |-
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: Students forget at in at random
            example:
                error_text: Like in the example
                error_code: |-
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: Or they will sometimes put at random at the beginning of the line.
                error_code: |-
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: Students try to use at random without a list
            example:
                error_text: For example
                error_code: |-
                    clubs is Manchester United
                    print clubs at random
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    print Hello
                    mood is ask 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |-
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: 'These are the correct quotation marks:'
                solution_code: |-
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: print 'You're not allowed to type this'
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: After students use if or else they forget to use a second command like print or ask.
                error_code: |-
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: Add the print command to fix it.
                solution_code: |-
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |-
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask 'Which door do you pick?'
                solution_text: Add an underscore.
                solution_code: chosen_door is ask 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: print '5 + 5'
                solution_text: In this code the output screen will print '10'.
                solution_code: print 5 + 5
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: repeat 100 times print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |-
                    repeat 3 times
                    print 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    repeat 3 times
                        print 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: Make sure the codes aren't too long
                solution_code: |-
                    repeat 20 times
                        print 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    for i in range 1 to 5
                        print i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    for i in range 1 to 5
                    print i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: print 2,5 + 2,5
                solution_text: 'This is the correct code:'
                solution_code: print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: print 'my name is Hedy!'
                solution_text: 'This is the correct code:'
                solution_code: print('my name is Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
    key: common_mistakes
    intro: |-
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
start-sections:
-   title: Lập trình bằng văn bản dễ dàng!
    text: |-
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: Multi-lingual programming
    text: While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a
        a new translation.
-   title: Step by step learning
    text: Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven
        way to learn!
-   title: Built for the classroom
    text: |-
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Programming in context
    text: Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to
        create games or apps with buttons and keyboard actions.
-   title: Is Hedy free?
    text: |-
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!
-   title: Do I need to install anything?
    text: No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: Do I need programming experience to teach with Hedy?
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.
