levels:
    0:
        1:
            text: Hedy est un langage de programmation.
            header: Bienvenue sur Hedy !
        2:
            text: |-
                Programmer c'est donner des instructions à un ordinateur en utilisant la langue de l'ordinateur.

                Ce type de langue s'appelle un "langage de programmation".
            header: Programmation
        3:
            text: |-
                Peut-être connais tu quelques langages de programmation ?
                Par exemple :
                * Scratch
                * Python
                * HTML
            header: Langage de programmation
        4:
            text: |-
                Si tu sais programmer, tu sais faire plein de super choses :
                * Ecrire des histoires interactives
                * Créer des dessins sur l'ordinateur et les transférer sur du papier ou du tissu
                * Créer tes propres applications à installer sur ton smartphone
            header: Programmation
        5:
            text: |-
                Dans Hedy nous utilisons des codes speciaux comme : `{print}`.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
            header: Programmer en Hedy
        6:
            text: |-
                Les mots du code seront affichés en rose.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
            header: Programmer avec Hedy
        7:
            text: |-
                On lance le code avec le bouton « Exécuter le code » sous le code.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
            header: Programmer en Hedy
        8:
            text: |-
                Les sorties apparaissent sur le côté droit.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
            header: Programmer en Hedy
        9:
            text: |-
                La sortie peut également être une figure.
                <iframe class="embedded-hedy" src="/adventure/turtle/1/raw"></iframe>
            header: Programmer en Hedy
    1:
        1:
            text: |-
                Commençons le niveau 1 en créant des histoires en Hedy !

                Nous avons besoin de trois codes textuels pour créer des histoires interactives.
            header: Bienvenue au niveau 1 !
        2:
            text: |-
                Le premier code que tu peux utiliser au niveau 1 est `{print}`.

                `{print}` permet d'afficher du texte à l'écran.
            editor: <iframe class="fragment" src="/adventure/print_command/1/raw"></iframe>
            header: '{print}'
        3:
            text: |-
                Tu peux changer le texte après la commande affiche par ce que tu veux.

                Tu peux également imprimer plusieurs lignes en ajoutant une autre ligne de code qui commence également par `{print}`.
            editor: <iframe class="fragment" src="/adventure/print_command/1/raw"></iframe>
            header: La commande {print}
        4:
            text: |-
                Le deuxième code que tu peux utiliser au niveau 1 est `{ask}`.

                `{ask}` est utilisé pour poser une question à laquelle on peut répondre.
            editor: <iframe class="fragment" src="/adventure/rock/1/raw"></iframe>
            header: '{ask}'
        5:
            text: |-
                Comme tu as pu le voir dans l'exemple précédent, si tu utilises la commande `{ask}`, tu peux poser une question.

                Cependant, la réponse n'apparaît pas dans l'écran de sortie.

                Si tu veux que la réponse s'affiche, tu peux utiliser la commande finale de ce niveau: `{echo}`.

                `{echo}` est utilisée pour répéter la réponse d'un `{ask}`.
            editor: <iframe class="fragment" src="/adventure/ask_command/1/raw"></iframe>
            header: '{echo}'
        6:
            text: |-
                Avec `{print}`, `{ask}` et `{echo}` tu peux déjà créer une petite histoire.
                Il est temps d'essayer l'histoire du Perroquet et les aventures "Pierre, Feuille, Ciseaux".
            header: Programmons !
        7:
            text: Les aventures sont affichées dans des onglets.
            editor: <iframe class="fragment" src="/hedy/1"></iframe>
            header: Programmons !
        8:
            text: |-
                Les boutons en forme de flèches jaunes peuvent être utilisés pour copier des exemples.
                <iframe class="fragment" src="/hedy/1">
            header: Programmons!
        9:
            text: Maintenant que nous avons vu les codes textuels, nous allons désormais nous attarder sur les codes en forme de dessins.
            header: Dessinons avec la tortue
        10:
            text: '`{forward}` est utilisé pour faire avancer la tortue.'
            editor: <iframe class="fragment" src="/adventure/turtle/1/raw"></iframe>
            header: 'Dessinons avec la tortue : {forward}'
        11:
            text: '`{turn}` est utilisée pour faire tourner la tortue vers la gauche ou la droite.'
            editor: <iframe class="fragment" src="/adventure/turtle/1/raw"></iframe>
            header: 'Dessinons avec la tortue: {turn}'
    2:
        1:
            text: |-
                Dans ce niveau tu vas apprendre à utiliser les variables.

                Une variable est un mot qui peut être utilisé pour conserver des informations.

                Par exemple: un nom, un âge ou ton équipe sportive favorite.
            header: Bienvenue au niveau 2
        2:
            text: Pour créer ou 'définir' une variable nous utilisons la commande `{is}`.
            editor: <iframe class="fragment" src="/adventure/is_command/2/raw"></iframe>
            header: Variables
        3:
            text: |-
                Nous pouvons aussi définir une variable en posant des questions.

                La réponse à la question posée est alors stockée dans la variable..

                De cette façon nous n'avons pas besoin de la commande `{echo}`  .
            editor: <iframe class="fragment" src="/adventure/ask_command/2/raw"></iframe>
            header: Interactif
        4:
            text: Maintenant que nous utilisons les variables, nous pouvons utiliser des variables multiples au lieu d'une seule commande `{echo}`.
            editor: <iframe class="fragment" src="/adventure/ask_command/2/raw"></iframe>
            header: Variables multiples
        5:
            text: Tu peux aussi utiliser la commande `{sleep}` pour mettre le code en pause pendant un moment.
            editor: <iframe class="fragment" src="/adventure/sleep_command/2/raw"></iframe>
            header: Sleep
        6:
            text: |-
                Tu peux ajouter un nombre après la commande `{sleep}` si tu veux que la pause soit plus longue.

                Si tu le veux, tu peux même utiliser une variable au lieu d'un nombre pour contrôler la durée de la commande sleep.
            editor: <iframe class="fragment" src="/adventure/sleep_command/2/raw"></iframe>
            header: Sleep 5
        7:
            text: Profite des aventures du niveau 3!
            header: Que le plaisir de programmer commence!
    3:
        1:
            text: Dans ce niveau tu apprendras à faire une liste, à ajouter et retirer des éléments de tes listes et à choisir un élément au hasard parmi une liste.
            header: Bienvenue au niveau 3
        2:
            text: |-
                Tu crées une liste avec `{is}`
                Sépare les éléments de ta liste avec une virgule.
            editor: <iframe class="fragment" src="/adventure/random_command/3/raw"></iframe>
            header: Créons une liste
        3:
            text: |-
                Tu peux utiliser la liste avec la commande `{at}` `{random}`.
                L'ordinateur tirera au hasard un élément de la liste.
                A chaque fois que tu exécuteras le code, le tirage changera.
            editor: <iframe class="fragment" src="/adventure/dice/3/raw"></iframe>
            header: Au hasard
        4:
            text: Tu peux également utiliser la commande `{at}` `{random}` dans une phrase.
            editor: <iframe class="fragment" src="/adventure/random_command/3/raw"></iframe>
            header: Au hasard dans une phrase
        5:
            text: |-
                Tu peux ajouter des éléments à une liste avec la commande `{add}` `{to}`.

                Tu peux choisir ce qu'il faut ajouter à la liste ou tu peux combiner la commande `{add}` `{to}` avec la commande `{ask}` .
                De cette façon, tu peux laisser le joueur décider de ce qu'il faut ajouter à la liste.
            editor: <iframe class="fragment" src="/adventure/add_remove_command/3/raw"></iframe>
            header: Ajouter à
        6:
            text: |-
                Le contraire de la commande `{add}` `{to}` est la commande  `{remove}` `{from}`.
                Cette commande retire un élément d'une liste.
            editor: <iframe class="fragment" src="/adventure/add_remove_command/3/raw"></iframe>
            header: Retirer de
        9:
            text: Profite des aventures du niveau 3!
            header: Il est temps de passer à l'action!
    4:
        1:
            text: Dans ce niveau, tu apprendras à te servir des guillemets.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
            header: Bienvenue au niveau 4
        2:
            text: 'Dans les niveaux précédents, tu as peut-être été confronté à ce problème:'
            editor: <iframe class="fragment" src="/adventure/default/4/raw"></iframe>
            header: Problème
        3:
            text: |-
                Dans ce niveau, nous résoudrons ce problème en utilisant des guillemets.

                Notre code ressemblera aussi davantage à un "vrai" code Python.
            header: Résolvons-le avec les guillemets
        4:
            text: A chaque fois que tu utilises la commande`{print}`, il faut que tu mettes le texte que tu veux voir apparaître à l'écran entre guillemets.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
            header: Guillemets avec print
        5:
            text: C'est aussi valable pour la commande `{ask}`.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
            header: Guillemets avec ask
        6:
            text: |-
                Tu ne veux pas que le nom des variables soit affiché à l'écran.
                C'est pourquoi les variables doivent être laissées en dehors des guillemets, comme ça:
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
            header: Guillemets et variables
        7:
            text: |-
                Quand les noms des variables sont utilisés au milieu d'une phrase, tu dois laisser les variables en dehors des guillemets.
                Néanmoins, le reste de la phrase a besoin de guillemets. Cela ressemble à ça:
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
            header: Guillemets et variables
        8:
            text: |-
                Be careful! Now that you are using quotation marks, you can't use apostrophes in contractions.

                Please try to print a contraction like "you're" or "I'm" in the screen below and see what happens....
            editor: <iframe class="fragment" src="/adventure/rock/4/raw"></iframe>
            header: Quotation marks and contractions
        9:
            text: Enjoy the adventures in level 4!
            editor: <iframe class="fragment" src="/adventure/clear_command/4/raw"></iframe>
            header: Ready, Set, Go!
        10:
            text: Enjoy the adventures in level 4!
            header: Ready, Set, Go!
    5:
        1:
            text: 'In this level you will learn to use 3 new commands: `{if}`, `{else}` and `{in}`.'
            header: Welcome to level 5
        2:
            text: |-
                The `{if}` command allows you to choose between two options.
                In this example the computer will print 'nice' if the given answer is Hedy.
                If the answer is not Hedy, the computer will do nothing.
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
            header: if
        3:
            text: When using the `{if}` command, don't forget to use the `{print}` command.
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
            header: Don't forget to print
        4:
            text: |-
                When using an `{if}` command, you can also add an `{else}` command.
                If the answer is Hedy, the computer will print 'nice'.
                But if the answer is something else the computer will print 'boo'
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
            header: else
        5:
            text: |-
                You might have noticed that your lines can get very long when you have both an `{if}` and an `{else}` command.

                You can choose to seperate commands and put them on 2 lines, like this:
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
            header: Long lines
        6:
            text: |-
                If you have practised with the `{if}` and `{else}` commands, you can also try the `{in}` command.

                With `{in}` you can let the computer check if an item is in a list, for example:

                Please note that Hedy is case sensitive. This means that if you answer "Green" instead of "green", Hedy will print "meh".
            editor: <iframe class="fragment" src="/adventure/in_command/5/raw"></iframe>
            header: Another new command
        7:
            text: Enjoy the adventures in level 5!
            header: Let's go!
    6:
        1:
            text: In this level we are adding maths to our codes.
            header: Welcome to level 6
        2:
            text: If you want to calculate an addition, simply use the plus sign.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
            header: Addition
        3:
            text: If you want to subtract, you can use the minus sign.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
            header: Subtraction
        4:
            text: If you want to do multiplications, you can use the asterisk.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
            header: Multiplication
        5:
            text: You can use the slash for division.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
            header: Division
        6:
            text: In summary, you can use +, -, * and / to do maths.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
            header: Summary
        7:
            text: |-
                From now on you can also use the = symbol instead of the `{is}` command.
                This goes for both numbers and words, and it also goes after the `{if}` or `{else}` commands.
            editor: <iframe class="fragment" src="/adventure/is_command/6/raw"></iframe>
            header: The = symbol
        8:
            text: 'You can use calculations with numbers, but you can also use variables to do calculations, like this:'
            editor: <iframe class="fragment" src="/adventure/calculator/6/raw"></iframe>
            header: Calculations with variables
        9:
            text: Enjoy the adventures in level 6!
            header: Let's get to work!
    7:
        1:
            text: In this level you will learn how to repeat a line of code as many times a you'd like.
            header: Welcome to level 7
        2:
            text: |-
                If you want to repeat a line of code, you can use the `{repeat}` 3 `{times}` code.
                If you want to repeat the line more times, simply change the number.

                For example: If you are programming a story where your character shouts for help for 5 times, it could look like this:
            editor: <iframe class="fragment" src="/adventure/story/7/raw"></iframe>
            header: repeat 3 times
        3:
            text: When using the repeat command, do not forget the `{print}` command.
            editor: <iframe class="fragment" src="/adventure/print/7/raw"></iframe>
            header: Don't forget the print command
        4:
            text: You can also repeat an `{ask}`, `{if}` or `{else}` command multiple times.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/7/raw"></iframe>
            header: Repeat an ask command
        5:
            text: Enjoy the adventures in level 7!
            header: Ready Set Go!
    8:
        1:
            text: In this level you will learn to use indentation to make the `{repeat}`, `{if}` and `{else}` commands work for multiple lines of code.
            header: Welcome to level 8
        2:
            text: |-
                In the previous levels, the `{repeat}` command looked like this:

                You could only repeat one line of code.
            editor: <iframe class="fragment" src="/adventure/story/7/raw"></iframe>
            header: '{repeat} commands before'
        3:
            text: |-
                In this level you can repeat multiple lines of code. To do this you must tell the computer which lines belong together and should be repeated.
                You do this by using indentation.

                Use 4 spaces (or one tab) at the beginning of each line that you want to repeat, like this:
            editor: <iframe class="fragment" src="/adventure/repeat_command/8/raw"></iframe>
            header: '{repeat} commands now'
        4:
            text: |-
                If you want to, you can continue after the `{repeat}` command without indentation.
                The lines that do not start with indentation will not be repeated.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/8/raw"></iframe>
            header: '{repeat} commands now'
        5:
            text: |-
                The same goes for the `{if}` and `{else}` commands.
                These were the commands before:
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
            header: if and else before
        6:
            text: |-
                These are the `{if}` and `{else}` commands now.
                Each line after the `{if}` and `{else}` commands start with indentation.
            editor: <iframe class="fragment" src="/adventure/if_command/8/raw"></iframe>
            header: if and else now
        7:
            text: Just like with the `{repeat}` command, you can stop using indentation and the lines will always be shown. Not just if the statement is true.
            editor: <iframe class="fragment" src="/adventure/if_command/8/raw"></iframe>
            header: stopping the indentation
        8:
            text: |-
                You might have thought of trying to put an if command inside a repeat command, or inside another if command.
                For now, this is not possible yet. In the higher levels, it will be allowed, but for now let's focus on practising the `{if}` `{else}` and `{repeat}` commands with proper indentation first.
            header: if statements inside if statements
        9:
            text: Enjoy the adventures in level 8!
            header: Let's check out the adventures!
    9:
        1:
            text: |-
                In this level you can use multiple lines of code after an `{if}` or after a `{repeat}` command.

                You can even put a `{repeat}` command within another `{repeat}`  command.
            header: Welcome to level 9
        2:
            text: You are allowed to use multiple lines after `{repeat}`.
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
            header: Multiple lines after `{repeat}`
        3:
            text: Indentation is very important to tell the computer which lines should be repeated and which lines should only be ran once.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/8/raw"></iframe>
            header: Indentation matters!
        4:
            text: You can also use multiple lines after `{if}`
            editor: <iframe class="fragment" src="/adventure/if_command/9/raw"></iframe>
            header: Multipe lines after `{if}`
        5:
            text: Again, indentation is still very important and can make a big difference in the code.
            editor: <iframe class="fragment" src="/adventure/if_command/9/raw"></iframe>
            header: Indentation matters
        6:
            text: |-
                Now that you can use multiple lines of code after these command, you can also put them within each other.
                Check it out:
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
            header: An `{if}` inside a `{repeat}`
        7:
            text: Mind that the fourth and sixth line of this code starts with 8 spaces of indentation.
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
            header: Mind the indentation
        8:
            text: Enjoy the adventures in level 9!
            header: Let's go!
    10:
        1:
            text: 'In this level you will learn a new command: `{for}`.'
            header: Welcome to level 10
        2:
            text: With for you can make a list and use all items on that list. `{for}` creates a block, like repeat and if so all lines in the block need to start with indentation (4 spaces).
            editor: <iframe class="fragment" src="/adventure/for_command/10/raw"></iframe>
            header: The for command
        3:
            text: 'Here you see another example of the `{for}` command:'
            editor: <iframe class="fragment" src="/adventure/dishes/10/raw"></iframe>
            header: The for command
        4:
            text: Enjoy the adventures in level 10!
            header: Time to program!
    11:
        1:
            text: |-
                In this level, we add a new form of the `{for}` command. In earlier levels, we used for with a list, but we can also use for with numbers.

                This way we don't need the `{repeat}` command anymore.
            header: Welcome to level 11
        2:
            text: 'This is what the new for command looks like:'
            editor: <iframe class="fragment" src="/adventure/for_command/11/raw"></iframe>
            header: The for command
        3:
            text: |-
                In the previous slide the variable was named 'counter', because it was counting down.
                You can of course use any name for the variable you want.
                The standard name  for variables in this situation that is used in programming languages like Python is 'i'.
                That looks like this:
            editor: <iframe class="fragment" src="/adventure/calculator/11/raw"></iframe>
            header: the variable i
        4:
            text: Enjoy the adventures in level 11!
            header: Let's start programming!
    12:
        1:
            text: From this level on you are allowed to use decimal numbers and there are some changes to the quotation marks.
            header: Welcome to level 12
        2:
            text: |-
                This level makes some changes to the usage of quotation marks.
                From now on, **all texts** need to be in quotation marks. This includes values of variables, items on lists and text after {if} commands.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/12/raw"></iframe>
            header: Quotation marks
        3:
            text: |-
                From this level on you are also allowed to use decimal numbers. This can make programs like your restaurant even better!

                Numbers do not quotation marks.
            editor: <iframe class="fragment" src="/adventure/maths/12/raw"></iframe>
            header: Decimal numbers
        4:
            text: Enjoy the adventures in level 12!
            header: Ready to try it out?
    13:
        1:
            text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two ifs but can use and and or.
            header: Welcome to level 13
        2:
            text: |-
                The `{and}` command is always used in a combination with the {if} command.
                This way you can check if 2 statements are true. For example:
            editor: <iframe class="fragment" src="/adventure/and_or_command/13/raw"></iframe>
            header: The and command
        3:
            text: |-
                The `{or}` works in the same way as the `{and}` command, but only 1 of the two statements has to be true.

                Let's see what happens when you change the `{and}` for `{or}`.
            editor: <iframe class="fragment" src="/adventure/and_or_command/13/raw"></iframe>
            header: The or command
        4:
            text: Enjoy the adventures in level 13!
            header: Let's go!
    14:
        1:
            text: In this level you'll learn some new symbols that can help you improve your programs, like >.
            header: Welcome to level 14
        2:
            text: |-
                These are the new symbols you can use:

                  The >  means bigger than...

                  The >= means bigger than or the same as...

                  The <  means smaller than...

                  The <= means smaller than or the same as...

                You can use them like this:
            editor: <iframe class="fragment" src="/adventure/is_command/14/raw"></iframe>
            header: Symbols
        3:
            text: |-
                You can also use:

                == is the same as.

                != is not

                == is used in `{if}` statements.
            editor: <iframe class="fragment" src="/adventure/default/14/raw"></iframe>
            header: Symbols
        4:
            text: Enjoy the adventures in level 14!
            header: Let's get to work!
    15:
        1:
            text: In this level you will learn about the `{while}` loop.
            header: Welcome to level 15
        2:
            text: |-
                We are going to learn a new loop, the while loop! The loop continues as long as the statement is true. So don't forget to change the value in the loop.

                In the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop will never end!
            editor: <iframe class="fragment" src="/adventure/while_command/15/raw"></iframe>
            header: '{while}'
        3:
            text: Enjoy the adventures in level 15!
            header: Let's try it out!
    16:
        1:
            text: In this level you will learn about the [square brackets] and how to use them.
            header: Welcome to level 16
        2:
            text: We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels. We use square brackets to point out a place in a list. The at random command can not be used anymore.
            editor: <iframe class="fragment" src="/adventure/random_command/16/raw"></iframe>
            header: Square brackets
        3:
            text: Enjoy the adventures in level 16!
            header: Let's try it out!
    17:
        1:
            text: in this level you will learn how to use a colon and you will learn the elif command.
            header: Welcome to level 17
        2:
            text: 'Now we are going to change indentation a little bit. Every time that we need an indentation, we need : at the line before the indentation.'
            editor: <iframe class="fragment" src="/adventure/print_command/17/raw"></iframe>
            header: Colon
        3:
            text: 'In this level you can also use a new command: elif. elif is short for else if and you need it when you want to make 3 (or more!) options. Check it out!'
            editor: <iframe class="fragment" src="/adventure/elif_command/17/raw"></iframe>
            header: Elif
        4:
            text: Enjoy the adventures in level 17!
            header: Let's try it out!
    18:
        1:
            text: Congratulations! You have reached the last level of Hedy! The code you have created here can be copied to real Python environments like replit or PyCharm, and you can continue learning there! Note however that Python can only read English commands, so if you have been using other languages,
                you will need to switch to English now.
            header: Welcome to level 18
        2:
            text: |-
                We arrived at real Python code! That means we need to use parentheses with print and range from now on.

                Also, if you want to print more than one item, you need to separate them by commas.

                The final change we will need to make to get Python code is changing ask into input.

                Click on the 'print' tab for all the examples.
            editor: <iframe class="fragment" src="/hedy/18"></iframe>
            header: The Python way
        3:
            text: Enjoy the very last adventures in level 18!
            header: The very last adventures!
